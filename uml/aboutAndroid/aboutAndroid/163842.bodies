class ScreenshotSetting
!!!317058.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        addPreferencesFromResource(R.xml.screenshot);

        mContext = getActivity();
        mDelay = (ListPreference) findPreference(KEY_SCREENSHOT_DELAY);
        mStorage = (ListPreference) findPreference(KEY_SCREENSHOT_STORAGE_LOCATION);
        mShow = (CheckBoxPreference) findPreference(KEY_SCREENSHOT_SHOW);
        mVersion = (Preference) findPreference(KEY_SCREENSHOT_VERSION);

        mShow.setOnPreferenceChangeListener(this);
        mDelay.setOnPreferenceChangeListener(this);
        mStorage.setOnPreferenceChangeListener(this);

        mSharedPreference = this.getPreferenceScreen().getSharedPreferences();
        mEdit = mSharedPreference.edit();

        String summary_delay = mDelay.getSharedPreferences().getString("screenshot_delay", "15");
        mDelay.setSummary(summary_delay + getString(R.string.later));
        mDelay.setValue(summary_delay);
        String summary_storage = mStorage.getSharedPreferences().getString("screenshot_storage", "flash");
        mStorage.setValue(summary_storage);
        mStorage.setSummary(mStorage.getEntry());
        boolean isShow = Settings.System.getInt(mContext.getContentResolver(), Settings.System.SCREENSHOT_BUTTON_SHOW, 1) == 1;
        mShow.setChecked(isShow);
        Resources res = mContext.getResources();
        boolean mHasNavigationBar = res.getBoolean(com.android.internal.R.bool.config_showNavigationBar);
        if (!mHasNavigationBar) {
            getPreferenceScreen().removePreference(mShow);
        }
        getPreferenceScreen().removePreference(mVersion);

        mScreenshot = (SettingsApplication) getActivity().getApplication();
!!!317186.java!!!	onPreferenceChange(inout preference : Preference, inout newValue : Object) : boolean
        // TODO Auto-generated method stub
        if (preference == mDelay) {
            int value = Integer.parseInt((String) newValue);
            mDelay.setSummary((String) newValue + getString(R.string.later));
            mScreenshot.startScreenshot(value);
        } else if (preference == mStorage) {
            String value = (String) newValue;
            //mEdit.putString("storageLocation",value);
            if (value.equals("flash")) {
                Settings.System.putString(getContentResolver(), Settings.System.SCREENSHOT_LOCATION, INTERNAL_STORAGE);
                mStorage.setSummary(mStorage.getEntries()[0]);
            } else if (value.equals("sdcard")) {
                Settings.System.putString(getContentResolver(), Settings.System.SCREENSHOT_LOCATION, EXTERNAL_SD_STORAGE);
                mStorage.setSummary(mStorage.getEntries()[1]);
            } else if (value.equals("usb")) {
                Settings.System.putString(getContentResolver(), Settings.System.SCREENSHOT_LOCATION, EXTERNAL_USB_STORAGE);
                mStorage.setSummary(mStorage.getEntries()[2]);
            }

        }
        return true;
!!!317314.java!!!	onPreferenceTreeClick(inout preference : Preference) : boolean
        // TODO Auto-generated method stub
        if (preference == mShow) {
            boolean show = mShow.isChecked();
            Settings.System.putInt(getContentResolver(), Settings.System.SCREENSHOT_BUTTON_SHOW, show ? 1 : 0);
        }
        return super.onPreferenceTreeClick(preference);
!!!317442.java!!!	getMetricsCategory() : int
        // TODO Auto-generated method stub
        return InstrumentedFragment.SCREENSHOT;

class SettingsPreferenceFragment
!!!136578.java!!!	onCreate(inout icicle : Bundle) : void
        super.onCreate(icicle);

        if (icicle != null) {
            mPreferenceHighlighted = icicle.getBoolean(SAVE_HIGHLIGHTED_KEY);
        }

        // Prepare help url and enable menu if necessary
        Bundle arguments = getArguments();
        int helpResource;
        if (arguments != null && arguments.containsKey(HELP_URI_RESOURCE_KEY)) {
            helpResource = arguments.getInt(HELP_URI_RESOURCE_KEY);
        } else {
            helpResource = getHelpResource();
        }
        if (helpResource != 0) {
            mHelpUri = getResources().getString(helpResource);
        }
!!!136706.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        final View root = super.onCreateView(inflater, container, savedInstanceState);
        mPinnedHeaderFrameLayout = (ViewGroup) root.findViewById(R.id.pinned_header);
        mFloatingActionButton = (FloatingActionButton) root.findViewById(R.id.fab);
        mButtonBar = (ViewGroup) root.findViewById(R.id.button_bar);
        return root;
!!!136962.java!!!	addPreferencesFromResource(in preferencesResId : int) : void
        super.addPreferencesFromResource(preferencesResId);
        checkAvailablePrefs(getPreferenceScreen());
!!!137090.java!!!	checkAvailablePrefs(inout preferenceGroup : PreferenceGroup) : void
        if (preferenceGroup == null) return;
        for (int i = 0; i < preferenceGroup.getPreferenceCount(); i++) {
            Preference pref = preferenceGroup.getPreference(i);
            if (pref instanceof SelfAvailablePreference
                    && !((SelfAvailablePreference) pref).isAvailable(getContext())) {
                preferenceGroup.removePreference(pref);
            } else if (pref instanceof PreferenceGroup) {
                checkAvailablePrefs((PreferenceGroup) pref);
            }
        }
!!!137218.java!!!	getFloatingActionButton() : FloatingActionButton
        return mFloatingActionButton;
!!!137346.java!!!	getButtonBar() : ViewGroup
        return mButtonBar;
!!!137474.java!!!	setPinnedHeaderView(in layoutResId : int) : View
        final LayoutInflater inflater = getActivity().getLayoutInflater();
        final View pinnedHeader =
                inflater.inflate(layoutResId, mPinnedHeaderFrameLayout, false);
        setPinnedHeaderView(pinnedHeader);
        return pinnedHeader;
!!!137602.java!!!	setPinnedHeaderView(inout pinnedHeader : View) : void
        mPinnedHeaderFrameLayout.addView(pinnedHeader);
        mPinnedHeaderFrameLayout.setVisibility(View.VISIBLE);
!!!137730.java!!!	onSaveInstanceState(inout outState : Bundle) : void
        super.onSaveInstanceState(outState);

        outState.putBoolean(SAVE_HIGHLIGHTED_KEY, mPreferenceHighlighted);
!!!137858.java!!!	onActivityCreated(inout savedInstanceState : Bundle) : void
        super.onActivityCreated(savedInstanceState);
        setHasOptionsMenu(true);
!!!137986.java!!!	onResume() : void
        super.onResume();

        final Bundle args = getArguments();
        if (args != null) {
            mPreferenceKey = args.getString(SettingsActivity.EXTRA_FRAGMENT_ARG_KEY);
            highlightPreferenceIfNeeded();
        }
!!!138114.java!!!	onBindPreferences() : void
        registerObserverIfNeeded();
!!!138242.java!!!	onUnbindPreferences() : void
        unregisterObserverIfNeeded();
!!!138370.java!!!	showLoadingWhenEmpty() : void
        View loading = getView().findViewById(R.id.loading_container);
        setEmptyView(loading);
!!!138498.java!!!	setLoading(inout loading : boolean, inout animate : boolean) : void
        View loading_container = getView().findViewById(R.id.loading_container);
        Utils.handleLoadingContainer(loading_container, getListView(), !loading, animate);
!!!138626.java!!!	registerObserverIfNeeded() : void
        if (!mIsDataSetObserverRegistered) {
            if (mCurrentRootAdapter != null) {
                mCurrentRootAdapter.unregisterAdapterDataObserver(mDataSetObserver);
            }
            mCurrentRootAdapter = getListView().getAdapter();
            mCurrentRootAdapter.registerAdapterDataObserver(mDataSetObserver);
            mIsDataSetObserverRegistered = true;
            onDataSetChanged();
        }
!!!138754.java!!!	unregisterObserverIfNeeded() : void
        if (mIsDataSetObserverRegistered) {
            if (mCurrentRootAdapter != null) {
                mCurrentRootAdapter.unregisterAdapterDataObserver(mDataSetObserver);
                mCurrentRootAdapter = null;
            }
            mIsDataSetObserverRegistered = false;
        }
!!!138882.java!!!	highlightPreferenceIfNeeded() : void
        if (isAdded() && !mPreferenceHighlighted &&!TextUtils.isEmpty(mPreferenceKey)) {
            highlightPreference(mPreferenceKey);
        }
!!!139010.java!!!	onDataSetChanged() : void
        highlightPreferenceIfNeeded();
        updateEmptyView();
!!!139138.java!!!	getHeaderView() : LayoutPreference
        return mHeader;
!!!139266.java!!!	getFooterView() : LayoutPreference
        return mFooter;
!!!139394.java!!!	setHeaderView(in resource : int) : void
        mHeader = new LayoutPreference(getPrefContext(), resource);
        addPreferenceToTop(mHeader);
!!!139522.java!!!	setHeaderView(inout view : View) : void
        mHeader = new LayoutPreference(getPrefContext(), view);
        addPreferenceToTop(mHeader);
!!!139650.java!!!	addPreferenceToTop(inout preference : LayoutPreference) : void
        preference.setOrder(ORDER_FIRST);
        if (getPreferenceScreen() != null) {
            getPreferenceScreen().addPreference(preference);
        }
!!!139778.java!!!	setFooterView(in resource : int) : void
        setFooterView(resource != 0 ? new LayoutPreference(getPrefContext(), resource) : null);
!!!139906.java!!!	setFooterView(inout v : View) : void
        setFooterView(v != null ? new LayoutPreference(getPrefContext(), v) : null);
!!!140034.java!!!	setFooterView(inout footer : LayoutPreference) : void
        if (getPreferenceScreen() != null && mFooter != null) {
            getPreferenceScreen().removePreference(mFooter);
        }
        if (footer != null) {
            mFooter = footer;
            mFooter.setOrder(ORDER_LAST);
            if (getPreferenceScreen() != null) {
                getPreferenceScreen().addPreference(mFooter);
            }
        } else {
            mFooter = null;
        }
!!!140162.java!!!	setPreferenceScreen(inout preferenceScreen : PreferenceScreen) : void
        if (preferenceScreen != null && !preferenceScreen.isAttached()) {
            // Without ids generated, the RecyclerView won't animate changes to the preferences.
            preferenceScreen.setShouldUseGeneratedIds(mAnimationAllowed);
        }
        super.setPreferenceScreen(preferenceScreen);
        if (preferenceScreen != null) {
            if (mHeader != null) {
                preferenceScreen.addPreference(mHeader);
            }
            if (mFooter != null) {
                preferenceScreen.addPreference(mFooter);
            }
        }
!!!140290.java!!!	updateEmptyView() : void
        if (mEmptyView == null) return;
        if (getPreferenceScreen() != null) {
            boolean show = (getPreferenceScreen().getPreferenceCount()
                    - (mHeader != null ? 1 : 0)
                    - (mFooter != null ? 1 : 0)) <= 0;
            mEmptyView.setVisibility(show ? View.VISIBLE : View.GONE);
        } else {
            mEmptyView.setVisibility(View.VISIBLE);
        }
!!!140418.java!!!	setEmptyView(inout v : View) : void
        if (mEmptyView != null) {
            mEmptyView.setVisibility(View.GONE);
        }
        mEmptyView = v;
        updateEmptyView();
!!!140546.java!!!	getEmptyView() : View
        return mEmptyView;
!!!140674.java!!!	canUseListViewForHighLighting(in key : String) : int
        if (getListView() == null) {
            return -1;
        }

        RecyclerView listView = getListView();
        RecyclerView.Adapter adapter = listView.getAdapter();

        if (adapter != null && adapter instanceof PreferenceGroupAdapter) {
            return findListPositionFromKey((PreferenceGroupAdapter) adapter, key);
        }

        return -1;
!!!140802.java!!!	onCreateLayoutManager() : RecyclerView.LayoutManager
        mLayoutManager = new LinearLayoutManager(getContext());
        return mLayoutManager;
!!!140930.java!!!	onCreateAdapter(inout preferenceScreen : PreferenceScreen) : RecyclerView.Adapter
        mAdapter = new HighlightablePreferenceGroupAdapter(preferenceScreen);
        return mAdapter;
!!!141058.java!!!	setAnimationAllowed(inout animationAllowed : boolean) : void
        mAnimationAllowed = animationAllowed;
!!!141186.java!!!	cacheRemoveAllPrefs(inout group : PreferenceGroup) : void
        mPreferenceCache = new ArrayMap<String, Preference>();
        final int N = group.getPreferenceCount();
        for (int i = 0; i < N; i++) {
            Preference p = group.getPreference(i);
            if (TextUtils.isEmpty(p.getKey())) {
                continue;
            }
            mPreferenceCache.put(p.getKey(), p);
        }
!!!141314.java!!!	getCachedPreference(in key : String) : Preference
        return mPreferenceCache != null ? mPreferenceCache.remove(key) : null;
!!!141442.java!!!	removeCachedPrefs(inout group : PreferenceGroup) : void
        for (Preference p : mPreferenceCache.values()) {
            group.removePreference(p);
        }
        mPreferenceCache = null;
!!!141570.java!!!	getCachedCount() : int
        return mPreferenceCache != null ? mPreferenceCache.size() : 0;
!!!141698.java!!!	highlightPreference(in key : String) : void
        final int position = canUseListViewForHighLighting(key);
        if (position >= 0) {
            mPreferenceHighlighted = true;
            mLayoutManager.scrollToPosition(position);

            getView().postDelayed(new Runnable() {
                @Override
                public void run() {
                    mAdapter.highlight(position);
                }
            }, DELAY_HIGHLIGHT_DURATION_MILLIS);
        }
!!!141826.java!!!	findListPositionFromKey(inout adapter : PreferenceGroupAdapter, in key : String) : int
        final int count = adapter.getItemCount();
        for (int n = 0; n < count; n++) {
            final Preference preference = adapter.getItem(n);
            final String preferenceKey = preference.getKey();
            if (preferenceKey != null && preferenceKey.equals(key)) {
                return n;
            }
        }
        return -1;
!!!141954.java!!!	removePreference(in key : String) : void
        Preference pref = findPreference(key);
        if (pref != null) {
            getPreferenceScreen().removePreference(pref);
        }
!!!142082.java!!!	getHelpResource() : int
        return R.string.help_uri_default;
!!!142210.java!!!	onCreateOptionsMenu(inout menu : Menu, inout inflater : MenuInflater) : void
        if (mHelpUri != null && getActivity() != null) {
            HelpUtils.prepareHelpMenuItem(getActivity(), menu, mHelpUri, getClass().getName());
        }
!!!142338.java!!!	finishFragment() : void
        getActivity().onBackPressed();
!!!142466.java!!!	getContentResolver() : ContentResolver
        Context context = getActivity();
        if (context != null) {
            mContentResolver = context.getContentResolver();
        }
        return mContentResolver;
!!!142594.java!!!	getSystemService(in name : String) : Object
        return getActivity().getSystemService(name);
!!!142722.java!!!	getPackageManager() : PackageManager
        return getActivity().getPackageManager();
!!!142850.java!!!	onDetach() : void
        if (isRemoving()) {
            if (mDialogFragment != null) {
                mDialogFragment.dismiss();
                mDialogFragment = null;
            }
        }
        super.onDetach();
!!!142978.java!!!	showDialog(in dialogId : int) : void
        if (mDialogFragment != null) {
            Log.e(TAG, "Old dialog fragment not null!");
        }
        mDialogFragment = new SettingsDialogFragment(this, dialogId);
        mDialogFragment.show(getChildFragmentManager(), Integer.toString(dialogId));
!!!143106.java!!!	onCreateDialog(in dialogId : int) : Dialog
        return null;
!!!143234.java!!!	removeDialog(in dialogId : int) : void
        // mDialogFragment may not be visible yet in parent fragment's onResume().
        // To be able to dismiss dialog at that time, don't check
        // mDialogFragment.isVisible().
        if (mDialogFragment != null && mDialogFragment.getDialogId() == dialogId) {
            mDialogFragment.dismissAllowingStateLoss();
        }
        mDialogFragment = null;
!!!143362.java!!!	setOnCancelListener(inout listener : DialogInterface.OnCancelListener) : void
        if (mDialogFragment != null) {
            mDialogFragment.mOnCancelListener = listener;
        }
!!!143490.java!!!	setOnDismissListener(inout listener : DialogInterface.OnDismissListener) : void
        if (mDialogFragment != null) {
            mDialogFragment.mOnDismissListener = listener;
        }
!!!143618.java!!!	onDialogShowing() : void
        // override in subclass to attach a dismiss listener, for instance
!!!143746.java!!!	onDisplayPreferenceDialog(inout preference : Preference) : void
        if (preference.getKey() == null) {
            // Auto-key preferences that don't have a key, so the dialog can find them.
            preference.setKey(UUID.randomUUID().toString());
        }
        DialogFragment f = null;
        if (preference instanceof RestrictedListPreference) {
            f = RestrictedListPreference.RestrictedListPreferenceDialogFragment
                    .newInstance(preference.getKey());
        } else if (preference instanceof CustomListPreference) {
            f = CustomListPreference.CustomListPreferenceDialogFragment
                    .newInstance(preference.getKey());
        } else if (preference instanceof CustomDialogPreference) {
            f = CustomDialogPreference.CustomPreferenceDialogFragment
                    .newInstance(preference.getKey());
        } else if (preference instanceof CustomEditTextPreference) {
            f = CustomEditTextPreference.CustomPreferenceDialogFragment
                    .newInstance(preference.getKey());
        } else {
            super.onDisplayPreferenceDialog(preference);
            return;
        }
        f.setTargetFragment(this, 0);
        f.show(getFragmentManager(), "dialog_preference");
        onDialogShowing();
!!!145026.java!!!	hasNextButton() : boolean
        return ((ButtonBarHandler)getActivity()).hasNextButton();
!!!145154.java!!!	getNextButton() : Button
        return ((ButtonBarHandler)getActivity()).getNextButton();
!!!145282.java!!!	finish() : void
        Activity activity = getActivity();
        if (activity == null) return;
        if (getFragmentManager().getBackStackEntryCount() > 0) {
            getFragmentManager().popBackStack();
        } else {
            activity.finish();
        }
!!!145410.java!!!	getIntent() : Intent
        if (getActivity() == null) {
            return null;
        }
        return getActivity().getIntent();
!!!145538.java!!!	setResult(in result : int, inout intent : Intent) : void
        if (getActivity() == null) {
            return;
        }
        getActivity().setResult(result, intent);
!!!145666.java!!!	setResult(in result : int) : void
        if (getActivity() == null) {
            return;
        }
        getActivity().setResult(result);
!!!145794.java!!!	getPrefContext() : Context
        return getPreferenceManager().getContext();
!!!145922.java!!!	startFragment(inout caller : Fragment, in fragmentClass : String, in titleRes : int, in requestCode : int, inout extras : Bundle) : boolean
        final Activity activity = getActivity();
        if (activity instanceof SettingsActivity) {
            SettingsActivity sa = (SettingsActivity) activity;
            sa.startPreferencePanel(fragmentClass, extras, titleRes, null, caller, requestCode);
            return true;
        } else {
            Log.w(TAG,
                    "Parent isn't SettingsActivity nor PreferenceActivity, thus there's no way to "
                    + "launch the given Fragment (name: " + fragmentClass
                    + ", requestCode: " + requestCode + ")");
            return false;
        }

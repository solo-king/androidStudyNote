class ImportanceSeekBarPreference
!!!806530.java!!!	ImportanceSeekBarPreference(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int, in defStyleRes : int)
        super(context, attrs, defStyleAttr, defStyleRes);
        setLayoutResource(R.layout.preference_importance_slider);
        mActiveSliderTint = ColorStateList.valueOf(Utils.getColorAccent(context));
        mInactiveSliderTint = ColorStateList.valueOf(
                context.getColor(R.color.importance_disabled_slider_color));
        mHandler = new Handler();
        final TypedArray ta =
                context.obtainStyledAttributes(attrs, com.android.internal.R.styleable.Theme, 0, 0);
        mInactiveSliderAlpha =
                ta.getFloat(com.android.internal.R.styleable.Theme_disabledAlpha, 0.5f);
        ta.recycle();
!!!806658.java!!!	ImportanceSeekBarPreference(inout context : Context, inout attrs : AttributeSet, in defStyleAttr : int)
        this(context, attrs, defStyleAttr, 0);
!!!806786.java!!!	ImportanceSeekBarPreference(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!806914.java!!!	ImportanceSeekBarPreference(inout context : Context)
        this(context, null);
!!!807042.java!!!	setCallback(inout callback : ImportanceSeekBarPreference::Callback) : void
        mCallback = callback;
!!!807170.java!!!	setMinimumProgress(in minProgress : int) : void
        mMinProgress = minProgress;
        notifyChanged();
!!!807298.java!!!	setProgress(in progress : int) : void
        mSummary = getProgressSummary(progress);
        super.setProgress(progress);
!!!807426.java!!!	setAutoOn(inout autoOn : boolean) : void
        mAutoOn = autoOn;
        notifyChanged();
!!!807554.java!!!	onBindViewHolder(inout view : PreferenceViewHolder) : void
        super.onBindViewHolder(view);
        mSummaryTextView = (TextView) view.findViewById(com.android.internal.R.id.summary);
        mSeekBar = (SeekBar) view.findViewById(
                com.android.internal.R.id.seekbar);

        final ImageView autoButton = (ImageView) view.findViewById(R.id.auto_importance);
        applyAutoUi(autoButton);
        autoButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                applyAuto(autoButton);
            }
        });
!!!807682.java!!!	applyAuto(inout autoButton : ImageView) : void
        mAutoOn = !mAutoOn;
        if (!mAutoOn) {
            setProgress(NotificationListenerService.Ranking.IMPORTANCE_DEFAULT);
            mCallback.onImportanceChanged(
                    NotificationListenerService.Ranking.IMPORTANCE_DEFAULT, true);
        } else {
            mCallback.onImportanceChanged(
                    NotificationListenerService.Ranking.IMPORTANCE_UNSPECIFIED, true);
        }
        applyAutoUi(autoButton);
!!!807810.java!!!	applyAutoUi(inout autoButton : ImageView) : void
        mSeekBar.setEnabled(!mAutoOn);

        final float alpha = mAutoOn ? mInactiveSliderAlpha : mActiveSliderAlpha;
        final ColorStateList starTint = mAutoOn ?  mActiveSliderTint : mInactiveSliderTint;
        Drawable icon = autoButton.getDrawable().mutate();
        icon.setTintList(starTint);
        autoButton.setImageDrawable(icon);
        mSeekBar.setAlpha(alpha);

        if (mAutoOn) {
            setProgress(NotificationListenerService.Ranking.IMPORTANCE_DEFAULT);
            mSummary = getProgressSummary(
                    NotificationListenerService.Ranking.IMPORTANCE_UNSPECIFIED);
        }
        mSummaryTextView.setText(mSummary);
!!!807938.java!!!	getSummary() : CharSequence
        return mSummary;
!!!808066.java!!!	onProgressChanged(inout seekBar : SeekBar, in progress : int, inout fromTouch : boolean) : void
        super.onProgressChanged(seekBar, progress, fromTouch);
        if (progress < mMinProgress) {
            seekBar.setProgress(mMinProgress);
            progress = mMinProgress;
        }
        if (mSummaryTextView != null) {
            mSummary = getProgressSummary(progress);
            mSummaryTextView.setText(mSummary);
        }
        mCallback.onImportanceChanged(progress, fromTouch);
!!!808194.java!!!	getProgressSummary(in progress : int) : String
        switch (progress) {
            case NotificationListenerService.Ranking.IMPORTANCE_NONE:
                return getContext().getString(R.string.notification_importance_blocked);
            case NotificationListenerService.Ranking.IMPORTANCE_MIN:
                return getContext().getString(R.string.notification_importance_min);
            case NotificationListenerService.Ranking.IMPORTANCE_LOW:
                return getContext().getString(R.string.notification_importance_low);
            case NotificationListenerService.Ranking.IMPORTANCE_DEFAULT:
                return getContext().getString(R.string.notification_importance_default);
            case NotificationListenerService.Ranking.IMPORTANCE_HIGH:
                return getContext().getString(R.string.notification_importance_high);
            case NotificationListenerService.Ranking.IMPORTANCE_MAX:
                return getContext().getString(R.string.notification_importance_max);
            default:
                return getContext().getString(R.string.notification_importance_unspecified);
        }
!!!808322.java!!!	notifyChanged() : void
        mHandler.post(mNotifyChanged);
!!!808450.java!!!	postNotifyChanged() : void
        super.notifyChanged();

class SupportDisclaimerDialogFragment
!!!887042.java!!!	newInstance(inout account : Account, in type : int) : SupportDisclaimerDialogFragment
        final SupportDisclaimerDialogFragment fragment = new SupportDisclaimerDialogFragment();
        final Bundle bundle = new Bundle(2);
        bundle.putParcelable(SupportDisclaimerDialogFragment.EXTRA_ACCOUNT, account);
        bundle.putInt(SupportDisclaimerDialogFragment.EXTRA_TYPE, type);
        fragment.setArguments(bundle);
        return fragment;
!!!887170.java!!!	onCreateDialog(inout savedInstanceState : Bundle) : Dialog
        final AlertDialog.Builder builder = new AlertDialog.Builder(getActivity())
                .setTitle(R.string.support_disclaimer_title)
                .setPositiveButton(android.R.string.ok, this)
                .setNegativeButton(android.R.string.cancel, this);
        final View content = LayoutInflater.from(builder.getContext())
                .inflate(R.layout.support_disclaimer_content, null);
        final TextView disclaimer = (TextView) content.findViewById(R.id.support_disclaimer_text);
        final Activity activity = getActivity();
        final SupportFeatureProvider supportFeatureProvider =
                FeatureFactory.getFactory(activity).getSupportFeatureProvider(activity);
        disclaimer.setText(supportFeatureProvider.getDisclaimerStringResId());
        stripUnderlines((Spannable) disclaimer.getText());
        return builder
                .setView(content)
                .create();
!!!887298.java!!!	onClick(inout dialog : DialogInterface, in which : int) : void
        if (which == Dialog.BUTTON_NEGATIVE) {
            MetricsLogger.action(getContext(),
                    MetricsProto.MetricsEvent.ACTION_SUPPORT_DISCLAIMER_CANCEL);
            return;
        }
        final Activity activity = getActivity();
        final CheckBox doNotShow =
                (CheckBox) getDialog().findViewById(R.id.support_disclaimer_do_not_show_again);
        final SupportFeatureProvider supportFeatureProvider =
                FeatureFactory.getFactory(activity).getSupportFeatureProvider(activity);
        supportFeatureProvider.setShouldShowDisclaimerDialog(getContext(), !doNotShow.isChecked());
        final Bundle bundle = getArguments();
        MetricsLogger.action(activity, MetricsProto.MetricsEvent.ACTION_SUPPORT_DISCLAIMER_OK);
        supportFeatureProvider.startSupport(getActivity(),
                (Account) bundle.getParcelable(EXTRA_ACCOUNT), bundle.getInt(EXTRA_TYPE));
!!!887426.java!!!	onCancel(inout dialog : DialogInterface) : void
        super.onCancel(dialog);
        MetricsLogger.action(getContext(),
                MetricsProto.MetricsEvent.ACTION_SUPPORT_DISCLAIMER_CANCEL);
!!!887554.java!!!	stripUnderlines(inout input : Spannable) : void
        final URLSpan[] urls = input.getSpans(0, input.length(), URLSpan.class);

        for (URLSpan span : urls) {
            final int start = input.getSpanStart(span);
            final int end = input.getSpanEnd(span);
            input.removeSpan(span);
            input.setSpan(new NoUnderlineUrlSpan(span.getURL()), start, end,
                    Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
        }

class DrawOverlayDetails
!!!483586.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);

        Context context = getActivity();
        mOverlayBridge = new AppStateOverlayBridge(context, mState, null);
        mAppOpsManager = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);

        // find preferences
        addPreferencesFromResource(R.xml.app_ops_permissions_details);
        mSwitchPref = (SwitchPreference) findPreference(KEY_APP_OPS_SETTINGS_SWITCH);
        mOverlayPrefs = findPreference(KEY_APP_OPS_SETTINGS_PREFS);
        mOverlayDesc = findPreference(KEY_APP_OPS_SETTINGS_DESC);

        // set title/summary for all of them
        getPreferenceScreen().setTitle(R.string.draw_overlay);
        mSwitchPref.setTitle(R.string.permit_draw_overlay);
        mOverlayPrefs.setTitle(R.string.app_overlay_permission_preference);
        mOverlayDesc.setSummary(R.string.allow_overlay_description);

        // install event listeners
        mSwitchPref.setOnPreferenceChangeListener(this);
        mOverlayPrefs.setOnPreferenceClickListener(this);

        mSettingsIntent = new Intent(Intent.ACTION_MAIN)
                .setAction(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);
!!!483714.java!!!	onPreferenceClick(inout preference : Preference) : boolean
        if (preference == mOverlayPrefs) {
            if (mSettingsIntent != null) {
                try {
                    getActivity().startActivityAsUser(mSettingsIntent, new UserHandle(mUserId));
                } catch (ActivityNotFoundException e) {
                    Log.w(LOG_TAG, "Unable to launch app draw overlay settings " + mSettingsIntent, e);
                }
            }
            return true;
        }
        return false;
!!!483842.java!!!	onPreferenceChange(inout preference : Preference, inout newValue : Object) : boolean
        if (preference == mSwitchPref) {
            if (mOverlayState != null && (Boolean) newValue != mOverlayState.isPermissible()) {
                setCanDrawOverlay(!mOverlayState.isPermissible());
                refreshUi();
            }
            return true;
        }
        return false;
!!!483970.java!!!	setCanDrawOverlay(inout newState : boolean) : void
        mAppOpsManager.setMode(AppOpsManager.OP_SYSTEM_ALERT_WINDOW,
                mPackageInfo.applicationInfo.uid, mPackageName, newState
                ? AppOpsManager.MODE_ALLOWED : AppOpsManager.MODE_ERRORED);
!!!484098.java!!!	canDrawOverlay(in pkgName : String) : boolean
        int result = mAppOpsManager.noteOpNoThrow(AppOpsManager.OP_SYSTEM_ALERT_WINDOW,
                mPackageInfo.applicationInfo.uid, pkgName);
        if (result == AppOpsManager.MODE_ALLOWED) {
            return true;
        }

        return false;
!!!484226.java!!!	refreshUi() : boolean
        mOverlayState = mOverlayBridge.getOverlayInfo(mPackageName,
                mPackageInfo.applicationInfo.uid);

        boolean isAllowed = mOverlayState.isPermissible();
        mSwitchPref.setChecked(isAllowed);
        // you cannot ask a user to grant you a permission you did not have!
        mSwitchPref.setEnabled(mOverlayState.permissionDeclared);
        mOverlayPrefs.setEnabled(isAllowed);
        getPreferenceScreen().removePreference(mOverlayPrefs);

        return true;
!!!484354.java!!!	createDialog(in id : int, in errorCode : int) : AlertDialog
        return null;
!!!484482.java!!!	getMetricsCategory() : int
        return MetricsEvent.SYSTEM_ALERT_WINDOW_APPS;
!!!484610.java!!!	getSummary(inout context : Context, inout entry : AppEntry) : CharSequence
        OverlayState state;
        if (entry.extraInfo instanceof OverlayState) {
            state = (OverlayState) entry.extraInfo;
        } else if (entry.extraInfo instanceof PermissionState) {
            state = new OverlayState((PermissionState) entry.extraInfo);
        } else {
            state = new AppStateOverlayBridge(context, null, null).getOverlayInfo(
                    entry.info.packageName, entry.info.uid);
        }

        return getSummary(context, state);
!!!484738.java!!!	getSummary(inout context : Context, inout overlayState : AppStateOverlayBridge::OverlayState) : CharSequence
        return context.getString(overlayState.isPermissible() ?
            R.string.system_alert_window_on : R.string.system_alert_window_off);
!!!484866.java!!!	getSummary(inout context : Context, in pkg : String) : CharSequence
        // first check if pkg is a system pkg
        PackageManager packageManager = context.getPackageManager();
        int uid = -1;
        try {
            ApplicationInfo appInfo = packageManager.getApplicationInfo(pkg, 0);
            uid = appInfo.uid;
            if ((appInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
                return context.getString(R.string.system_alert_window_on);
            }
        } catch (PackageManager.NameNotFoundException e) {
            // pkg doesn't even exist?
            Log.w(LOG_TAG, "Package " + pkg + " not found", e);
            return context.getString(R.string.system_alert_window_off);
        }

        AppOpsManager appOpsManager = (AppOpsManager) context.getSystemService(Context
                .APP_OPS_SERVICE);
        if (uid == -1) {
            return context.getString(R.string.system_alert_window_off);
        }

        int mode = appOpsManager.noteOpNoThrow(AppOpsManager.OP_SYSTEM_ALERT_WINDOW, uid, pkg);
        return context.getString((mode == AppOpsManager.MODE_ALLOWED) ?
                R.string.system_alert_window_on : R.string.system_alert_window_off);

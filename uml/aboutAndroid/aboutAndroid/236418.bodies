class PrivateVolumeSettings
!!!649602.java!!!	isVolumeValid() : boolean
        return (mVolume != null) && (mVolume.getType() == VolumeInfo.TYPE_PRIVATE)
                && mVolume.isMountedReadable();
!!!649730.java!!!	PrivateVolumeSettings()
        setRetainInstance(true);
!!!649858.java!!!	getMetricsCategory() : int
        return MetricsEvent.DEVICEINFO_STORAGE;
!!!649986.java!!!	onCreate(inout icicle : Bundle) : void
        super.onCreate(icicle);

        final Context context = getActivity();

        mUserManager = context.getSystemService(UserManager.class);
        mStorageManager = context.getSystemService(StorageManager.class);

        mVolumeId = getArguments().getString(VolumeInfo.EXTRA_VOLUME_ID);
        mVolume = mStorageManager.findVolumeById(mVolumeId);

        final long sharedDataSize = mVolume.getPath().getTotalSpace();
        mTotalSize = getArguments().getLong(EXTRA_VOLUME_SIZE, 0);
        mSystemSize = mTotalSize - sharedDataSize;
        if (LOGV) Log.v(TAG,
                "onCreate() mTotalSize: " + mTotalSize + " sharedDataSize: " + sharedDataSize);

        if (mTotalSize <= 0) {
            mTotalSize = sharedDataSize;
            mSystemSize = 0;
        }

        // Find the emulated shared storage layered above this private volume
        mSharedVolume = mStorageManager.findEmulatedForPrivate(mVolume);

        mMeasure = new StorageMeasurement(context, mVolume, mSharedVolume);
        mMeasure.setReceiver(mReceiver);

        if (!isVolumeValid()) {
            getActivity().finish();
            return;
        }

        addPreferencesFromResource(R.xml.device_info_storage_volume);
        getPreferenceScreen().setOrderingAsAdded(true);

        mSummary = new StorageSummaryPreference(getPrefContext());
        mCurrentUser = mUserManager.getUserInfo(UserHandle.myUserId());

        mExplore = buildAction(R.string.storage_menu_explore);
        mAutomaticStorageManagement = buildAction(R.string.storage_menu_manage);

        mNeedsUpdate = true;

        setHasOptionsMenu(true);
!!!650114.java!!!	setTitle() : void
        getActivity().setTitle(mStorageManager.getBestVolumeDescription(mVolume));
!!!650242.java!!!	update() : void
        if (!isVolumeValid()) {
            getActivity().finish();
            return;
        }

        setTitle();

        // Valid options may have changed
        getFragmentManager().invalidateOptionsMenu();

        final Context context = getActivity();
        final PreferenceScreen screen = getPreferenceScreen();

        screen.removeAll();

        if (getResources().getBoolean(R.bool.config_storage_manager_settings_enabled)) {
            addPreference(screen, mAutomaticStorageManagement);
        }
        addPreference(screen, mSummary);

        List<UserInfo> allUsers = mUserManager.getUsers();
        final int userCount = allUsers.size();
        final boolean showHeaders = userCount > 1;
        final boolean showShared = (mSharedVolume != null) && mSharedVolume.isMountedReadable();

        mItemPoolIndex = 0;
        mHeaderPoolIndex = 0;

        int addedUserCount = 0;
        // Add current user and its profiles first
        for (int userIndex = 0; userIndex < userCount; ++userIndex) {
            final UserInfo userInfo = allUsers.get(userIndex);
            if (isProfileOf(mCurrentUser, userInfo)) {
                final PreferenceGroup details = showHeaders ?
                        addCategory(screen, userInfo.name) : screen;
                addDetailItems(details, showShared, userInfo.id);
                ++addedUserCount;
            }
        }

        // Add rest of users
        if (userCount - addedUserCount > 0) {
            PreferenceGroup otherUsers = addCategory(screen,
                    getText(R.string.storage_other_users));
            for (int userIndex = 0; userIndex < userCount; ++userIndex) {
                final UserInfo userInfo = allUsers.get(userIndex);
                if (!isProfileOf(mCurrentUser, userInfo)) {
                    addItem(otherUsers, /* titleRes */ 0, userInfo.name, userInfo.id);
                }
            }
        }

        addItem(screen, R.string.storage_detail_cached, null, UserHandle.USER_NULL);

        if (showShared) {
            addPreference(screen, mExplore);
        }

        final long freeBytes = mVolume.getPath().getFreeSpace();
        final long usedBytes = mTotalSize - freeBytes;

        if (LOGV) Log.v(TAG, "update() freeBytes: " + freeBytes + " usedBytes: " + usedBytes);

        final BytesResult result = Formatter.formatBytes(getResources(), usedBytes, 0);
        mSummary.setTitle(TextUtils.expandTemplate(getText(R.string.storage_size_large),
                result.value, result.units));
        mSummary.setSummary(getString(R.string.storage_volume_used,
                Formatter.formatFileSize(context, mTotalSize)));
        mSummary.setPercent((int) ((usedBytes * 100) / mTotalSize));

        mMeasure.forceMeasure();
        mNeedsUpdate = false;
!!!650370.java!!!	addPreference(inout group : PreferenceGroup, inout pref : Preference) : void
        pref.setOrder(Preference.DEFAULT_ORDER);
        group.addPreference(pref);
!!!650498.java!!!	addCategory(inout group : PreferenceGroup, inout title : CharSequence) : PreferenceCategory
        PreferenceCategory category;
        if (mHeaderPoolIndex < mHeaderPreferencePool.size()) {
            category = mHeaderPreferencePool.get(mHeaderPoolIndex);
        } else {
            category = new PreferenceCategory(getPrefContext(), null,
                    com.android.internal.R.attr.preferenceCategoryStyle);
            mHeaderPreferencePool.add(category);
        }
        category.setTitle(title);
        category.removeAll();
        addPreference(group, category);
        ++mHeaderPoolIndex;
        return category;
!!!650626.java!!!	addDetailItems(inout category : PreferenceGroup, inout showShared : boolean, in userId : int) : void
        final int[] itemsToAdd = (showShared ? ITEMS_SHOW_SHARED : ITEMS_NO_SHOW_SHARED);
        for (int i = 0; i < itemsToAdd.length; ++i) {
            addItem(category, itemsToAdd[i], null, userId);
        }
!!!650754.java!!!	addItem(inout group : PreferenceGroup, in titleRes : int, inout title : CharSequence, in userId : int) : void
        if (titleRes == R.string.storage_detail_system) {
            if (mSystemSize <= 0) {
                Log.w(TAG, "Skipping System storage because its size is " + mSystemSize);
                return;
            }
            if (userId != UserHandle.myUserId()) {
                // Only display system on current user.
                return;
            }
        }
        StorageItemPreference item;
        if (mItemPoolIndex < mItemPreferencePool.size()) {
            item = mItemPreferencePool.get(mItemPoolIndex);
        } else {
            item = buildItem();
            mItemPreferencePool.add(item);
        }
        if (title != null) {
            item.setTitle(title);
            item.setKey(title.toString());
        } else {
            item.setTitle(titleRes);
            item.setKey(Integer.toString(titleRes));
        }
        item.setSummary(R.string.memory_calculating_size);
        item.userHandle = userId;
        addPreference(group, item);
        ++mItemPoolIndex;
!!!650882.java!!!	buildItem() : StorageItemPreference
        final StorageItemPreference item = new StorageItemPreference(getPrefContext());
        return item;
!!!651010.java!!!	buildAction(in titleRes : int) : Preference
        final Preference pref = new Preference(getPrefContext());
        pref.setTitle(titleRes);
        pref.setKey(Integer.toString(titleRes));
        return pref;
!!!651138.java!!!	setVolumeSize(inout args : Bundle, in size : long) : void
        args.putLong(EXTRA_VOLUME_SIZE, size);
!!!651266.java!!!	onResume() : void
        super.onResume();

        // Refresh to verify that we haven't been formatted away
        mVolume = mStorageManager.findVolumeById(mVolumeId);
        if (!isVolumeValid()) {
            getActivity().finish();
            return;
        }

        mStorageManager.registerListener(mStorageListener);

        if (mNeedsUpdate) {
            update();
        } else {
            setTitle();
        }
!!!651394.java!!!	onPause() : void
        super.onPause();
        mStorageManager.unregisterListener(mStorageListener);
!!!651522.java!!!	onDestroy() : void
        super.onDestroy();
        if (mMeasure != null) {
            mMeasure.onDestroy();
        }
!!!651650.java!!!	onCreateOptionsMenu(inout menu : Menu, inout inflater : MenuInflater) : void
        super.onCreateOptionsMenu(menu, inflater);
        inflater.inflate(R.menu.storage_volume, menu);
!!!651778.java!!!	onPrepareOptionsMenu(inout menu : Menu) : void
        if (!isVolumeValid()) return;

        final MenuItem rename = menu.findItem(R.id.storage_rename);
        final MenuItem mount = menu.findItem(R.id.storage_mount);
        final MenuItem unmount = menu.findItem(R.id.storage_unmount);
        final MenuItem format = menu.findItem(R.id.storage_format);
        final MenuItem migrate = menu.findItem(R.id.storage_migrate);
        final MenuItem manage = menu.findItem(R.id.storage_free);

        // Actions live in menu for non-internal private volumes; they're shown
        // as preference items for public volumes.
        if (VolumeInfo.ID_PRIVATE_INTERNAL.equals(mVolume.getId())) {
            rename.setVisible(false);
            mount.setVisible(false);
            unmount.setVisible(false);
            format.setVisible(false);
            manage.setVisible(getResources().getBoolean(
                    R.bool.config_storage_manager_settings_enabled));
        } else {
            rename.setVisible(mVolume.getType() == VolumeInfo.TYPE_PRIVATE);
            mount.setVisible(mVolume.getState() == VolumeInfo.STATE_UNMOUNTED);
            unmount.setVisible(mVolume.isMountedReadable());
            format.setVisible(true);
            manage.setVisible(false);
        }

        format.setTitle(R.string.storage_menu_format_public);

        // Only offer to migrate when not current storage
        final VolumeInfo privateVol = getActivity().getPackageManager()
                .getPrimaryStorageCurrentVolume();
        migrate.setVisible((privateVol != null)
                && (privateVol.getType() == VolumeInfo.TYPE_PRIVATE)
                && !Objects.equals(mVolume, privateVol));
!!!651906.java!!!	onOptionsItemSelected(inout item : MenuItem) : boolean
        final Context context = getActivity();
        final Bundle args = new Bundle();
        switch (item.getItemId()) {
            case R.id.storage_rename:
                RenameFragment.show(this, mVolume);
                return true;
            case R.id.storage_mount:
                new MountTask(context, mVolume).execute();
                return true;
            case R.id.storage_unmount:
                args.putString(VolumeInfo.EXTRA_VOLUME_ID, mVolume.getId());
                startFragment(this, PrivateVolumeUnmount.class.getCanonicalName(),
                        R.string.storage_menu_unmount, 0, args);
                return true;
            case R.id.storage_format:
                args.putString(VolumeInfo.EXTRA_VOLUME_ID, mVolume.getId());
                startFragment(this, PrivateVolumeFormat.class.getCanonicalName(),
                        R.string.storage_menu_format, 0, args);
                return true;
            case R.id.storage_migrate:
                final Intent intent = new Intent(context, StorageWizardMigrateConfirm.class);
                intent.putExtra(VolumeInfo.EXTRA_VOLUME_ID, mVolume.getId());
                startActivity(intent);
                return true;
            case R.id.storage_free:
                final Intent deletion_helper_intent =
                        new Intent(StorageManager.ACTION_MANAGE_STORAGE);
                startActivity(deletion_helper_intent);
                return true;
        }
        return super.onOptionsItemSelected(item);
!!!652034.java!!!	onPreferenceTreeClick(inout pref : Preference) : boolean
        // TODO: launch better intents for specific volume

        final int userId = (pref instanceof StorageItemPreference ?
                ((StorageItemPreference) pref).userHandle : -1);
        int itemTitleId;
        try {
            itemTitleId = Integer.parseInt(pref.getKey());
        } catch (NumberFormatException e) {
            itemTitleId = 0;
        }
        Intent intent = null;
        switch (itemTitleId) {
            case R.string.storage_detail_apps: {
                Bundle args = new Bundle();
                args.putString(ManageApplications.EXTRA_CLASSNAME,
                        StorageUseActivity.class.getName());
                args.putString(ManageApplications.EXTRA_VOLUME_UUID, mVolume.getFsUuid());
                args.putString(ManageApplications.EXTRA_VOLUME_NAME, mVolume.getDescription());
                intent = Utils.onBuildStartFragmentIntent(getActivity(),
                        ManageApplications.class.getName(), args, null, R.string.apps_storage, null,
                        false);

            } break;
            case R.string.storage_detail_images: {
                intent = new Intent(DocumentsContract.ACTION_BROWSE);
                intent.setData(DocumentsContract.buildRootUri(AUTHORITY_MEDIA, "images_root"));
                intent.addCategory(Intent.CATEGORY_DEFAULT);

            } break;
            case R.string.storage_detail_videos: {
                intent = new Intent(DocumentsContract.ACTION_BROWSE);
                intent.setData(DocumentsContract.buildRootUri(AUTHORITY_MEDIA, "videos_root"));
                intent.addCategory(Intent.CATEGORY_DEFAULT);

            } break;
            case R.string.storage_detail_audio: {
                intent = new Intent(DocumentsContract.ACTION_BROWSE);
                intent.setData(DocumentsContract.buildRootUri(AUTHORITY_MEDIA, "audio_root"));
                intent.addCategory(Intent.CATEGORY_DEFAULT);

            } break;
            case R.string.storage_detail_system: {
                SystemInfoFragment.show(this);
                return true;

            }
            case R.string.storage_detail_other: {
                OtherInfoFragment.show(this, mStorageManager.getBestVolumeDescription(mVolume),
                        mSharedVolume, userId);
                return true;

            }
            case R.string.storage_detail_cached: {
                ConfirmClearCacheFragment.show(this);
                return true;

            }
            case R.string.storage_menu_explore: {
                intent = mSharedVolume.buildBrowseIntent();
            } break;
            case R.string.storage_menu_manage: {
                startFragment(this, AutomaticStorageManagerSettings.class.getCanonicalName(),
                        R.string.automatic_storage_manager_settings, 0, null);
                return true;
            }
            case 0: {
                UserInfoFragment.show(this, pref.getTitle(), pref.getSummary());
                return true;
            }
        }

        if (intent != null) {
            intent.putExtra(Intent.EXTRA_USER_ID, userId);

            launchIntent(this, intent);
            return true;
        }
        return super.onPreferenceTreeClick(pref);
!!!652162.java!!!	updateDetails(inout details : MeasurementDetails) : void
        StorageItemPreference otherItem = null;
        long accountedSize = 0;
        long totalMiscSize = 0;
        long totalDownloadsSize = 0;

        for (int i = 0; i < mItemPoolIndex; ++i) {
            StorageItemPreference item = mItemPreferencePool.get(i);
            final int userId = item.userHandle;
            int itemTitleId;
            try {
                itemTitleId = Integer.parseInt(item.getKey());
            } catch (NumberFormatException e) {
                itemTitleId = 0;
            }
            switch (itemTitleId) {
                case R.string.storage_detail_system: {
                    updatePreference(item, mSystemSize);
                    accountedSize += mSystemSize;
                    if (LOGV) Log.v(TAG, "mSystemSize: " + mSystemSize
                            + " accountedSize: " + accountedSize);
                } break;
                case R.string.storage_detail_apps: {
                    updatePreference(item, details.appsSize.get(userId));
                    accountedSize += details.appsSize.get(userId);
                    if (LOGV) Log.v(TAG, "appsSize: " + details.appsSize.get(userId)
                            + " accountedSize: " + accountedSize);
                } break;
                case R.string.storage_detail_images: {
                    final long imagesSize = totalValues(details, userId,
                            Environment.DIRECTORY_DCIM, Environment.DIRECTORY_PICTURES);
                    updatePreference(item, imagesSize);
                    accountedSize += imagesSize;
                    if (LOGV) Log.v(TAG, "imagesSize: " + imagesSize
                            + " accountedSize: " + accountedSize);
                } break;
                case R.string.storage_detail_videos: {
                    final long videosSize = totalValues(details, userId,
                            Environment.DIRECTORY_MOVIES);
                    updatePreference(item, videosSize);
                    accountedSize += videosSize;
                    if (LOGV) Log.v(TAG, "videosSize: " + videosSize
                            + " accountedSize: " + accountedSize);
                } break;
                case R.string.storage_detail_audio: {
                    final long audioSize = totalValues(details, userId,
                            Environment.DIRECTORY_MUSIC,
                            Environment.DIRECTORY_ALARMS, Environment.DIRECTORY_NOTIFICATIONS,
                            Environment.DIRECTORY_RINGTONES, Environment.DIRECTORY_PODCASTS);
                    updatePreference(item, audioSize);
                    accountedSize += audioSize;
                    if (LOGV) Log.v(TAG, "audioSize: " + audioSize
                            + " accountedSize: " + accountedSize);
                } break;
                case R.string.storage_detail_other: {
                    final long downloadsSize = totalValues(details, userId,
                            Environment.DIRECTORY_DOWNLOADS);
                    final long miscSize = details.miscSize.get(userId);
                    totalDownloadsSize += downloadsSize;
                    totalMiscSize += miscSize;
                    accountedSize += miscSize + downloadsSize;

                    if (LOGV)
                        Log.v(TAG, "miscSize for " + userId + ": " + miscSize + "(total: "
                                + totalMiscSize + ") \ndownloadsSize: " + downloadsSize + "(total: "
                                + totalDownloadsSize + ") accountedSize: " + accountedSize);

                    // Cannot display 'Other' until all known items are accounted for.
                    otherItem = item;
                } break;
                case R.string.storage_detail_cached: {
                    updatePreference(item, details.cacheSize);
                    accountedSize += details.cacheSize;
                    if (LOGV)
                        Log.v(TAG, "cacheSize: " + details.cacheSize + " accountedSize: "
                                + accountedSize);
                } break;
                case 0: {
                    final long userSize = details.usersSize.get(userId);
                    updatePreference(item, userSize);
                    accountedSize += userSize;
                    if (LOGV) Log.v(TAG, "userSize: " + userSize
                            + " accountedSize: " + accountedSize);
                } break;
            }
        }
        if (otherItem != null) {
            final long usedSize = mTotalSize - details.availSize;
            final long unaccountedSize = usedSize - accountedSize;
            final long otherSize = totalMiscSize + totalDownloadsSize + unaccountedSize;
            if (LOGV)
                Log.v(TAG, "Other items: \n\tmTotalSize: " + mTotalSize + " availSize: "
                        + details.availSize + " usedSize: " + usedSize + "\n\taccountedSize: "
                        + accountedSize + " unaccountedSize size: " + unaccountedSize
                        + "\n\ttotalMiscSize: " + totalMiscSize + " totalDownloadsSize: "
                        + totalDownloadsSize + "\n\tdetails: " + details);
            updatePreference(otherItem, otherSize);
        }
!!!652290.java!!!	updatePreference(inout pref : StorageItemPreference, in size : long) : void
        pref.setStorageSize(size, mTotalSize);
!!!652418.java!!!	isProfileOf(inout user : UserInfo, inout profile : UserInfo) : boolean
        return user.id == profile.id ||
                (user.profileGroupId != UserInfo.NO_PROFILE_GROUP_ID
                && user.profileGroupId == profile.profileGroupId);
!!!652546.java!!!	totalValues(inout details : MeasurementDetails, in userId : int, inout  : String...keys) : long
        long total = 0;
        HashMap<String, Long> map = details.mediaSize.get(userId);
        if (map != null) {
            for (String key : keys) {
                if (map.containsKey(key)) {
                    total += map.get(key);
                }
            }
        } else {
            Log.w(TAG, "MeasurementDetails mediaSize array does not have key for user " + userId);
        }
        return total;
!!!652674.java!!!	launchIntent(inout fragment : Fragment, inout intent : Intent) : void
        try {
            final int userId = intent.getIntExtra(Intent.EXTRA_USER_ID, -1);

            if (userId == -1) {
                fragment.startActivity(intent);
            } else {
                fragment.getActivity().startActivityAsUser(intent, new UserHandle(userId));
            }
        } catch (ActivityNotFoundException e) {
            Log.w(TAG, "No activity found for " + intent);
        }

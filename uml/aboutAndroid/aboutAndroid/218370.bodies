class WriteSettingsDetails
!!!540802.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);

        Context context = getActivity();
        mAppBridge = new AppStateWriteSettingsBridge(context, mState, null);
        mAppOpsManager = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);

        addPreferencesFromResource(R.xml.app_ops_permissions_details);
        mSwitchPref = (SwitchPreference) findPreference(KEY_APP_OPS_SETTINGS_SWITCH);
        mWriteSettingsPrefs = findPreference(KEY_APP_OPS_SETTINGS_PREFS);
        mWriteSettingsDesc = findPreference(KEY_APP_OPS_SETTINGS_DESC);

        getPreferenceScreen().setTitle(R.string.write_settings);
        mSwitchPref.setTitle(R.string.permit_write_settings);
        mWriteSettingsPrefs.setTitle(R.string.write_settings_preference);
        mWriteSettingsDesc.setSummary(R.string.write_settings_description);

        mSwitchPref.setOnPreferenceChangeListener(this);
        mWriteSettingsPrefs.setOnPreferenceClickListener(this);

        mSettingsIntent = new Intent(Intent.ACTION_MAIN)
                .addCategory(Settings.INTENT_CATEGORY_USAGE_ACCESS_CONFIG)
                .setPackage(mPackageName);
!!!540930.java!!!	onPreferenceClick(inout preference : Preference) : boolean
        if (preference == mWriteSettingsPrefs) {
            if (mSettingsIntent != null) {
                try {
                    getActivity().startActivityAsUser(mSettingsIntent, new UserHandle(mUserId));
                } catch (ActivityNotFoundException e) {
                    Log.w(LOG_TAG, "Unable to launch write system settings " + mSettingsIntent, e);
                }
            }
            return true;
        }
        return false;
!!!541058.java!!!	onPreferenceChange(inout preference : Preference, inout newValue : Object) : boolean
        if (preference == mSwitchPref) {
            if (mWriteSettingsState != null && (Boolean) newValue != mWriteSettingsState
                    .isPermissible()) {
                setCanWriteSettings(!mWriteSettingsState.isPermissible());
                refreshUi();
            }
            return true;
        }
        return false;
!!!541186.java!!!	setCanWriteSettings(inout newState : boolean) : void
        mAppOpsManager.setMode(AppOpsManager.OP_WRITE_SETTINGS,
                mPackageInfo.applicationInfo.uid, mPackageName, newState
                ? AppOpsManager.MODE_ALLOWED : AppOpsManager.MODE_ERRORED);
!!!541314.java!!!	canWriteSettings(in pkgName : String) : boolean
        int result = mAppOpsManager.noteOpNoThrow(AppOpsManager.OP_WRITE_SETTINGS,
                mPackageInfo.applicationInfo.uid, pkgName);
        if (result == AppOpsManager.MODE_ALLOWED) {
            return true;
        }

        return false;
!!!541442.java!!!	refreshUi() : boolean
        mWriteSettingsState = mAppBridge.getWriteSettingsInfo(mPackageName,
                mPackageInfo.applicationInfo.uid);

        boolean canWrite = mWriteSettingsState.isPermissible();
        mSwitchPref.setChecked(canWrite);
        // you can't ask a user for a permission you didn't even declare!
        mSwitchPref.setEnabled(mWriteSettingsState.permissionDeclared);
        mWriteSettingsPrefs.setEnabled(canWrite);
        getPreferenceScreen().removePreference(mWriteSettingsPrefs);

        return true;
!!!541570.java!!!	createDialog(in id : int, in errorCode : int) : AlertDialog
        return null;
!!!541698.java!!!	getMetricsCategory() : int
        return MetricsEvent.SYSTEM_ALERT_WINDOW_APPS;
!!!541826.java!!!	getSummary(inout context : Context, inout entry : AppEntry) : CharSequence
        WriteSettingsState state;
        if (entry.extraInfo instanceof WriteSettingsState) {
            state = (WriteSettingsState) entry.extraInfo;
        } else if (entry.extraInfo instanceof PermissionState) {
            state = new WriteSettingsState((PermissionState) entry.extraInfo);
        } else {
            state = new AppStateWriteSettingsBridge(context, null, null).getWriteSettingsInfo(
                    entry.info.packageName, entry.info.uid);
        }

        return getSummary(context, state);
!!!541954.java!!!	getSummary(inout context : Context, inout writeSettingsState : AppStateWriteSettingsBridge::WriteSettingsState) : CharSequence
        return context.getString(writeSettingsState.isPermissible() ? R.string.write_settings_on :
                R.string.write_settings_off);
!!!542082.java!!!	getSummary(inout context : Context, in pkg : String) : CharSequence
        // first check if pkg is a system pkg
        boolean isSystem = false;
        PackageManager packageManager = context.getPackageManager();
        try {
            ApplicationInfo appInfo = packageManager.getApplicationInfo(pkg, 0);
            if ((appInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
                isSystem = true;
            }
        } catch (PackageManager.NameNotFoundException e) {
            // pkg doesn't even exist?
            Log.w(LOG_TAG, "Package " + pkg + " not found", e);
            return context.getString(R.string.write_settings_off);
        }

        AppOpsManager appOpsManager = (AppOpsManager) context.getSystemService(Context
                .APP_OPS_SERVICE);
        List<AppOpsManager.PackageOps> packageOps = appOpsManager.getPackagesForOps(
                APP_OPS_OP_CODE);
        if (packageOps == null) {
            return context.getString(R.string.write_settings_off);
        }

        int uid = isSystem ? 0 : -1;
        for (AppOpsManager.PackageOps packageOp : packageOps) {
            if (pkg.equals(packageOp.getPackageName())) {
                uid = packageOp.getUid();
                break;
            }
        }

        if (uid == -1) {
            return context.getString(R.string.write_settings_off);
        }

        int mode = appOpsManager.noteOpNoThrow(AppOpsManager.OP_WRITE_SETTINGS, uid, pkg);
        return context.getString((mode == AppOpsManager.MODE_ALLOWED) ?
                R.string.write_settings_on : R.string.write_settings_off);

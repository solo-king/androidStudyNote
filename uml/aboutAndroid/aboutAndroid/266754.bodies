class ZenModeSettingsBase
!!!830594.java!!!	ZenModeSettingsBase()
        super(UserManager.DISALLOW_ADJUST_VOLUME);
!!!830722.java!!!	onCreate(inout icicle : Bundle) : void
        super.onCreate(icicle);
        mContext = getActivity();
        updateZenMode(false /*fireChanged*/);
        maybeRefreshRules(true, false /*fireChanged*/);
        if (DEBUG) Log.d(TAG, "Loaded mRules=" + mRules);
!!!830850.java!!!	onResume() : void
        super.onResume();
        updateZenMode(true /*fireChanged*/);
        maybeRefreshRules(true, true /*fireChanged*/);
        mSettingsObserver.register();
        if (isUiRestricted()) {
            if (isUiRestrictedByOnlyAdmin()) {
                getPreferenceScreen().removeAll();
                return;
            } else {
                finish();
            }
        }
!!!830978.java!!!	onPause() : void
        super.onPause();
        mSettingsObserver.unregister();
!!!831106.java!!!	updateZenMode(inout fireChanged : boolean) : void
        final int zenMode = Settings.Global.getInt(getContentResolver(), Global.ZEN_MODE, mZenMode);
        if (zenMode == mZenMode) return;
        mZenMode = zenMode;
        if (DEBUG) Log.d(TAG, "updateZenMode mZenMode=" + mZenMode);
        if (fireChanged) {
            onZenModeChanged();
        }
!!!831234.java!!!	addZenRule(inout rule : AutomaticZenRule) : String
        try {
            String id = NotificationManager.from(mContext).addAutomaticZenRule(rule);
            final AutomaticZenRule savedRule =
                    NotificationManager.from(mContext).getAutomaticZenRule(id);
            maybeRefreshRules(savedRule != null, true);
            return id;
        } catch (Exception e) {
            return null;
        }
!!!831362.java!!!	setZenRule(in id : String, inout rule : AutomaticZenRule) : boolean
        final boolean success =
                NotificationManager.from(mContext).updateAutomaticZenRule(id, rule);
        maybeRefreshRules(success, true);
        return success;
!!!831490.java!!!	removeZenRule(in id : String) : boolean
        final boolean success =
                NotificationManager.from(mContext).removeAutomaticZenRule(id);
        maybeRefreshRules(success, true);
        return success;
!!!831618.java!!!	maybeRefreshRules(inout success : boolean, inout fireChanged : boolean) : void
        if (success) {
            mRules = getZenModeRules();
            if (DEBUG) Log.d(TAG, "Refreshed mRules=" + mRules);
            if (fireChanged) {
                onZenModeConfigChanged();
            }
        }
!!!831746.java!!!	setZenMode(in zenMode : int, inout conditionId : Uri) : void
        NotificationManager.from(mContext).setZenMode(zenMode, conditionId, TAG);
!!!831874.java!!!	getZenModeRules() : Set<Map.Entry<String, AutomaticZenRule>>
        Map<String, AutomaticZenRule> ruleMap
                = NotificationManager.from(mContext).getAutomaticZenRules();
        return ruleMap.entrySet();

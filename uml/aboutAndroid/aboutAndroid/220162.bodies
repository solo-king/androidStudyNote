class DeviceListPreferenceFragment
!!!555266.java!!!	DeviceListPreferenceFragment(in restrictedKey : String)
        super(restrictedKey);
        mFilter = BluetoothDeviceFilter.ALL_FILTER;
!!!555394.java!!!	setFilter(inout filter : BluetoothDeviceFilter.Filter) : void
        mFilter = filter;
!!!555522.java!!!	setFilter(in filterType : int) : void
        mFilter = BluetoothDeviceFilter.getFilter(filterType);
!!!555650.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);

        mLocalManager = Utils.getLocalBtManager(getActivity());
        if (mLocalManager == null) {
            Log.e(TAG, "Bluetooth is not supported on this device");
            return;
        }
        mLocalAdapter = mLocalManager.getBluetoothAdapter();

        addPreferencesForActivity();

        mDeviceListGroup = (PreferenceCategory) findPreference(KEY_BT_DEVICE_LIST);
!!!555778.java!!!	setDeviceListGroup(inout preferenceGroup : PreferenceGroup) : void
        mDeviceListGroup = preferenceGroup;
!!!556034.java!!!	onResume() : void
        super.onResume();
        if (mLocalManager == null || isUiRestricted()) return;

        mLocalManager.setForegroundActivity(getActivity());
        mLocalManager.getEventManager().registerCallback(this);

        updateProgressUi(mLocalAdapter.isDiscovering());
!!!556162.java!!!	onPause() : void
        super.onPause();
        if (mLocalManager == null || isUiRestricted()) {
            return;
        }

        removeAllDevices();
        mLocalManager.setForegroundActivity(null);
        mLocalManager.getEventManager().unregisterCallback(this);
!!!556290.java!!!	removeAllDevices() : void
        mLocalAdapter.stopScanning();
        mDevicePreferenceMap.clear();
        mDeviceListGroup.removeAll();
!!!556418.java!!!	addCachedDevices() : void
        Collection<CachedBluetoothDevice> cachedDevices =
                mLocalManager.getCachedDeviceManager().getCachedDevicesCopy();
        for (CachedBluetoothDevice cachedDevice : cachedDevices) {
            onDeviceAdded(cachedDevice);
        }
!!!556546.java!!!	onPreferenceTreeClick(inout preference : Preference) : boolean
        if (KEY_BT_SCAN.equals(preference.getKey())) {
            mLocalAdapter.startScanning(true);
            return true;
        }

        if (preference instanceof BluetoothDevicePreference) {
            BluetoothDevicePreference btPreference = (BluetoothDevicePreference) preference;
            CachedBluetoothDevice device = btPreference.getCachedDevice();
            mSelectedDevice = device.getDevice();
            onDevicePreferenceClick(btPreference);
            return true;
        }

        return super.onPreferenceTreeClick(preference);
!!!556674.java!!!	onDevicePreferenceClick(inout btPreference : BluetoothDevicePreference) : void
        btPreference.onClicked();
!!!556802.java!!!	onDeviceAdded(inout cachedDevice : CachedBluetoothDevice) : void
        if (mDevicePreferenceMap.get(cachedDevice) != null) {
            return;
        }

        // Prevent updates while the list shows one of the state messages
        if (mLocalAdapter.getBluetoothState() != BluetoothAdapter.STATE_ON) return;

        if (mFilter.matches(cachedDevice.getDevice())) {
            createDevicePreference(cachedDevice);
        }
!!!556930.java!!!	createDevicePreference(inout cachedDevice : CachedBluetoothDevice) : void
        if (mDeviceListGroup == null) {
            Log.w(TAG, "Trying to create a device preference before the list group/category "
                    + "exists!");
            return;
        }

        String key = cachedDevice.getDevice().getAddress();
        BluetoothDevicePreference preference = (BluetoothDevicePreference) getCachedPreference(key);

        if (preference == null) {
            preference = new BluetoothDevicePreference(getPrefContext(), cachedDevice);
            preference.setKey(key);
            mDeviceListGroup.addPreference(preference);
        } else {
            // Tell the preference it is being re-used in case there is new info in the
            // cached device.
            preference.rebind();
        }

        initDevicePreference(preference);
        mDevicePreferenceMap.put(cachedDevice, preference);
!!!557058.java!!!	initDevicePreference(inout preference : BluetoothDevicePreference) : void
        // Does nothing by default
!!!557186.java!!!	onDeviceDeleted(inout cachedDevice : CachedBluetoothDevice) : void
        BluetoothDevicePreference preference = mDevicePreferenceMap.remove(cachedDevice);
        if (preference != null) {
            mDeviceListGroup.removePreference(preference);
        }
!!!557314.java!!!	onScanningStateChanged(inout started : boolean) : void
        updateProgressUi(started);
!!!557442.java!!!	updateProgressUi(inout start : boolean) : void
        if (mDeviceListGroup instanceof BluetoothProgressCategory) {
            ((BluetoothProgressCategory) mDeviceListGroup).setProgress(start);
        }
!!!557570.java!!!	onBluetoothStateChanged(in bluetoothState : int) : void
        if (bluetoothState == BluetoothAdapter.STATE_OFF) {
            updateProgressUi(false);
        }

class HdmiScreenZoomPreference
!!!277634.java!!!	HdmiScreenZoomPreference(inout context : Context, inout attrs : AttributeSet)
       super(context, attrs);
       this.context = context;
       setDialogLayoutResource(R.layout.preference_dialog_screen_scale);
       setDialogIcon(R.drawable.ic_settings_screen_scale);
       preferences = context.getSharedPreferences(
               "HdmiSettings", context.MODE_PRIVATE);
       dualMode=preferences.getInt("dual_mode", 0);
       try {
           mDisplayManagement = new DisplayOutputManager();
       }catch (RemoteException doe) {
           mDisplayManagement = null;
       }
       
       if (mDisplayManagement != null &&
           mDisplayManagement.getDisplayNumber() == 0)
           mDisplayManagement = null;      
!!!277762.java!!!	setHdmiScreenScale(inout file : File, in value : int) : void
       //if (mDisplayManagement == null || value < 0){
           //if (!isHdmiConnected(HdmiState)) {
           //  return;
           //}
           // if (dualMode == 1) {
               // SystemProperties.set("sys.hdmi_screen.scale",
                       // String.valueOf((char) value));
           // } else {
               //SystemProperties.set("sys.hdmi_screen.scale",
               //      String.valueOf((char) 100));
           //}
       //}else {
           HdmiScaleTask hdmiScaleTask=new HdmiScaleTask();
           hdmiScaleTask.execute(value);
       //}

!!!277890.java!!!	isHdmiConnected(inout file : File) : boolean
       boolean isConnected = false;
       if (file.exists()) {
           try {
               FileReader fread = new FileReader(file);
               BufferedReader buffer = new BufferedReader(fread);
               String strPlug = "plug=1";
               String str = null;
               while ((str = buffer.readLine()) != null) {
                   int length = str.length();
                   // if((length == 6) && (str.equals(strPlug))){
                   if (str.equals("1")) {
                       isConnected = true;
                       break;
                   } else {
                       isConnected = false;
                   }
               }
           } catch (IOException e) {
               Log.e(TAG, "IO Exception");
           }
       }
       return isConnected;
!!!278018.java!!!	onBindDialogView(inout view : View) : void
       super.onBindDialogView(view);
       
       if(isRK3128()){
          HdmiScale = new File("/sys/class/display/HDMI/scale");//3128使用 
       }else{
          HdmiScale = new File("/sys/class/graphics/fb0/scale");
       }

       mFlag = false;
       mSeekBar = getSeekBar(view);
       // resotre value
       SharedPreferences preferences = context.getSharedPreferences(
               "HdmiSettings", context.MODE_PRIVATE);

       Rect overscan;
       if(mDisplayManagement != null){
           if (mDisplayManagement.getDisplayNumber() == 2)
               overscan = mDisplayManagement.getOverScan(mDisplayManagement.AUX_DISPLAY);
           else
               overscan = mDisplayManagement.getOverScan(mDisplayManagement.MAIN_DISPLAY);
           mOldScale = overscan.left - 80;
       }else{
           mOldScale = Integer.valueOf(preferences.getString("scale_set", "100"));
           mOldScale = mOldScale - 80;
       }
       

       mSeekBar.setProgress(mOldScale);
       mSeekBar.setOnSeekBarChangeListener(this);
!!!278146.java!!!	onProgressChanged(inout seekBar : SeekBar, in progress : int, inout fromTouch : boolean) : void
       mValue = progress + 80;
       if (mValue > 100) {
           mValue = 100;
       }
       setHdmiScreenScale(HdmiScale, mValue);
!!!278274.java!!!	onStartTrackingTouch(inout seekBar : SeekBar) : void
       // If start tracking, record the initial position
       mFlag = true;
       mRestoreValue = seekBar.getProgress();
!!!278402.java!!!	onStopTrackingTouch(inout seekBar : SeekBar) : void
       setHdmiScreenScale(HdmiScale, mValue);
!!!278530.java!!!	onCheckedChanged(inout buttonView : CompoundButton, inout isChecked : boolean) : void

!!!278658.java!!!	onDialogClosed(inout positiveResult : boolean) : void
       super.onDialogClosed(positiveResult);
       // for save config

       if (positiveResult) {
           int value = mSeekBar.getProgress() + 80;
           setHdmiScreenScale(HdmiScale, value);
           //editor.putString("scale_set", String.valueOf(value));
       } else {
           if (mFlag) {
               mRestoreValue = mRestoreValue + 80;
               if (mRestoreValue > 100) {
                   mRestoreValue = 100;
               }
               setHdmiScreenScale(HdmiScale, mRestoreValue);
               //editor.putString("scale_set", String.valueOf(mRestoreValue));
           } else {
               // click cancel without any other operations
               int value = mSeekBar.getProgress() + 80;
               setHdmiScreenScale(HdmiScale, value);
               //editor.putString("scale_set", String.valueOf(value));
           }
       }
       //editor.commit();
!!!278914.java!!!	isRK3128() : boolean
       final String RK3128 = "RK3128";
   try{
      FileReader fr = new FileReader("/proc/cpuinfo");
           BufferedReader br = new BufferedReader(fr);
           String str;
           while((str = br.readLine()) != null) {
           if (str.contains(RK3128)) {
           return true;
       }
           }   
   }catch(Exception e){
       return false;
   }
        return false;

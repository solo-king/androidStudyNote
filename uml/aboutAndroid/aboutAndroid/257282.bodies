class VirtualKeyboardFragment
!!!776962.java!!!	onCreatePreferences(inout bundle : Bundle, in s : String) : void
        Activity activity = Preconditions.checkNotNull(getActivity());
        addPreferencesFromResource(R.xml.virtual_keyboard_settings);
        mImm = Preconditions.checkNotNull(activity.getSystemService(InputMethodManager.class));
        mDpm = Preconditions.checkNotNull(activity.getSystemService(DevicePolicyManager.class));
        mAddVirtualKeyboardScreen = Preconditions.checkNotNull(
                findPreference(ADD_VIRTUAL_KEYBOARD_SCREEN));
!!!777090.java!!!	onResume() : void
        super.onResume();
        // Refresh internal states in mInputMethodSettingValues to keep the latest
        // "InputMethodInfo"s and "InputMethodSubtype"s
        updateInputMethodPreferenceViews();
!!!777218.java!!!	getMetricsCategory() : int
        return MetricsEvent.VIRTUAL_KEYBOARDS;
!!!777346.java!!!	updateInputMethodPreferenceViews() : void
        // Clear existing "InputMethodPreference"s
        mInputMethodPreferenceList.clear();
        List<String> permittedList = mDpm.getPermittedInputMethodsForCurrentUser();
        final Context context = getPrefContext();
        final List<InputMethodInfo> imis = mImm.getEnabledInputMethodList();
        final int N = (imis == null ? 0 : imis.size());
        for (int i = 0; i < N; ++i) {
            final InputMethodInfo imi = imis.get(i);
            final boolean isAllowedByOrganization = permittedList == null
                    || permittedList.contains(imi.getPackageName());
            Drawable icon;
            try {
                // TODO: Consider other ways to retrieve an icon to show here.
                icon = getActivity().getPackageManager().getApplicationIcon(imi.getPackageName());
            } catch (Exception e) {
                // TODO: Consider handling the error differently perhaps by showing default icons.
                icon = NO_ICON;
            }
            final InputMethodPreference pref = new InputMethodPreference(
                    context,
                    imi,
                    false,  /* isImeEnabler */
                    isAllowedByOrganization,
                    null  /* this can be null since isImeEnabler is false */);
            pref.setIcon(icon);
            mInputMethodPreferenceList.add(pref);
        }
        final Collator collator = Collator.getInstance();
        Collections.sort(mInputMethodPreferenceList, new Comparator<InputMethodPreference>() {
            @Override
            public int compare(InputMethodPreference lhs, InputMethodPreference rhs) {
                return lhs.compareTo(rhs, collator);
            }
        });
        getPreferenceScreen().removeAll();
        for (int i = 0; i < N; ++i) {
            final InputMethodPreference pref = mInputMethodPreferenceList.get(i);
            pref.setOrder(i);
            getPreferenceScreen().addPreference(pref);
            InputMethodAndSubtypeUtil.removeUnnecessaryNonPersistentPreference(pref);
            pref.updatePreferenceViews();
        }
        mAddVirtualKeyboardScreen.setIcon(R.drawable.ic_add_24dp);
        mAddVirtualKeyboardScreen.setOrder(N);
        getPreferenceScreen().addPreference(mAddVirtualKeyboardScreen);

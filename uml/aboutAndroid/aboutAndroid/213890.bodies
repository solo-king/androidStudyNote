class ProcessStatsMemDetail
!!!514818.java!!!	onCreate(inout icicle : Bundle) : void
        super.onCreate(icicle);
        final Bundle args = getArguments();
        mMemTimes = args.getLongArray(EXTRA_MEM_TIMES);
        mMemStateWeights = args.getDoubleArray(EXTRA_MEM_STATE_WEIGHTS);
        mMemCachedWeight = args.getDouble(EXTRA_MEM_CACHED_WEIGHT);
        mMemFreeWeight = args.getDouble(EXTRA_MEM_FREE_WEIGHT);
        mMemZRamWeight = args.getDouble(EXTRA_MEM_ZRAM_WEIGHT);
        mMemKernelWeight = args.getDouble(EXTRA_MEM_KERNEL_WEIGHT);
        mMemNativeWeight = args.getDouble(EXTRA_MEM_NATIVE_WEIGHT);
        mMemTotalWeight = args.getDouble(EXTRA_MEM_TOTAL_WEIGHT);
        mUseUss = args.getBoolean(EXTRA_USE_USS);
        mTotalTime = args.getLong(EXTRA_TOTAL_TIME);
!!!514946.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        final View view = inflater.inflate(R.layout.process_stats_mem_details, container, false);
        prepareCustomPreferencesList(container, view, view, false);

        mRootView = view;
        createDetails();
        return view;
!!!515074.java!!!	getMetricsCategory() : int
        return MetricsEvent.APPLICATIONS_PROCESS_STATS_MEM_DETAIL;
!!!515202.java!!!	onPause() : void
        super.onPause();
!!!515330.java!!!	createDetails() : void
        mMemStateParent = (ViewGroup)mRootView.findViewById(R.id.mem_state);
        mMemUseParent = (ViewGroup)mRootView.findViewById(R.id.mem_use);

        fillMemStateSection();
        fillMemUseSection();
!!!515458.java!!!	addDetailsItem(inout parent : ViewGroup, inout title : CharSequence, in level : float, inout value : CharSequence) : void
        LayoutInflater inflater = getActivity().getLayoutInflater();
        ViewGroup item = (ViewGroup) inflater.inflate(R.layout.app_item, null);
        inflater.inflate(R.layout.widget_progress_bar,
                (ViewGroup) item.findViewById(android.R.id.widget_frame));
        parent.addView(item);
        item.findViewById(android.R.id.icon).setVisibility(View.GONE);
        TextView titleView = (TextView) item.findViewById(android.R.id.title);
        TextView valueView = (TextView) item.findViewById(android.R.id.text1);
        titleView.setText(title);
        valueView.setText(value);
        ProgressBar progress = (ProgressBar) item.findViewById(android.R.id.progress);
        progress.setProgress(Math.round(level*100));
!!!515586.java!!!	fillMemStateSection() : void
        CharSequence[] labels = getResources().getTextArray(R.array.proc_stats_memory_states);
        for (int i=0; i<ProcessStats.ADJ_MEM_FACTOR_COUNT; i++) {
            if (mMemTimes[i] > 0) {
                float level = ((float)mMemTimes[i])/mTotalTime;
                addDetailsItem(mMemStateParent, labels[i], level,
                        Formatter.formatShortElapsedTime(getActivity(), mMemTimes[i]));
            }
        }
!!!515714.java!!!	addMemUseDetailsItem(inout parent : ViewGroup, inout title : CharSequence, in weight : double) : void
        if (weight > 0) {
            float level = (float)(weight/mMemTotalWeight);
            String value = Formatter.formatShortFileSize(getActivity(),
                    (long)((weight * 1024) / mTotalTime));
            addDetailsItem(parent, title, level, value);
        }
!!!515842.java!!!	fillMemUseSection() : void
        CharSequence[] labels = getResources().getTextArray(R.array.proc_stats_process_states);
        addMemUseDetailsItem(mMemUseParent,
                getResources().getText(R.string.mem_use_kernel_type), mMemKernelWeight);
        addMemUseDetailsItem(mMemUseParent,
                getResources().getText(R.string.mem_use_zram_type), mMemZRamWeight);
        addMemUseDetailsItem(mMemUseParent,
                getResources().getText(R.string.mem_use_native_type), mMemNativeWeight);
        for (int i=0; i<ProcessStats.STATE_COUNT; i++) {
            addMemUseDetailsItem(mMemUseParent, labels[i], mMemStateWeights[i]);
        }
        addMemUseDetailsItem(mMemUseParent,
                getResources().getText(R.string.mem_use_kernel_cache_type), mMemCachedWeight);
        addMemUseDetailsItem(mMemUseParent,
                getResources().getText(R.string.mem_use_free_type), mMemFreeWeight);
        addMemUseDetailsItem(mMemUseParent,
                getResources().getText(R.string.mem_use_total), mMemTotalWeight);

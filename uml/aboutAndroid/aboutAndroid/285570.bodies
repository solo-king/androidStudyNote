class DataAxis
!!!948994.java!!!	hashCode() : int
            return Objects.hash(mMin, mMax, mSize);
!!!949122.java!!!	setBounds(in min : long, in max : long) : boolean
            if (mMin != min || mMax != max) {
                mMin = min;
                mMax = max;
                return true;
            } else {
                return false;
            }
!!!949250.java!!!	setSize(in size : float) : boolean
            if (mSize != size) {
                mSize = size;
                return true;
            } else {
                return false;
            }
!!!949378.java!!!	convertToPoint(in value : long) : float
            if (LOG_SCALE) {
                // derived polynomial fit to make lower values more visible
                final double normalized = ((double) value - mMin) / (mMax - mMin);
                final double fraction = Math.pow(10,
                        0.36884343106175121463 * Math.log10(normalized) + -0.04328199452018252624);
                return (float) (fraction * mSize);
            } else {
                return (mSize * (value - mMin)) / (mMax - mMin);
            }
!!!949506.java!!!	convertToValue(in point : float) : long
            if (LOG_SCALE) {
                final double normalized = point / mSize;
                final double fraction = 1.3102228476089056629
                        * Math.pow(normalized, 2.7111774693164631640);
                return (long) (mMin + (fraction * (mMax - mMin)));
            } else {
                return (long) (mMin + ((point * (mMax - mMin)) / mSize));
            }
!!!949634.java!!!	buildLabel(inout res : Resources, inout builder : SpannableStringBuilder, in value : long) : long
            value = MathUtils.constrain(value, 0, TrafficStats.TB_IN_BYTES);
            final BytesResult result = Formatter.formatBytes(res, value,
                    Formatter.FLAG_SHORTER | Formatter.FLAG_CALCULATE_ROUNDED);
            setText(builder, sSpanSize, result.value, "^1");
            setText(builder, sSpanUnit, result.units, "^2");
            return result.roundedBytes;
!!!949762.java!!!	getTickPoints() : float
            final long range = mMax - mMin;

            // target about 16 ticks on screen, rounded to nearest power of 2
            final long tickJump = roundUpToPowerOfTwo(range / 16);
            final int tickCount = (int) (range / tickJump);
            final float[] tickPoints = new float[tickCount];
            long value = mMin;
            for (int i = 0; i < tickPoints.length; i++) {
                tickPoints[i] = convertToPoint(value);
                value += tickJump;
            }

            return tickPoints;
!!!949890.java!!!	shouldAdjustAxis(in value : long) : int
            final float point = convertToPoint(value);
            if (point < mSize * 0.1) {
                return -1;
            } else if (point > mSize * 0.85) {
                return 1;
            } else {
                return 0;
            }

class SettingPref
!!!820482.java!!!	SettingPref(in type : int, in key : String, in setting : String, in def : int, inout  : int...values)
        mType = type;
        mKey = key;
        mSetting = setting;
        mDefault = def;
        mValues = values;
        mUri = getUriFor(mType, mSetting);
!!!820610.java!!!	isApplicable(inout context : Context) : boolean
        return true;
!!!820738.java!!!	getCaption(inout res : Resources, in value : int) : String
        throw new UnsupportedOperationException();
!!!820866.java!!!	init(inout settings : SettingsPreferenceFragment) : Preference
        final Context context = settings.getActivity();
        Preference p = settings.getPreferenceScreen().findPreference(mKey);
        if (p != null && !isApplicable(context)) {
            settings.getPreferenceScreen().removePreference(p);
            p = null;
        }
        if (p instanceof TwoStatePreference) {
            mTwoState = (TwoStatePreference) p;
        } else if (p instanceof DropDownPreference) {
            mDropDown = (DropDownPreference) p;
            CharSequence[] entries = new CharSequence[mValues.length];
            CharSequence[] values = new CharSequence[mValues.length];
            for (int i = 0; i < mValues.length; i++) {
                entries[i] = getCaption(context.getResources(), mValues[i]);
                values[i] = Integer.toString(mValues[i]);
            }
            mDropDown.setEntries(entries);
            mDropDown.setEntryValues(values);
        }
        update(context);
        if (mTwoState != null) {
            p.setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
                @Override
                public boolean onPreferenceChange(Preference preference, Object newValue) {
                    setSetting(context, (Boolean) newValue ? 1 : 0);
                    return true;
                }
            });
            return mTwoState;
        }
        if (mDropDown != null) {
            p.setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
                @Override
                public boolean onPreferenceChange(Preference preference, Object newValue) {
                    return setSetting(context, Integer.parseInt((String) newValue));
                }
            });
            return mDropDown;
        }
        return null;
!!!820994.java!!!	setSetting(inout context : Context, in value : int) : boolean
        return putInt(mType, context.getContentResolver(), mSetting, value);
!!!821122.java!!!	getUri() : Uri
        return mUri;
!!!821250.java!!!	getKey() : String
        return mKey;
!!!821378.java!!!	update(inout context : Context) : void
        final int val = getInt(mType, context.getContentResolver(), mSetting, mDefault);
        if (mTwoState != null) {
            mTwoState.setChecked(val != 0);
        } else if (mDropDown != null) {
            mDropDown.setValue(Integer.toString(val));
        }
!!!821506.java!!!	getUriFor(in type : int, in setting : String) : Uri
        switch(type) {
            case TYPE_GLOBAL:
                return Global.getUriFor(setting);
            case TYPE_SYSTEM:
                return System.getUriFor(setting);
        }
        throw new IllegalArgumentException();
!!!821634.java!!!	putInt(in type : int, inout cr : ContentResolver, in setting : String, in value : int) : boolean
        switch(type) {
            case TYPE_GLOBAL:
                return Global.putInt(cr, setting, value);
            case TYPE_SYSTEM:
                return System.putInt(cr, setting, value);
        }
        throw new IllegalArgumentException();
!!!821762.java!!!	getInt(in type : int, inout cr : ContentResolver, in setting : String, in def : int) : int
        switch(type) {
            case TYPE_GLOBAL:
                return Global.getInt(cr, setting, def);
            case TYPE_SYSTEM:
                return System.getInt(cr, setting, def);
        }
        throw new IllegalArgumentException();

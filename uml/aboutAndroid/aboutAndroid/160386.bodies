class PreviewPagerAdapter
!!!296066.java!!!	PreviewPagerAdapter(inout context : Context, inout isLayoutRtl : boolean, inout previewSampleResIds : int, inout configurations : Configuration)
        mIsLayoutRtl = isLayoutRtl;
        mPreviewFrames = new FrameLayout[previewSampleResIds.length];
        mViewStubInflated = new boolean[previewSampleResIds.length][configurations.length];

        for (int i = 0; i < previewSampleResIds.length; ++i) {
            int p = mIsLayoutRtl ? previewSampleResIds.length - 1 - i : i;
            mPreviewFrames[p] = new FrameLayout(context);
            mPreviewFrames[p].setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.MATCH_PARENT));

            for (int j = 0; j < configurations.length; ++j) {
                // Create a new configuration for the specified value. It won't
                // have any theme set, so manually apply the current theme.
                final Context configContext = context.createConfigurationContext(configurations[j]);
                configContext.setTheme(context.getThemeResId());

                final LayoutInflater configInflater = LayoutInflater.from(configContext);
                final ViewStub sampleViewStub = new ViewStub(configContext);
                sampleViewStub.setLayoutResource(previewSampleResIds[i]);
                final int fi = i, fj = j;
                sampleViewStub.setOnInflateListener(new OnInflateListener() {
                    @Override
                    public void onInflate(ViewStub stub, View inflated) {
                        inflated.setVisibility(stub.getVisibility());
                        mViewStubInflated[fi][fj] = true;
                    }
                });

                mPreviewFrames[p].addView(sampleViewStub);
            }
        }
!!!296194.java!!!	destroyItem(inout container : ViewGroup, in position : int, inout object : Object) : void
        container.removeView((View) object);
!!!296322.java!!!	getCount() : int
        return mPreviewFrames.length;
!!!296450.java!!!	instantiateItem(inout container : ViewGroup, in position : int) : Object
        container.addView(mPreviewFrames[position]);
        return mPreviewFrames[position];
!!!296578.java!!!	isViewFromObject(inout view : View, inout object : Object) : boolean
        return (view == object);
!!!296706.java!!!	isAnimating() : boolean
        return mAnimationCounter > 0;
!!!296834.java!!!	setAnimationEndAction(inout action : Runnable) : void
        mAnimationEndAction = action;
!!!296962.java!!!	setPreviewLayer(in newLayerIndex : int, in currentLayerIndex : int, in currentFrameIndex : int, in animate : boolean) : void
        for (FrameLayout previewFrame : mPreviewFrames) {
            if (currentLayerIndex >= 0) {
                final View lastLayer = previewFrame.getChildAt(currentLayerIndex);
                if (mViewStubInflated[currentFrameIndex][currentLayerIndex]) {
                    // Explicitly set to INVISIBLE only when the stub has
                    // already been inflated.
                    if (previewFrame == mPreviewFrames[currentFrameIndex]) {
                        setVisibility(lastLayer, View.INVISIBLE, animate);
                    } else {
                        setVisibility(lastLayer, View.INVISIBLE, false);
                    }
                }
            }

            // Set next layer visible, as well as inflate necessary views.
            View nextLayer = previewFrame.getChildAt(newLayerIndex);
            if (previewFrame == mPreviewFrames[currentFrameIndex]) {
                // Inflate immediately if the stub has not yet been inflated.
                if (!mViewStubInflated[currentFrameIndex][newLayerIndex]) {
                    nextLayer = ((ViewStub) nextLayer).inflate();
                    nextLayer.setAlpha(0.0f);
                }
                setVisibility(nextLayer, View.VISIBLE, animate);
            } else {
                setVisibility(nextLayer, View.VISIBLE, false);
            }
        }
!!!297090.java!!!	setVisibility(in view : View, in visibility : int, inout animate : boolean) : void
        final float alpha = (visibility == View.VISIBLE ? 1.0f : 0.0f);
        if (!animate) {
            view.setAlpha(alpha);
            view.setVisibility(visibility);
        } else {
            final Interpolator interpolator = (visibility == View.VISIBLE ? FADE_IN_INTERPOLATOR
                    : FADE_OUT_INTERPOLATOR);
            if (visibility == View.VISIBLE) {
                // Fade in animation.
                view.animate()
                .alpha(alpha)
                .setInterpolator(FADE_IN_INTERPOLATOR)
                .setDuration(CROSS_FADE_DURATION_MS)
                .setListener(new PreviewFrameAnimatorListener())
                .withStartAction(new Runnable() {
                    @Override
                    public void run() {
                        view.setVisibility(visibility);
                    }
                });
            } else {
                // Fade out animation.
                view.animate()
                .alpha(alpha)
                .setInterpolator(FADE_OUT_INTERPOLATOR)
                .setDuration(CROSS_FADE_DURATION_MS)
                .setListener(new PreviewFrameAnimatorListener())
                .withEndAction(new Runnable() {
                    @Override
                    public void run() {
                        view.setVisibility(visibility);
                    }
                });
            }
        }
!!!297218.java!!!	runAnimationEndAction() : void
        if (mAnimationEndAction != null && !isAnimating()) {
            mAnimationEndAction.run();
            mAnimationEndAction = null;
        }

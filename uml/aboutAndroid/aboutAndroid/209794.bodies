class ProcStatsPackageEntry
!!!522242.java!!!	ProcStatsPackageEntry(in pkg : String, in windowLength : long)
        mPackage = pkg;
        mWindowLength = windowLength;
!!!522370.java!!!	ProcStatsPackageEntry(inout in : Parcel)
        mPackage = in.readString();
        in.readTypedList(mEntries, ProcStatsEntry.CREATOR);
        mBgDuration = in.readLong();
        mAvgBgMem = in.readLong();
        mMaxBgMem = in.readLong();
        mBgWeight = in.readDouble();
        mRunDuration = in.readLong();
        mAvgRunMem = in.readLong();
        mMaxRunMem = in.readLong();
        mRunWeight = in.readDouble();
!!!522498.java!!!	getRunningFrequency(inout context : Context) : CharSequence
        float amountRunning = mRunDuration / (float) mWindowLength;
        return getFrequency(amountRunning, context);
!!!522626.java!!!	getBackgroundFrequency(inout context : Context) : CharSequence
        float amountRunning = mBgDuration / (float) mWindowLength;
        return getFrequency(amountRunning, context);
!!!522754.java!!!	addEntry(inout entry : ProcStatsEntry) : void
        mEntries.add(entry);
!!!522882.java!!!	updateMetrics() : void
        mBgDuration = mAvgBgMem = mMaxBgMem = 0;
        mBgWeight = 0;
        mRunDuration = mAvgRunMem = mMaxRunMem = 0;
        mRunWeight = 0;
        final int N = mEntries.size();
        for (int i=0; i < N; i++) {
            ProcStatsEntry entry = mEntries.get(i);
            mBgDuration = Math.max(entry.mBgDuration, mBgDuration);
            mAvgBgMem += entry.mAvgBgMem;
            mBgWeight += entry.mBgWeight;
            mRunDuration = Math.max(entry.mRunDuration, mRunDuration);
            mAvgRunMem += entry.mAvgRunMem;
            mRunWeight += entry.mRunWeight;

            // Each entry is generally a process or something similar.  Since it is extremely
            // unlikely that any apps are going to avoid running processes at the same time
            // to avoid memory usage, we will sum the maximum memory usage to create a
            // hypothetical worst case scenario of memory.
            mMaxBgMem += entry.mMaxBgMem;
            mMaxRunMem += entry.mMaxRunMem;
        }
        mAvgBgMem /= N;
        mAvgRunMem /= N;
!!!523010.java!!!	retrieveUiData(inout context : Context, inout pm : PackageManager) : void
        mUiTargetApp = null;
        mUiLabel = mPackage;
        // Only one app associated with this process.
        try {
            if ("os".equals(mPackage)) {
                mUiTargetApp = pm.getApplicationInfo("android",
                        PackageManager.GET_DISABLED_COMPONENTS |
                        PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS |
                        PackageManager.GET_UNINSTALLED_PACKAGES);
                mUiLabel = context.getString(R.string.process_stats_os_label);
            } else {
                mUiTargetApp = pm.getApplicationInfo(mPackage,
                        PackageManager.GET_DISABLED_COMPONENTS |
                        PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS |
                        PackageManager.GET_UNINSTALLED_PACKAGES);
                mUiLabel = mUiTargetApp.loadLabel(pm).toString();
            }
        } catch (PackageManager.NameNotFoundException e) {
        }
!!!523138.java!!!	describeContents() : int
        return 0;
!!!523266.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeString(mPackage);
        dest.writeTypedList(mEntries);
        dest.writeLong(mBgDuration);
        dest.writeLong(mAvgBgMem);
        dest.writeLong(mMaxBgMem);
        dest.writeDouble(mBgWeight);
        dest.writeLong(mRunDuration);
        dest.writeLong(mAvgRunMem);
        dest.writeLong(mMaxRunMem);
        dest.writeDouble(mRunWeight);
!!!523394.java!!!	getFrequency(in amount : float, inout context : Context) : CharSequence
        if (amount > ALWAYS_THRESHOLD) {
            return context.getString(R.string.always_running,
                    Utils.formatPercentage((int) (amount * 100)));
        } else if (amount > SOMETIMES_THRESHOLD) {
            return context.getString(R.string.sometimes_running,
                    Utils.formatPercentage((int) (amount * 100)));
        } else {
            return context.getString(R.string.rarely_running,
                    Utils.formatPercentage((int) (amount * 100)));
        }

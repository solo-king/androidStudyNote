class ServiceListing
!!!918786.java!!!	ServiceListing(inout context : Context, inout config : ManagedServiceSettings::Config)
        mContext = context;
        mConfig = config;
        mContentResolver = context.getContentResolver();
!!!918914.java!!!	addCallback(inout callback : ServiceListing::Callback) : void
        mCallbacks.add(callback);
!!!919042.java!!!	removeCallback(inout callback : ServiceListing::Callback) : void
        mCallbacks.remove(callback);
!!!919170.java!!!	setListening(inout listening : boolean) : void
        if (mListening == listening) return;
        mListening = listening;
        if (mListening) {
            // listen for package changes
            IntentFilter filter = new IntentFilter();
            filter.addAction(Intent.ACTION_PACKAGE_ADDED);
            filter.addAction(Intent.ACTION_PACKAGE_CHANGED);
            filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
            filter.addAction(Intent.ACTION_PACKAGE_REPLACED);
            filter.addDataScheme("package");
            mContext.registerReceiver(mPackageReceiver, filter);
            mContentResolver.registerContentObserver(Settings.Secure.getUriFor(mConfig.setting),
                    false, mSettingsObserver);
        } else {
            mContext.unregisterReceiver(mPackageReceiver);
            mContentResolver.unregisterContentObserver(mSettingsObserver);
        }
!!!919298.java!!!	getEnabledServicesCount(inout config : ManagedServiceSettings::Config, inout context : Context) : int
        final String flat = Settings.Secure.getString(context.getContentResolver(), config.setting);
        if (flat == null || "".equals(flat)) return 0;
        final String[] components = flat.split(":");
        return components.length;
!!!919426.java!!!	getServicesCount(inout c : ManagedServiceSettings::Config, inout pm : PackageManager) : int
        return getServices(c, null, pm);
!!!919554.java!!!	getServices(inout c : ManagedServiceSettings::Config, inout list : List<ServiceInfo>, inout pm : PackageManager) : int
        int services = 0;
        if (list != null) {
            list.clear();
        }
        final int user = ActivityManager.getCurrentUser();

        List<ResolveInfo> installedServices = pm.queryIntentServicesAsUser(
                new Intent(c.intentAction),
                PackageManager.GET_SERVICES | PackageManager.GET_META_DATA,
                user);

        for (int i = 0, count = installedServices.size(); i < count; i++) {
            ResolveInfo resolveInfo = installedServices.get(i);
            ServiceInfo info = resolveInfo.serviceInfo;

            if (!c.permission.equals(info.permission)) {
                Slog.w(c.tag, "Skipping " + c.noun + " service "
                        + info.packageName + "/" + info.name
                        + ": it does not require the permission "
                        + c.permission);
                continue;
            }
            if (list != null) {
                list.add(info);
            }
            services++;
        }
        return services;
!!!919682.java!!!	saveEnabledServices() : void
        StringBuilder sb = null;
        for (ComponentName cn : mEnabledServices) {
            if (sb == null) {
                sb = new StringBuilder();
            } else {
                sb.append(':');
            }
            sb.append(cn.flattenToString());
        }
        Settings.Secure.putString(mContentResolver, mConfig.setting,
                sb != null ? sb.toString() : "");
!!!919810.java!!!	loadEnabledServices() : void
        mEnabledServices.clear();
        final String flat = Settings.Secure.getString(mContentResolver, mConfig.setting);
        if (flat != null && !"".equals(flat)) {
            final String[] names = flat.split(":");
            for (int i = 0; i < names.length; i++) {
                final ComponentName cn = ComponentName.unflattenFromString(names[i]);
                if (cn != null) {
                    mEnabledServices.add(cn);
                }
            }
        }
!!!919938.java!!!	reload() : List<ServiceInfo>
        loadEnabledServices();
        getServices(mConfig, mServices, mContext.getPackageManager());
        for (Callback callback : mCallbacks) {
            callback.onServicesReloaded(mServices);
        }
        return mServices;
!!!920066.java!!!	isEnabled(inout cn : ComponentName) : boolean
        return mEnabledServices.contains(cn);
!!!920194.java!!!	setEnabled(inout cn : ComponentName, inout enabled : boolean) : void
        if (enabled) {
            mEnabledServices.add(cn);
        } else {
            mEnabledServices.remove(cn);
        }
        saveEnabledServices();

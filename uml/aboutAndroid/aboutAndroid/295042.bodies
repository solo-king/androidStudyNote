class GestureSettingsTest
!!!1036034.java!!!	setUp() : void
        super.setUp();
        mDevice = UiDevice.getInstance(getInstrumentation());
        mTargetContext = getInstrumentation().getTargetContext();
        mTargetPackage = mTargetContext.getPackageName();
!!!1036162.java!!!	testAmbientDisplaySwitchPreference() : void
        launchSettings();
        UiObject dozeSwitch = getDozeSwitch();
        assertNotNull(dozeSwitch);
        assertTrue(dozeSwitch.exists());
        assertToggleStateMatchesSettingValue(dozeSwitch, Secure.DOZE_ENABLED, 1, 1);
!!!1036290.java!!!	testGestureSettingsExists() : void
        launchMoves();
        UiObject titleObj = mDevice.findObject(new UiSelector().text(
                mTargetContext.getResources().getString(R.string.gesture_preference_title)));
        assertNotNull(titleObj);
        assertTrue(titleObj.exists());
!!!1036418.java!!!	testCameraDoubleTapToggle() : void
        assertSwitchToggle(mTargetContext.getResources().getString(
                R.string.double_tap_power_for_camera_title),
                Secure.CAMERA_DOUBLE_TAP_POWER_GESTURE_DISABLED, 0, 0);
!!!1036546.java!!!	testCameraDoubleTwistToggle() : void
        assertSwitchToggle(mTargetContext.getResources().getString(
                R.string.double_twist_for_camera_mode_title),
                Secure.CAMERA_DOUBLE_TWIST_TO_FLIP_ENABLED, 1, 1);
!!!1036674.java!!!	testFingerprintSwipeToggle() : void
        assertSwitchToggle(mTargetContext.getResources().getString(
                R.string.fingerprint_swipe_for_notifications_title),
                Secure.SYSTEM_NAVIGATION_KEYS_ENABLED, 0, 1);
!!!1036802.java!!!	testDozeDoubleTapToggle() : void
        assertSwitchToggle(mTargetContext.getResources().getString(
                R.string.ambient_display_title),
                Secure.DOZE_PULSE_ON_DOUBLE_TAP, 1, 1);
!!!1036930.java!!!	testDozePickupToggle() : void
        assertSwitchToggle(mTargetContext.getResources().getString(
                R.string.ambient_display_pickup_title),
                Secure.DOZE_PULSE_ON_PICK_UP, 1, 1);
!!!1037058.java!!!	launchSettings() : void
        Intent settingsIntent = new Intent(Intent.ACTION_MAIN)
                .addCategory(Intent.CATEGORY_LAUNCHER)
                .setPackage(mTargetPackage)
                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        getInstrumentation().getContext().startActivity(settingsIntent);
!!!1037186.java!!!	launchMoves() : void
        launchSettings();
        UiScrollable settings = new UiScrollable(
                new UiSelector().packageName(mTargetPackage).scrollable(true));
        String titleMoves =
                mTargetContext.getResources().getString(R.string.gesture_preference_title);
        settings.scrollTextIntoView(titleMoves);
        mDevice.findObject(new UiSelector().text(titleMoves)).click();
!!!1037314.java!!!	navigateToMovesSetting(in title : String) : void
        launchMoves();
        UiScrollable moves = new UiScrollable(
                new UiSelector().packageName(mTargetPackage).scrollable(true));
        moves.scrollTextIntoView(title);
!!!1037442.java!!!	navigateToAmbientDisplay() : UiScrollable
        UiScrollable settings = new UiScrollable(
                new UiSelector().packageName(mTargetPackage).scrollable(true));
        String titleDisplay =
                mTargetContext.getResources().getString(R.string.display_settings_title);
        settings.scrollTextIntoView(titleDisplay);
        mDevice.findObject(new UiSelector().text(titleDisplay)).click();
        settings.scrollTextIntoView(mTargetContext.getResources().getString(R.string.doze_title));
        return settings;
!!!1037570.java!!!	getGestureSwitch(in title : String) : UiObject
        UiObject titleView = mDevice.findObject(new UiSelector().text(title));
        UiObject gestureSwitch =
            titleView.getFromParent(new UiSelector().className(Switch.class.getName()));
        assertNotNull(gestureSwitch);
        assertTrue(gestureSwitch.exists());
        return gestureSwitch;
!!!1037698.java!!!	getDozeSwitch() : UiObject
        UiScrollable settings = navigateToAmbientDisplay();
        UiObject dozeSwitch = null;
        UiSelector relativeLayoutSelector =
                new UiSelector().className(RelativeLayout.class.getName());
        String titleDoze = mTargetContext.getResources().getString(R.string.doze_title);
        for (int i = 0; i <= settings.getChildCount(relativeLayoutSelector); i++) {
            UiObject relativeLayout = settings.getChild(relativeLayoutSelector.instance(i));
            if (relativeLayout.getChildCount() != 2) {
                continue;
            }
            UiObject obj1 = relativeLayout.getChild(new UiSelector().index(0));
            if (obj1.getText() == titleDoze) {
                return relativeLayout.getFromParent(
                        new UiSelector().className(Switch.class.getName()));
            }
        }
        return null;
!!!1037826.java!!!	assertSwitchToggle(in title : String, in key : String, in defaultVal : int, in enabledVal : int) : void
        navigateToMovesSetting(title);
        assertToggleStateMatchesSettingValue(getGestureSwitch(title), key, defaultVal, enabledVal);
!!!1037954.java!!!	assertToggleStateMatchesSettingValue(inout testSwitch : UiObject, in key : String, in defaultVal : int, in enabledVal : int) : void
        // check initial state
        int currentValue = Secure.getInt(mTargetContext.getContentResolver(), key, defaultVal);
        boolean enabled = currentValue == enabledVal;
        assertEquals(enabled, testSwitch.isChecked());
        // toggle the preference
        testSwitch.click();
        assertEquals(!enabled, testSwitch.isChecked());
        int newValue = currentValue == 1 ? 0 : 1;
        assertEquals(newValue, Secure.getInt(mTargetContext.getContentResolver(), key, defaultVal));

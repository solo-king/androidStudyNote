class EthernetSettings
!!!694018.java!!!	getMetricsCategory() : int
        return MetricsEvent.WEBVIEW_IMPLEMENTATION;
!!!694146.java!!!	EthernetSettings()
	mIntentFilter = new IntentFilter(EthernetManager.ETHERNET_STATE_CHANGED_ACTION);
!!!694274.java!!!	handleEtherStateChange(in EtherState : int) : void
	log("curEtherState"+ EtherState);
		
	switch(EtherState) {
	case EthernetManager.ETHER_STATE_DISCONNECTED:
		mEthHwAddress = nullIpInfo;
		mEthIpAddress = nullIpInfo;
		mEthNetmask = nullIpInfo;
		mEthGateway = nullIpInfo;
		mEthdns1 = nullIpInfo;
		mEthdns2 = nullIpInfo;	
		break;
	case EthernetManager.ETHER_STATE_CONNECTING:
                String mStatusString = this.getResources().getString(R.string.ethernet_info_getting);
                mEthHwAddress = mStatusString;
                mEthIpAddress = mStatusString;
                mEthNetmask = mStatusString;
                mEthGateway = mStatusString;
                mEthdns1 = mStatusString;
                mEthdns2 = mStatusString;
		break;
	case EthernetManager.ETHER_STATE_CONNECTED:
		getEthInfo();
		break;
	} 
		
	refreshUI();
!!!694402.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        addPreferencesFromResource(R.xml.ethernet_settings);
        
        mEthManager = (EthernetManager) getSystemService(Context.ETHERNET_SERVICE);
        
        if (mEthManager == null) {
		Log.e(TAG, "get ethernet manager failed");
		return;
	    }
	mContext=this.getActivity().getApplicationContext();
!!!694530.java!!!	getIPv4Address(in text : String) : Inet4Address
        try {
            return (Inet4Address) NetworkUtils.numericToInetAddress(text);
        } catch (IllegalArgumentException|ClassCastException e) {
            return null;
        }
!!!694658.java!!!	onResume() : void
        super.onResume();
        if(mkeyEthMode==null) {
            mkeyEthMode=(ListPreference)findPreference(KEY_ETH_MODE);
            mkeyEthMode.setOnPreferenceChangeListener(this);
        }
    /*    
        if (mEthCheckBox== null) {
            mEthCheckBox = (SwitchPreference) findPreference("ethernet");
            mEthCheckBox.setOnPreferenceChangeListener(this);
        }
    */    
        handleEtherStateChange(mEthManager.getEthernetConnectState());
        refreshUI();
        log("resume");
        mContext.registerReceiver(mReceiver, mIntentFilter);
!!!694786.java!!!	onPause() : void
        super.onPause();
!!!694914.java!!!	onDestroy() : void
        super.onDestroy();
        log("destory");
!!!695042.java!!!	onStop() : void
    	super.onStop();
    	log("stop");
    	
        mContext.unregisterReceiver(mReceiver);
!!!695170.java!!!	setStringSummary(in preference : String, in value : String) : void
        try {
            findPreference(preference).setSummary(value);
        } catch (RuntimeException e) {
            findPreference(preference).setSummary("");
            log("can't find "+preference);
        }
!!!695298.java!!!	getStringFromPref(in preference : String) : String
        try {
            return findPreference(preference).getSummary().toString();
        } catch (RuntimeException e) {
            return null;
        }
!!!695426.java!!!	refreshUI() : void
  
    //    setStringSummary(KEY_ETH_HW_ADDRESS,mEthHwAddress);
  
        setStringSummary(KEY_ETH_IP_ADDRESS, mEthIpAddress);
        setStringSummary(KEY_ETH_NET_MASK, mEthNetmask);
        setStringSummary(KEY_ETH_GATEWAY, mEthGateway);
        setStringSummary(KEY_ETH_DNS1, mEthdns1);
        setStringSummary(KEY_ETH_DNS2, mEthdns2);
	updateCheckbox();
!!!695554.java!!!	updateCheckbox() : void
  //add by ljh for adding a checkbox switch 
         
        if(mEthManager==null){   	
        	mkeyEthMode.setSummary("null");
        } else {
        	boolean useDhcp=(mEthManager.getConfiguration().ipAssignment == IpAssignment.DHCP) ? true : false;
            boolean useStatic=(mEthManager.getConfiguration().ipAssignment == IpAssignment.STATIC) ? true : false;
        	if(useDhcp){
        		mkeyEthMode.setValue("DHCP");
        		mkeyEthMode.setSummary(R.string.usedhcp);
        	}else if(useStatic){
        		mkeyEthMode.setValue("StaticIP");
        		mkeyEthMode.setSummary(R.string.usestatic);
        	}else{
                mkeyEthMode.setValue("PPPoE");
        		mkeyEthMode.setSummary(R.string.usepppoe);
            }
           
        }    
!!!695682.java!!!	onPreferenceChange(inout preference : Preference, inout newValue : Object) : boolean
    	 log("onPreferenceChange");
    	if(preference==mkeyEthMode) {
    	     String value=(String)newValue;
    	     if(value.equals("DHCP")){
    	        	mEthManager.setConfiguration(new IpConfiguration(IpAssignment.DHCP, ProxySettings.NONE,null,null));
    	        	log("switch to dhcp");
    	     }else if(value.equals("StaticIP")){
    	        	log("static editor");       	
    	        	this.showDialog(SHOW_STATIC_DIALOG);
    	     }else{
                 log("pppoe editor");       	
    	        	this.showDialog(SHOW_PPPOE_DIALOG);
             }
    		
    	}
    	return true;
!!!695810.java!!!	interMask2String(in prefixLength : int) : String
        String netMask = null;
		int inetMask = prefixLength;
		
		int part = inetMask / 8;
		int remainder = inetMask % 8;
		int sum = 0;
		
		for (int i = 8; i > 8 - remainder; i--) {
			sum = sum + (int) Math.pow(2, i - 1);
		}
		
		if (part == 0) {
			netMask = sum + ".0.0.0";
		} else if (part == 1) {
			netMask = "255." + sum + ".0.0";
		} else if (part == 2) {
			netMask = "255.255." + sum + ".0";
		} else if (part == 3) {
			netMask = "255.255.255." + sum;
		} else if (part == 4) {
			netMask = "255.255.255.255";
		}

		return netMask;
!!!695938.java!!!	maskStr2InetMask(in maskStr : String) : int
    	StringBuffer sb ;
    	String str;
    	int inetmask = 0; 
    	int count = 0;
    	/*
    	 * check the subMask format
    	 */
      	Pattern pattern = Pattern.compile("(^((\\d|[01]?\\d\\d|2[0-4]\\d|25[0-5])\\.){3}(\\d|[01]?\\d\\d|2[0-4]\\d|25[0-5])$)|^(\\d|[1-2]\\d|3[0-2])$");
    	if (pattern.matcher(maskStr).matches() == false) {
    		Log.e(TAG,"subMask is error");
    		return 0;
    	}
    	
    	String[] ipSegment = maskStr.split("\\.");
    	for(int n =0; n<ipSegment.length;n++) {
    		sb = new StringBuffer(Integer.toBinaryString(Integer.parseInt(ipSegment[n])));
    		str = sb.reverse().toString();
    		count=0;
    		for(int i=0; i<str.length();i++) {
    			i=str.indexOf("1",i);
    			if(i==-1)  
    				break;
    			count++;
    		}
    		inetmask+=count;
    	}
    	return inetmask;
!!!696066.java!!!	setStaticIpConfiguration() : boolean
    	
        mStaticIpConfiguration =new StaticIpConfiguration();
		 /*
		  * get ip address, netmask,dns ,gw etc.
		  */	 
        Inet4Address inetAddr = getIPv4Address(this.mEthIpAddress);
        int prefixLength = maskStr2InetMask(this.mEthNetmask); 
        InetAddress gatewayAddr =getIPv4Address(this.mEthGateway); 
        InetAddress dnsAddr = getIPv4Address(this.mEthdns1);
		 
        if (inetAddr.getAddress().toString().isEmpty() || prefixLength ==0 || gatewayAddr.toString().isEmpty()
		  || dnsAddr.toString().isEmpty()) {
              log("ip,mask or dnsAddr is wrong");
			  return false;
	}
		  
        String dnsStr2=this.mEthdns2;  
        mStaticIpConfiguration.ipAddress = new LinkAddress(inetAddr, prefixLength);
        mStaticIpConfiguration.gateway=gatewayAddr;
        mStaticIpConfiguration.dnsServers.add(dnsAddr);
  
        if (!dnsStr2.isEmpty()) {
            mStaticIpConfiguration.dnsServers.add(getIPv4Address(dnsStr2));
	} 
	mIpConfiguration=new IpConfiguration(IpAssignment.STATIC, ProxySettings.NONE,mStaticIpConfiguration,null);  
        return true;
!!!696194.java!!!	setPppoeConfiguration() : boolean
    //    mIpConfiguration = new IpConfiguration();
    //    mIpConfiguration.setIpAssignment(IpAssignment.PPPOE);
        mIpConfiguration = new IpConfiguration(IpAssignment.PPPOE, ProxySettings.NONE,null,null);
        mIpConfiguration.pppoeAccount = mPppoeUname;
        mIpConfiguration.pppoePassword = mPppoePassword;
        return true;
!!!696322.java!!!	getEthInfoFromDhcp() : void
	
	String tempIpInfo;
	String iface = "eth0";
		
	tempIpInfo = /*SystemProperties.get("dhcp."+ iface +".ipaddress");*/
                 mEthManager.getIpAddress();

	if ((tempIpInfo != null) && (!tempIpInfo.equals("")) ){ 
		mEthIpAddress = tempIpInfo;
    	} else {  
    		mEthIpAddress = nullIpInfo;
    	}
				
	tempIpInfo = /*SystemProperties.get("dhcp."+ iface +".mask");*/
                 mEthManager.getNetmask();	
	if ((tempIpInfo != null) && (!tempIpInfo.equals("")) ){
            mEthNetmask = tempIpInfo;
    	} else {           		
    		mEthNetmask = nullIpInfo;
    	}
					
	tempIpInfo = /*SystemProperties.get("dhcp."+ iface +".gateway");*/
                 mEthManager.getGateway();	
	if ((tempIpInfo != null) && (!tempIpInfo.equals(""))){
        	mEthGateway = tempIpInfo;
    	} else {
    		mEthGateway = nullIpInfo;        		
    	}

	tempIpInfo = /*SystemProperties.get("dhcp."+ iface +".dns1");*/
                 mEthManager.getDns();
	if ((tempIpInfo != null) && (!tempIpInfo.equals(""))){
            String data[] = tempIpInfo.split(",");
       		mEthdns1 = data[0];
            if (data.length <= 1){
                mEthdns2 = nullIpInfo;
            }else{
                mEthdns2 = data[1];
            }
    	} else {
    		mEthdns1 = nullIpInfo;      		
    	}
    
/*	tempIpInfo = SystemProperties.get("dhcp."+ iface +".dns2");
	if ((tempIpInfo != null) && (!tempIpInfo.equals(""))){
       		mEthdns2 = tempIpInfo;
    	} else {
    		mEthdns2 = nullIpInfo;       		
    	}
*/
!!!696450.java!!!	getEthInfoFromStaticIp() : void
	StaticIpConfiguration staticIpConfiguration=mEthManager.getConfiguration().getStaticIpConfiguration();
		
	if(staticIpConfiguration == null) {
		return ;
	}
	LinkAddress ipAddress = staticIpConfiguration.ipAddress;
	InetAddress gateway   = staticIpConfiguration.gateway;
	ArrayList<InetAddress> dnsServers=staticIpConfiguration.dnsServers;
	
	if( ipAddress !=null) {
		mEthIpAddress=ipAddress.getAddress().getHostAddress();
		mEthNetmask=interMask2String(ipAddress.getPrefixLength());
	}
	if(gateway !=null) {
		mEthGateway=gateway.getHostAddress();
	}
		mEthdns1=dnsServers.get(0).getHostAddress();
	
	if(dnsServers.size() > 1) { /* 只保留两个*/
		mEthdns2=dnsServers.get(1).getHostAddress();
	}		
!!!696578.java!!!	getEthInfoFromPppoe() : void
    String tempIpInfo;
	String iface = "ppp0";
	
	tempIpInfo = SystemProperties.get("net."+ iface +".local-ip");

	if ((tempIpInfo != null) && (!tempIpInfo.equals("")) ){ 
		mEthIpAddress = tempIpInfo;
    	} else {  
    		mEthIpAddress = nullIpInfo;
    	}
				
	tempIpInfo = SystemProperties.get("net."+ iface +".mask");
	if ((tempIpInfo != null) && (!tempIpInfo.equals("")) ){
            mEthNetmask = tempIpInfo;
    	} else {           		
    		mEthNetmask = nullIpInfo;
    	}
					
	tempIpInfo = SystemProperties.get("net."+ iface +".gw");
	if ((tempIpInfo != null) && (!tempIpInfo.equals(""))){
        	mEthGateway = tempIpInfo;
    	} else {
    		mEthGateway = nullIpInfo;        		
    	}

	tempIpInfo = SystemProperties.get("net."+ iface +".dns1");
	if ((tempIpInfo != null) && (!tempIpInfo.equals(""))){
           mEthdns1 = tempIpInfo;
        } else {
    		mEthdns1 = nullIpInfo;        		
    	}
        
    tempIpInfo = SystemProperties.get("net."+ iface +".dns2");
	if ((tempIpInfo != null) && (!tempIpInfo.equals(""))){
           mEthdns2 = tempIpInfo;
        } else {
    		mEthdns2 = nullIpInfo;        		
    	}
        
!!!696706.java!!!	getEthInfo() : void
		/*
		mEthHwAddress = mEthManager.getEthernetHwaddr(mEthManager.getEthernetIfaceName());
		if (mEthHwAddress == null) mEthHwAddress = nullIpInfo;
		*/
        IpAssignment mode =mEthManager.getConfiguration().getIpAssignment();
        
	   
         if ( mode== IpAssignment.DHCP) {
	   /*
	    * getEth from dhcp
	   */
            getEthInfoFromDhcp();
	    } else if(mode == IpAssignment.STATIC) {
	   /*
	    * TODO: get static IP
	   */
            getEthInfoFromStaticIp();
            
	    } else{
            getEthInfoFromPppoe();
        }    
!!!696834.java!!!	log(in s : String) : void
        Log.d(TAG, s);
!!!696962.java!!!	onClick(inout dialogInterface : DialogInterface, in button : int) : void
    	if(button==ethernet_static_ip_dialog.BUTTON_SUBMIT &&
                                    mDialogId == SHOW_STATIC_DIALOG) {
    	    mStaticDialog.saveIpSettingInfo(); //从Dialog获取静态数据  	
    	    if(setStaticIpConfiguration()) {
                mEthManager.setConfiguration(mIpConfiguration); 	
    	    } else {
                Log.e(TAG, mIpConfiguration.toString());
    	    }
    	}else if(button==pppoe_dialog.BUTTON_SUBMIT &&
                                   mDialogId == SHOW_PPPOE_DIALOG){
            mPppoeDialog.savePppoeInfo();
            if(setPppoeConfiguration()){
                mEthManager.setConfiguration(mIpConfiguration); 
            }else {
                Log.e(TAG, mIpConfiguration.toString());
    	    }
        }
        
    	updateCheckbox();
!!!697090.java!!!	onCreateDialog(in dialogId : int) : Dialog
    	log("onCreateDialog "+dialogId);
        mDialogId = dialogId;
    	switch(dialogId) {
    	case SHOW_STATIC_DIALOG:	
        	mStaticDialog = new ethernet_static_ip_dialog(getActivity(), false, this,mGetStaticIpInfo);
        	return mStaticDialog;
        case SHOW_PPPOE_DIALOG:
            mPppoeDialog = new pppoe_dialog(getActivity(), false, this, mGetStaticIpInfo);
        	return mPppoeDialog;
    	}
    	return super.onCreateDialog(dialogId);

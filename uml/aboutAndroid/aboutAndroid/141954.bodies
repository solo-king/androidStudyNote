class SaveChosenLockWorkerBase
!!!190210.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        setRetainInstance(true);
!!!190338.java!!!	setListener(inout listener : SaveChosenLockWorkerBase::Listener) : void
        if (mListener == listener) {
            return;
        }

        mListener = listener;
        if (mFinished && mListener != null) {
            mListener.onChosenLockSaveFinished(mWasSecureBefore, mResultData);
        }
!!!190466.java!!!	prepare(inout utils : LockPatternUtils, inout credentialRequired : boolean, inout hasChallenge : boolean, in challenge : long, in userId : int) : void
        mUtils = utils;
        mUserId = userId;

        mHasChallenge = hasChallenge;
        mChallenge = challenge;
        // This will be a no-op for non managed profiles.
        mWasSecureBefore = mUtils.isSecure(mUserId);

        Context context = getContext();
        // If context is null, we're being invoked to change the setCredentialRequiredToDecrypt,
        // and we made sure that this is the primary user already.
        if (context == null || UserManager.get(context).getUserInfo(mUserId).isPrimary()) {
            mUtils.setCredentialRequiredToDecrypt(credentialRequired);
        }

        mFinished = false;
        mResultData = null;
!!!190594.java!!!	start() : void
        if (mBlocking) {
            finish(saveAndVerifyInBackground());
        } else {
            new Task().execute();
        }
!!!190850.java!!!	finish(inout resultData : Intent) : void
        mFinished = true;
        mResultData = resultData;
        if (mListener != null) {
            mListener.onChosenLockSaveFinished(mWasSecureBefore, mResultData);
        }
!!!190978.java!!!	setBlocking(inout blocking : boolean) : void
        mBlocking = blocking;

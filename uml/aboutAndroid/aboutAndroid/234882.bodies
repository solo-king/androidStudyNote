class AccessPreference
!!!642946.java!!!	AccessPreference(in context : Context, inout entry : AppEntry)
            super(context);
            mEntry = entry;
            mState = (DataUsageState) mEntry.extraInfo;
            mEntry.ensureLabel(getContext());
            setState();
            if (mEntry.icon != null) {
                setIcon(mEntry.icon);
            }
!!!643074.java!!!	onAttached() : void
            super.onAttached();
            mDataSaverBackend.addListener(this);
!!!643202.java!!!	onDetached() : void
            mDataSaverBackend.remListener(this);
            super.onDetached();
!!!643330.java!!!	onClick() : void
            if (mState.isDataSaverBlacklisted) {
                // app is blacklisted, launch App Data Usage screen
                InstalledAppDetails.startAppInfoFragment(AppDataUsage.class,
                        getContext().getString(R.string.app_data_usage),
                        UnrestrictedDataAccess.this,
                        mEntry);
            } else {
                // app is not blacklisted, let superclass handle toggle switch
                super.onClick();
            }
!!!643458.java!!!	setState() : void
            setTitle(mEntry.label);
            if (mState != null) {
                setChecked(mState.isDataSaverWhitelisted);
                if (mState.isDataSaverBlacklisted) {
                    setSummary(R.string.restrict_background_blacklisted);
                } else {
                    setSummary("");
                }
            }
!!!643586.java!!!	reuse() : void
            setState();
            notifyChanged();
!!!643714.java!!!	onBindViewHolder(inout holder : PreferenceViewHolder) : void
            if (mEntry.icon == null) {
                holder.itemView.post(new Runnable() {
                    @Override
                    public void run() {
                        // Ensure we have an icon before binding.
                        mApplicationsState.ensureIcon(mEntry);
                        // This might trigger us to bind again, but it gives an easy way to only
                        // load the icon once its needed, so its probably worth it.
                        setIcon(mEntry.icon);
                    }
                });
            }
            holder.findViewById(android.R.id.widget_frame)
                    .setVisibility(mState != null && mState.isDataSaverBlacklisted
                            ? View.INVISIBLE : View.VISIBLE);
            super.onBindViewHolder(holder);
!!!643970.java!!!	onWhitelistStatusChanged(in uid : int, inout isWhitelisted : boolean) : void
            if (mState != null && mEntry.info.uid == uid) {
                mState.isDataSaverWhitelisted = isWhitelisted;
                reuse();
            }
!!!644098.java!!!	onBlacklistStatusChanged(in uid : int, inout isBlacklisted : boolean) : void
            if (mState != null && mEntry.info.uid == uid) {
                mState.isDataSaverBlacklisted = isBlacklisted;
                reuse();
            }

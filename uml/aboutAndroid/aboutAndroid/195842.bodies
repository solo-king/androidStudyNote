class ListDialogPreference
!!!406914.java!!!	ListDialogPreference(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
!!!407042.java!!!	setOnValueChangedListener(inout listener : ListDialogPreference::OnValueChangedListener) : void
        mOnValueChangedListener = listener;
!!!407170.java!!!	setListItemLayoutResource(in layoutResId : int) : void
        mListItemLayout = layoutResId;
!!!407298.java!!!	setValues(inout values : int) : void
        mEntryValues = values;

        if (mValueSet && mValueIndex == AbsListView.INVALID_POSITION) {
            mValueIndex = getIndexForValue(mValue);
        }
!!!407426.java!!!	setTitles(inout titles : CharSequence) : void
        mEntryTitles = titles;
!!!407682.java!!!	getTitleAt(in index : int) : CharSequence
        if (mEntryTitles == null || mEntryTitles.length <= index) {
            return null;
        }

        return mEntryTitles[index];
!!!407810.java!!!	getValueAt(in index : int) : int
        return mEntryValues[index];
!!!407938.java!!!	getSummary() : CharSequence
        if (mValueIndex >= 0) {
            return getTitleAt(mValueIndex);
        }

        return null;
!!!408066.java!!!	onPrepareDialogBuilder(inout builder : AlertDialog.Builder, inout listener : DialogInterface.OnClickListener) : void
        super.onPrepareDialogBuilder(builder, listener);

        final Context context = getContext();
        final int dialogLayout = getDialogLayoutResource();
        final View picker = LayoutInflater.from(context).inflate(dialogLayout, null);
        final ListPreferenceAdapter adapter = new ListPreferenceAdapter();
        final AbsListView list = (AbsListView) picker.findViewById(android.R.id.list);
        list.setAdapter(adapter);
        list.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapter, View v, int position, long id) {
                if (callChangeListener((int) id)) {
                    setValue((int) id);
                }

                final Dialog dialog = getDialog();
                if (dialog != null) {
                    dialog.dismiss();
                }
            }
        });

        // Set initial selection.
        final int selectedPosition = getIndexForValue(mValue);
        if (selectedPosition != AbsListView.INVALID_POSITION) {
            list.setSelection(selectedPosition);
        }

        builder.setView(picker);
        builder.setPositiveButton(null, null);
!!!408194.java!!!	getIndexForValue(in value : int) : int
        final int[] values = mEntryValues;
        if (values != null) {
            final int count = values.length;
            for (int i = 0; i < count; i++) {
                if (values[i] == value) {
                    return i;
                }
            }
        }

        return AbsListView.INVALID_POSITION;
!!!408322.java!!!	setValue(in value : int) : void
        final boolean changed = mValue != value;
        if (changed || !mValueSet) {
            mValue = value;
            mValueIndex = getIndexForValue(value);
            mValueSet = true;
            persistInt(value);
            if (changed) {
                notifyDependencyChange(shouldDisableDependents());
                notifyChanged();
            }
            if (mOnValueChangedListener != null) {
                mOnValueChangedListener.onValueChanged(this, value);
            }
        }
!!!408450.java!!!	getValue() : int
        return mValue;
!!!408578.java!!!	onGetDefaultValue(inout a : TypedArray, in index : int) : Object
        return a.getInt(index, 0);
!!!408706.java!!!	onSetInitialValue(inout restoreValue : boolean, inout defaultValue : Object) : void
        setValue(restoreValue ? getPersistedInt(mValue) : (Integer) defaultValue);
!!!408834.java!!!	onSaveInstanceState() : Parcelable
        final Parcelable superState = super.onSaveInstanceState();
        if (isPersistent()) {
            // No need to save instance state since it's persistent
            return superState;
        }

        final SavedState myState = new SavedState(superState);
        myState.value = getValue();
        return myState;
!!!408962.java!!!	onRestoreInstanceState(inout state : Parcelable) : void
        if (state == null || !state.getClass().equals(SavedState.class)) {
            // Didn't save state for us in onSaveInstanceState
            super.onRestoreInstanceState(state);
            return;
        }

        SavedState myState = (SavedState) state;
        super.onRestoreInstanceState(myState.getSuperState());
        setValue(myState.value);

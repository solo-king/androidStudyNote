class RestrictedSettingsFragment
!!!151298.java!!!	RestrictedSettingsFragment(in restrictionKey : String)
        mRestrictionKey = restrictionKey;
!!!151426.java!!!	onCreate(inout icicle : Bundle) : void
        super.onCreate(icicle);

        mRestrictionsManager = (RestrictionsManager) getSystemService(Context.RESTRICTIONS_SERVICE);
        mUserManager = (UserManager) getSystemService(Context.USER_SERVICE);
        mIsAdminUser = mUserManager.isAdminUser();

        if (icicle != null) {
            mChallengeSucceeded = icicle.getBoolean(KEY_CHALLENGE_SUCCEEDED, false);
            mChallengeRequested = icicle.getBoolean(KEY_CHALLENGE_REQUESTED, false);
        }

        IntentFilter offFilter = new IntentFilter(Intent.ACTION_SCREEN_OFF);
        offFilter.addAction(Intent.ACTION_USER_PRESENT);
        getActivity().registerReceiver(mScreenOffReceiver, offFilter);
!!!151554.java!!!	onActivityCreated(inout savedInstanceState : Bundle) : void
        super.onActivityCreated(savedInstanceState);
        mAdminSupportDetails = initAdminSupportDetailsView();
        mEmptyTextView = initEmptyTextView();
!!!151682.java!!!	onSaveInstanceState(inout outState : Bundle) : void
        super.onSaveInstanceState(outState);

        if (getActivity().isChangingConfigurations()) {
            outState.putBoolean(KEY_CHALLENGE_REQUESTED, mChallengeRequested);
            outState.putBoolean(KEY_CHALLENGE_SUCCEEDED, mChallengeSucceeded);
        }
!!!151810.java!!!	onResume() : void
        super.onResume();

        if (shouldBeProviderProtected(mRestrictionKey)) {
            ensurePin();
        }
!!!151938.java!!!	onDestroy() : void
        getActivity().unregisterReceiver(mScreenOffReceiver);
        super.onDestroy();
!!!152066.java!!!	onActivityResult(in requestCode : int, in resultCode : int, inout data : Intent) : void
        if (requestCode == REQUEST_PIN_CHALLENGE) {
            if (resultCode == Activity.RESULT_OK) {
                mChallengeSucceeded = true;
                mChallengeRequested = false;
            } else {
                mChallengeSucceeded = false;
            }
            return;
        }

        super.onActivityResult(requestCode, resultCode, data);
!!!152194.java!!!	ensurePin() : void
        if (!mChallengeSucceeded && !mChallengeRequested
                && mRestrictionsManager.hasRestrictionsProvider()) {
            Intent intent = mRestrictionsManager.createLocalApprovalIntent();
            if (intent != null) {
                mChallengeRequested = true;
                mChallengeSucceeded = false;
                PersistableBundle request = new PersistableBundle();
                request.putString(RestrictionsManager.REQUEST_KEY_MESSAGE,
                        getResources().getString(R.string.restr_pin_enter_admin_pin));
                intent.putExtra(RestrictionsManager.EXTRA_REQUEST_BUNDLE, request);
                startActivityForResult(intent, REQUEST_PIN_CHALLENGE);
            }
        }
!!!152322.java!!!	isRestrictedAndNotProviderProtected() : boolean
        if (mRestrictionKey == null || RESTRICT_IF_OVERRIDABLE.equals(mRestrictionKey)) {
            return false;
        }
        return mUserManager.hasUserRestriction(mRestrictionKey)
                && !mRestrictionsManager.hasRestrictionsProvider();
!!!152450.java!!!	hasChallengeSucceeded() : boolean
        return (mChallengeRequested && mChallengeSucceeded) || !mChallengeRequested;
!!!152578.java!!!	shouldBeProviderProtected(in restrictionKey : String) : boolean
        if (restrictionKey == null) {
            return false;
        }
        boolean restricted = RESTRICT_IF_OVERRIDABLE.equals(restrictionKey)
                || mUserManager.hasUserRestriction(mRestrictionKey);
        return restricted && mRestrictionsManager.hasRestrictionsProvider();
!!!152706.java!!!	initAdminSupportDetailsView() : View
        return getActivity().findViewById(R.id.admin_support_details);
!!!152834.java!!!	initEmptyTextView() : TextView
        TextView emptyView = (TextView) getActivity().findViewById(android.R.id.empty);
        return emptyView;
!!!152962.java!!!	getRestrictionEnforcedAdmin() : EnforcedAdmin
        mEnforcedAdmin = RestrictedLockUtils.checkIfRestrictionEnforced(getActivity(),
                mRestrictionKey, UserHandle.myUserId());
        if (mEnforcedAdmin != null && mEnforcedAdmin.userId == UserHandle.USER_NULL) {
            mEnforcedAdmin.userId = UserHandle.myUserId();
        }
        return mEnforcedAdmin;
!!!153090.java!!!	getEmptyTextView() : TextView
        return mEmptyTextView;
!!!153218.java!!!	onDataSetChanged() : void
        highlightPreferenceIfNeeded();
        if (mAdminSupportDetails != null && isUiRestrictedByOnlyAdmin()) {
            final EnforcedAdmin admin = getRestrictionEnforcedAdmin();
            ShowAdminSupportDetailsDialog.setAdminSupportDetails(getActivity(),
                    mAdminSupportDetails, admin, false);
            setEmptyView(mAdminSupportDetails);
        } else if (mEmptyTextView != null) {
            setEmptyView(mEmptyTextView);
        }
        super.onDataSetChanged();
!!!153346.java!!!	setIfOnlyAvailableForAdmins(inout onlyForAdmins : boolean) : void
        mOnlyAvailableForAdmins = onlyForAdmins;
!!!153474.java!!!	isUiRestricted() : boolean
        return isRestrictedAndNotProviderProtected() || !hasChallengeSucceeded()
                || (!mIsAdminUser && mOnlyAvailableForAdmins);
!!!153602.java!!!	isUiRestrictedByOnlyAdmin() : boolean
        return isUiRestricted() && !mUserManager.hasBaseUserRestriction(mRestrictionKey,
                UserHandle.of(UserHandle.myUserId())) && (mIsAdminUser || !mOnlyAvailableForAdmins);

class KeyboardInfoPreference
!!!768386.java!!!	KeyboardInfoPreference(inout context : Context, inout info : PhysicalKeyboardFragment::Keyboards::KeyboardInfo)
            super(context);
            mImeName = info.mImi.loadLabel(context.getPackageManager());
            mImSubtypeName = getImSubtypeName(context, info.mImi, info.mImSubtype);
            setTitle(formatDisplayName(context, mImeName, mImSubtypeName));
            if (info.mLayout != null) {
                setSummary(info.mLayout.getLabel());
            }
!!!768514.java!!!	getDisplayName(inout context : Context, inout imi : InputMethodInfo, inout imSubtype : InputMethodSubtype) : CharSequence
            final CharSequence imeName = imi.loadLabel(context.getPackageManager());
            final CharSequence imSubtypeName = getImSubtypeName(context, imi, imSubtype);
            return formatDisplayName(context, imeName, imSubtypeName);
!!!768642.java!!!	formatDisplayName(inout context : Context, inout imeName : CharSequence, inout imSubtypeName : CharSequence) : CharSequence
            if (imSubtypeName == null) {
                return imeName;
            }
            return String.format(
                    context.getString(R.string.physical_device_title), imeName, imSubtypeName);
!!!768770.java!!!	getImSubtypeName(inout context : Context, inout imi : InputMethodInfo, inout imSubtype : InputMethodSubtype) : CharSequence
            if (imSubtype != null) {
                return InputMethodAndSubtypeUtil.getSubtypeLocaleNameAsSentence(
                        imSubtype, context, imi);
            }
            return null;
!!!768898.java!!!	compareTo(inout object : Preference) : int
            if (!(object instanceof KeyboardInfoPreference)) {
                return super.compareTo(object);
            }
            KeyboardInfoPreference another = (KeyboardInfoPreference) object;
            int result = compare(mImeName, another.mImeName);
            if (result == 0) {
                result = compare(mImSubtypeName, another.mImSubtypeName);
            }
            return result;
!!!769026.java!!!	compare(inout lhs : CharSequence, inout rhs : CharSequence) : int
            if (!TextUtils.isEmpty(lhs) && !TextUtils.isEmpty(rhs)) {
                return collator.compare(lhs.toString(), rhs.toString());
            } else if (TextUtils.isEmpty(lhs) && TextUtils.isEmpty(rhs)) {
                return 0;
            } else if (!TextUtils.isEmpty(lhs)) {
                return -1;
            } else {
                return 1;
            }

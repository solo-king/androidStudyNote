class SetupChooseLockGenericFragment
!!!339330.java!!!	onViewCreated(inout view : View, inout savedInstanceState : Bundle) : void
            super.onViewCreated(view, savedInstanceState);

            GlifPreferenceLayout layout = (GlifPreferenceLayout) view;
            layout.setDividerItemDecoration(new SettingsDividerItemDecoration(getContext()));
            layout.setDividerInset(getContext().getResources().getDimensionPixelSize(
                    R.dimen.suw_items_glif_text_divider_inset));

            layout.setIcon(getContext().getDrawable(R.drawable.ic_lock));

            int titleResource = mForFingerprint ?
                    R.string.lock_settings_picker_title : R.string.setup_lock_settings_picker_title;
            if (getActivity() != null) {
                getActivity().setTitle(titleResource);
            }

            layout.setHeaderText(titleResource);
            // Use the dividers in SetupWizardRecyclerLayout. Suppress the dividers in
            // PreferenceFragment.
            setDivider(null);
!!!339458.java!!!	addHeaderView() : void
            if (mForFingerprint) {
                setHeaderView(R.layout.setup_choose_lock_generic_fingerprint_header);
            } else {
                setHeaderView(R.layout.setup_choose_lock_generic_header);
            }
!!!339586.java!!!	onActivityResult(in requestCode : int, in resultCode : int, inout data : Intent) : void
            if (resultCode != RESULT_CANCELED) {
                if (data == null) {
                    data = new Intent();
                }
                // Add the password quality extra to the intent data that will be sent back for
                // Setup Wizard.
                LockPatternUtils lockPatternUtils = new LockPatternUtils(getActivity());
                data.putExtra(EXTRA_PASSWORD_QUALITY,
                        lockPatternUtils.getKeyguardStoredPasswordQuality(UserHandle.myUserId()));

                PackageManager packageManager = getPackageManager();
                ComponentName componentName = new ComponentName("com.android.settings",
                        "com.android.settings.SetupRedactionInterstitial");
                packageManager.setComponentEnabledSetting(componentName,
                        PackageManager.COMPONENT_ENABLED_STATE_ENABLED,
                        PackageManager.DONT_KILL_APP);
                super.onActivityResult(requestCode, resultCode, data);
            }
            // If the started activity was cancelled (e.g. the user presses back), then this
            // activity will be resumed to foreground.
!!!339714.java!!!	onCreateRecyclerView(inout inflater : LayoutInflater, inout parent : ViewGroup, inout savedInstanceState : Bundle) : RecyclerView
            GlifPreferenceLayout layout = (GlifPreferenceLayout) parent;
            return layout.onCreateRecyclerView(inflater, parent, savedInstanceState);
!!!339842.java!!!	disableUnusablePreferences(in quality : int, inout hideDisabled : boolean) : void
            // At this part of the flow, the user has already indicated they want to add a pin,
            // pattern or password, so don't show "None" or "Slide". We disable them here and set
            // the HIDE_DISABLED flag to true to hide them. This only happens for setup wizard.
            // We do the following max check here since the device may already have a Device Admin
            // installed with a policy we need to honor.
            final int newQuality = Math.max(quality,
                    DevicePolicyManager.PASSWORD_QUALITY_SOMETHING);
            super.disableUnusablePreferencesImpl(newQuality, true /* hideDisabled */);
!!!339970.java!!!	addPreferences() : void
            if (mForFingerprint) {
                super.addPreferences();
            } else {
                addPreferencesFromResource(R.xml.setup_security_settings_picker);
            }
!!!340098.java!!!	onPreferenceTreeClick(inout preference : Preference) : boolean
            final String key = preference.getKey();
            if (KEY_UNLOCK_SET_DO_LATER.equals(key)) {
                // show warning.
                SetupSkipDialog dialog = SetupSkipDialog.newInstance(getActivity().getIntent()
                        .getBooleanExtra(SetupSkipDialog.EXTRA_FRP_SUPPORTED, false));
                dialog.show(getFragmentManager());
                return true;
            }
            return super.onPreferenceTreeClick(preference);
!!!340226.java!!!	getLockPasswordIntent(inout context : Context, in quality : int, in minLength : int, in maxLength : int, inout requirePasswordToDecrypt : boolean, inout confirmCredentials : boolean, in userId : int) : Intent
            final Intent intent = SetupChooseLockPassword.createIntent(context, quality, minLength,
                    maxLength, requirePasswordToDecrypt, confirmCredentials);
            SetupWizardUtils.copySetupExtras(getActivity().getIntent(), intent);
            return intent;
!!!340354.java!!!	getLockPasswordIntent(inout context : Context, in quality : int, in minLength : int, in maxLength : int, inout requirePasswordToDecrypt : boolean, in challenge : long, in userId : int) : Intent
            final Intent intent = SetupChooseLockPassword.createIntent(context, quality, minLength,
                    maxLength, requirePasswordToDecrypt, challenge);
            SetupWizardUtils.copySetupExtras(getActivity().getIntent(), intent);
            return intent;
!!!340482.java!!!	getLockPasswordIntent(inout context : Context, in quality : int, in minLength : int, in maxLength : int, inout requirePasswordToDecrypt : boolean, in password : String, in userId : int) : Intent
            final Intent intent = SetupChooseLockPassword.createIntent(context, quality, minLength,
                    maxLength, requirePasswordToDecrypt, password);
            SetupWizardUtils.copySetupExtras(getActivity().getIntent(), intent);
            return intent;
!!!340610.java!!!	getLockPatternIntent(inout context : Context, in requirePassword : boolean, in confirmCredentials : boolean, in userId : int) : Intent
            final Intent intent = SetupChooseLockPattern.createIntent(context, requirePassword,
                    confirmCredentials);
            SetupWizardUtils.copySetupExtras(getActivity().getIntent(), intent);
            return intent;
!!!340738.java!!!	getLockPatternIntent(inout context : Context, in requirePassword : boolean, in challenge : long, in userId : int) : Intent
            final Intent intent = SetupChooseLockPattern.createIntent(context, requirePassword,
                    challenge);
            SetupWizardUtils.copySetupExtras(getActivity().getIntent(), intent);
            return intent;
!!!340866.java!!!	getLockPatternIntent(inout context : Context, in requirePassword : boolean, in pattern : String, in userId : int) : Intent
            final Intent intent = SetupChooseLockPattern.createIntent(context, requirePassword,
                    pattern);
            SetupWizardUtils.copySetupExtras(getActivity().getIntent(), intent);
            return intent;
!!!340994.java!!!	getEncryptionInterstitialIntent(inout context : Context, in quality : int, inout required : boolean, inout unlockMethodIntent : Intent) : Intent
            Intent intent = SetupEncryptionInterstitial.createStartIntent(context, quality,
                    required, unlockMethodIntent);
            SetupWizardUtils.copySetupExtras(getActivity().getIntent(), intent);
            return intent;

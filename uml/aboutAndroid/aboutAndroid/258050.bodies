class LocaleLinearLayoutManager
!!!781570.java!!!	LocaleLinearLayoutManager(inout context : Context, inout adapter : LocaleDragAndDropAdapter)
        super(context);
        this.mContext = context;
        this.mAdapter = adapter;

        this.mActionMoveUp = new AccessibilityNodeInfoCompat.AccessibilityActionCompat(
                R.id.action_drag_move_up,
                mContext.getString(R.string.action_drag_label_move_up));
        this.mActionMoveDown = new AccessibilityNodeInfoCompat.AccessibilityActionCompat(
                R.id.action_drag_move_down,
                mContext.getString(R.string.action_drag_label_move_down));
        this.mActionMoveTop = new AccessibilityNodeInfoCompat.AccessibilityActionCompat(
                R.id.action_drag_move_top,
                mContext.getString(R.string.action_drag_label_move_top));
        this.mActionMoveBottom = new AccessibilityNodeInfoCompat.AccessibilityActionCompat(
                R.id.action_drag_move_bottom,
                mContext.getString(R.string.action_drag_label_move_bottom));
        this.mActionRemove = new AccessibilityNodeInfoCompat.AccessibilityActionCompat(
                R.id.action_drag_remove,
                mContext.getString(R.string.action_drag_label_remove));
!!!781698.java!!!	onInitializeAccessibilityNodeInfoForItem(inout recycler : RecyclerView.Recycler, inout state : RecyclerView.State, inout host : View, inout info : AccessibilityNodeInfoCompat) : void

        super.onInitializeAccessibilityNodeInfoForItem(recycler, state, host, info);

        final int itemCount = this.getItemCount();
        final int position = this.getPosition(host);
        final LocaleDragCell dragCell = (LocaleDragCell) host;

        // We want the description to be something not localizable, so that any TTS engine for
        // any language can handle it. And we want the position to be part of it.
        // So we use something like "2, French (France)"
        final String description =
                (position + 1) + ", " + dragCell.getCheckbox().getContentDescription();
        info.setContentDescription(description);

        if (mAdapter.isRemoveMode()) { // We don't move things around in remove mode
            return;
        }

        // The order in which we add the actions is important for the circular selection menu.
        // With the current order the "up" action will be (more or less) up, and "down" more
        // or less down ("more or less" because we have 5 actions)
        if (position > 0) { // it is not the first one
            info.addAction(mActionMoveUp);
            info.addAction(mActionMoveTop);
        }
        if (position + 1 < itemCount) { // it is not the last one
            info.addAction(mActionMoveDown);
            info.addAction(mActionMoveBottom);
        }
        if (itemCount > 1) {
            info.addAction(mActionRemove);
        }
!!!781826.java!!!	performAccessibilityActionForItem(inout recycler : RecyclerView.Recycler, inout state : RecyclerView.State, inout host : View, in action : int, inout args : Bundle) : boolean

        final int itemCount = this.getItemCount();
        final int position = this.getPosition(host);
        boolean result = false;

        switch (action) {
            case R.id.action_drag_move_up:
                if (position > 0) {
                    mAdapter.onItemMove(position, position - 1);
                    result = true;
                }
                break;
            case R.id.action_drag_move_down:
                if (position + 1 < itemCount) {
                    mAdapter.onItemMove(position, position + 1);
                    result = true;
                }
                break;
            case R.id.action_drag_move_top:
                if (position != 0) {
                    mAdapter.onItemMove(position, 0);
                    result = true;
                }
                break;
            case R.id.action_drag_move_bottom:
                if (position != itemCount - 1) {
                    mAdapter.onItemMove(position, itemCount - 1);
                    result = true;
                }
                break;
            case R.id.action_drag_remove:
                if (itemCount > 1) {
                    mAdapter.removeItem(position);
                    result = true;
                }
                break;
            default:
                return super.performAccessibilityActionForItem(recycler, state, host, action, args);
        }

        if (result) {
            mAdapter.doTheUpdate();
        }
        return result;

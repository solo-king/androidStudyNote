class AppDialogFragment
!!!925186.java!!!	show(inout parent : Fragment, inout packageInfo : PackageInfo, in label : String, inout managing : boolean, inout connected : boolean) : void
        show(parent, null, packageInfo, label, managing, connected);
!!!925314.java!!!	show(inout parent : Fragment, inout listener : AppDialogFragment::Listener, inout packageInfo : PackageInfo, in label : String, inout managing : boolean, inout connected : boolean) : void
        if (!parent.isAdded())
            return;

        Bundle args = new Bundle();
        args.putParcelable(ARG_PACKAGE, packageInfo);
        args.putString(ARG_LABEL, label);
        args.putBoolean(ARG_MANAGING, managing);
        args.putBoolean(ARG_CONNECTED, connected);

        final AppDialogFragment frag = new AppDialogFragment();
        frag.mListener = listener;
        frag.setArguments(args);
        frag.setTargetFragment(parent, 0);
        frag.show(parent.getFragmentManager(), TAG_APP_DIALOG);
!!!925442.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        mUserManager = UserManager.get(getContext());
!!!925570.java!!!	onCreateDialog(inout savedInstanceState : Bundle) : Dialog
        Bundle args = getArguments();
        final String label = args.getString(ARG_LABEL);
        boolean managing = args.getBoolean(ARG_MANAGING);
        boolean connected = args.getBoolean(ARG_CONNECTED);
        mPackageInfo = (PackageInfo) args.getParcelable(ARG_PACKAGE);

        if (managing) {
            return new AppDialog(getActivity(), this, mPackageInfo, label);
        } else {
            // Build an AlertDialog with an option to disconnect.
            AlertDialog.Builder dlog = new AlertDialog.Builder(getActivity())
                    .setTitle(label)
                    .setMessage(getActivity().getString(R.string.vpn_disconnect_confirm))
                    .setNegativeButton(getActivity().getString(R.string.vpn_cancel), null);

            if (connected && !isUiRestricted()) {
                dlog.setPositiveButton(getActivity().getString(R.string.vpn_disconnect),
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                onDisconnect(dialog);
                            }
                        });
            }
            return dlog.create();
        }
!!!925698.java!!!	onCancel(inout dialog : DialogInterface) : void
        dismiss();
        if (mListener != null) {
            mListener.onCancel();
        }
        super.onCancel(dialog);
!!!925826.java!!!	onForget(in dialog : DialogInterface) : void
        if (isUiRestricted()) {
            return;
        }
        final int userId = getUserId();
        try {
            mService.setVpnPackageAuthorization(mPackageInfo.packageName, userId, false);
            onDisconnect(dialog);
        } catch (RemoteException e) {
            Log.e(TAG, "Failed to forget authorization of " + mPackageInfo.packageName +
                    " for user " + userId, e);
        }

        if (mListener != null) {
            mListener.onForget();
        }
!!!925954.java!!!	onDisconnect(in dialog : DialogInterface) : void
        if (isUiRestricted()) {
            return;
        }
        final int userId = getUserId();
        try {
            if (mPackageInfo.packageName.equals(getConnectedPackage(mService, userId))) {
                mService.setAlwaysOnVpnPackage(userId, null, /* lockdownEnabled */ false);
                mService.prepareVpn(mPackageInfo.packageName, VpnConfig.LEGACY_VPN, userId);
            }
        } catch (RemoteException e) {
            Log.e(TAG, "Failed to disconnect package " + mPackageInfo.packageName +
                    " for user " + userId, e);
        }
!!!926082.java!!!	isUiRestricted() : boolean
        final UserHandle userHandle = UserHandle.of(getUserId());
        return mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_VPN, userHandle);
!!!926210.java!!!	getUserId() : int
        return UserHandle.getUserId(mPackageInfo.applicationInfo.uid);
!!!926338.java!!!	getConnectedPackage(inout service : IConnectivityManager, in userId : int) : String
        final VpnConfig config = service.getVpnConfig(userId);
        return config != null ? config.user : null;

class FingerprintLocationAnimationView
!!!707714.java!!!	FingerprintLocationAnimationView(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        mDotRadius = getResources().getDimensionPixelSize(R.dimen.fingerprint_dot_radius);
        mMaxPulseRadius = getResources().getDimensionPixelSize(R.dimen.fingerprint_pulse_radius);
        mFractionCenterX = getResources().getFraction(
                R.fraction.fingerprint_sensor_location_fraction_x, 1, 1);
        mFractionCenterY = getResources().getFraction(
                R.fraction.fingerprint_sensor_location_fraction_y, 1, 1);
        @ColorInt int colorAccent = Utils.getColorAccent(context);
        mDotPaint.setAntiAlias(true);
        mPulsePaint.setAntiAlias(true);
        mDotPaint.setColor(colorAccent);
        mPulsePaint.setColor(colorAccent);
        mLinearOutSlowInInterpolator = AnimationUtils.loadInterpolator(context,
                android.R.interpolator.linear_out_slow_in);
        mFastOutSlowInInterpolator = AnimationUtils.loadInterpolator(context,
                android.R.interpolator.linear_out_slow_in);
!!!707842.java!!!	onDraw(inout canvas : Canvas) : void
        drawPulse(canvas);
        drawDot(canvas);
!!!707970.java!!!	drawDot(inout canvas : Canvas) : void
        canvas.drawCircle(getCenterX(), getCenterY(), mDotRadius, mDotPaint);
!!!708098.java!!!	drawPulse(inout canvas : Canvas) : void
        canvas.drawCircle(getCenterX(), getCenterY(), mPulseRadius, mPulsePaint);
!!!708226.java!!!	getCenterX() : float
        return getWidth() * mFractionCenterX;
!!!708354.java!!!	getCenterY() : float
        return getHeight() * mFractionCenterY;
!!!708482.java!!!	startAnimation() : void
        startPhase();
!!!708610.java!!!	stopAnimation() : void
        removeCallbacks(mStartPhaseRunnable);
        if (mRadiusAnimator != null) {
            mRadiusAnimator.cancel();
        }
        if (mAlphaAnimator != null) {
            mAlphaAnimator.cancel();
        }
!!!708738.java!!!	pauseAnimation() : void
        stopAnimation();
!!!708866.java!!!	startPhase() : void
        startRadiusAnimation();
        startAlphaAnimation();
!!!708994.java!!!	startRadiusAnimation() : void
        ValueAnimator animator = ValueAnimator.ofFloat(0, mMaxPulseRadius);
        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                mPulseRadius = (float) animation.getAnimatedValue();
                invalidate();
            }
        });
        animator.addListener(new AnimatorListenerAdapter() {

            boolean mCancelled;

            @Override
            public void onAnimationCancel(Animator animation) {
                mCancelled = true;
            }

            @Override
            public void onAnimationEnd(Animator animation) {
                mRadiusAnimator = null;
                if (!mCancelled) {
                    postDelayed(mStartPhaseRunnable, DELAY_BETWEEN_PHASE);
                }
            }
        });
        animator.setDuration(1000);
        animator.setInterpolator(mLinearOutSlowInInterpolator);
        animator.start();
        mRadiusAnimator = animator;
!!!709122.java!!!	startAlphaAnimation() : void
        mPulsePaint.setAlpha((int) (255f * MAX_PULSE_ALPHA));
        ValueAnimator animator = ValueAnimator.ofFloat(MAX_PULSE_ALPHA, 0f);
        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                mPulsePaint.setAlpha((int) (255f * (float) animation.getAnimatedValue()));
                invalidate();
            }
        });
        animator.addListener(new AnimatorListenerAdapter() {
            @Override
            public void onAnimationEnd(Animator animation) {
                mAlphaAnimator = null;
            }
        });
        animator.setDuration(750);
        animator.setInterpolator(mFastOutSlowInInterpolator);
        animator.setStartDelay(250);
        animator.start();
        mAlphaAnimator = animator;

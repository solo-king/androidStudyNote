class DynamicIndexableContentMonitor
!!!868098.java!!!	getAccessibilityServiceIntent(in packageName : String) : Intent
        final Intent intent = new Intent(AccessibilityService.SERVICE_INTERFACE);
        intent.setPackage(packageName);
        return intent;
!!!868226.java!!!	getIMEServiceIntent(in packageName : String) : Intent
        final Intent intent = new Intent("android.view.InputMethod");
        intent.setPackage(packageName);
        return intent;
!!!868354.java!!!	register(inout activity : Activity, in loaderId : int) : void
        mContext = activity;

        if (!mContext.getSystemService(UserManager.class).isUserUnlocked()) {
            Log.w(TAG, "Skipping content monitoring because user is locked");
            mRegistered = false;
            return;
        } else {
            mRegistered = true;
        }

        boolean hasFeaturePrinting = mContext.getPackageManager().hasSystemFeature(
                PackageManager.FEATURE_PRINTING);
        mHasFeatureIme = mContext.getPackageManager().hasSystemFeature(
                PackageManager.FEATURE_INPUT_METHODS);

        // Cache accessibility service packages to know when they go away.
        AccessibilityManager accessibilityManager = (AccessibilityManager)
                mContext.getSystemService(Context.ACCESSIBILITY_SERVICE);
        List<AccessibilityServiceInfo> accessibilityServices = accessibilityManager
                .getInstalledAccessibilityServiceList();
        final int accessibilityServiceCount = accessibilityServices.size();
        for (int i = 0; i < accessibilityServiceCount; i++) {
            AccessibilityServiceInfo accessibilityService = accessibilityServices.get(i);
            ResolveInfo resolveInfo = accessibilityService.getResolveInfo();
            if (resolveInfo == null || resolveInfo.serviceInfo == null) {
                continue;
            }
            mAccessibilityServices.add(resolveInfo.serviceInfo.packageName);
        }

        if (hasFeaturePrinting) {
            activity.getLoaderManager().initLoader(loaderId, null, this);
        }

        // Cache IME service packages to know when they go away.
        if (mHasFeatureIme) {
            InputMethodManager imeManager = (InputMethodManager)
                    mContext.getSystemService(Context.INPUT_METHOD_SERVICE);
            List<InputMethodInfo> inputMethods = imeManager.getInputMethodList();
            final int inputMethodCount = inputMethods.size();
            for (int i = 0; i < inputMethodCount; i++) {
                InputMethodInfo inputMethod = inputMethods.get(i);
                ServiceInfo serviceInfo = inputMethod.getServiceInfo();
                if (serviceInfo == null) continue;
                mImeServices.add(serviceInfo.packageName);
            }

            // Watch for related content URIs.
            mContext.getContentResolver().registerContentObserver(
                    UserDictionary.Words.CONTENT_URI, true, mUserDictionaryContentObserver);
        }

        // Watch for input device changes.
        InputManager inputManager = (InputManager) activity.getSystemService(
                Context.INPUT_SERVICE);
        inputManager.registerInputDeviceListener(this, mHandler);

        // Start tracking packages.
        register(activity, Looper.getMainLooper(), UserHandle.CURRENT, false);
!!!868482.java!!!	unregister() : void
        if (!mRegistered) return;

        super.unregister();

        InputManager inputManager = (InputManager) mContext.getSystemService(
                Context.INPUT_SERVICE);
        inputManager.unregisterInputDeviceListener(this);

        if (mHasFeatureIme) {
            mContext.getContentResolver().unregisterContentObserver(
                    mUserDictionaryContentObserver);
        }

        mAccessibilityServices.clear();
        mImeServices.clear();
!!!868610.java!!!	onPackageAppeared(in packageName : String, in uid : int) : void
        postMessage(MSG_PACKAGE_AVAILABLE, packageName);
!!!868738.java!!!	onPackageDisappeared(in packageName : String, in uid : int) : void
        postMessage(MSG_PACKAGE_UNAVAILABLE, packageName);
!!!868866.java!!!	onPackageModified(in packageName : String) : void
        super.onPackageModified(packageName);
        try {
            final int state = mContext.getPackageManager().getApplicationEnabledSetting(
                    packageName);
            if (state == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT
                    || state == PackageManager.COMPONENT_ENABLED_STATE_ENABLED) {
                postMessage(MSG_PACKAGE_AVAILABLE, packageName);
            } else {
                postMessage(MSG_PACKAGE_UNAVAILABLE, packageName);
            }
        } catch (IllegalArgumentException e) {
            Log.e(TAG, "Package does not exist: " + packageName, e);
        }
!!!868994.java!!!	onInputDeviceAdded(in deviceId : int) : void
        Index.getInstance(mContext).updateFromClassNameResource(
                InputMethodAndLanguageSettings.class.getName(), false, true);
!!!869122.java!!!	onInputDeviceRemoved(in deviceId : int) : void
        onInputDeviceChanged(deviceId);
!!!869250.java!!!	onInputDeviceChanged(in deviceId : int) : void
        Index.getInstance(mContext).updateFromClassNameResource(
                InputMethodAndLanguageSettings.class.getName(), true, true);
!!!869378.java!!!	postMessage(in what : int, in packageName : String) : void
        Message message = mHandler.obtainMessage(what, packageName);
        mHandler.sendMessageDelayed(message, DELAY_PROCESS_PACKAGE_CHANGE);
!!!869506.java!!!	handlePackageAvailable(in packageName : String) : void
        if (!mAccessibilityServices.contains(packageName)) {
            final Intent intent = getAccessibilityServiceIntent(packageName);
            List<?> services = mContext.getPackageManager().queryIntentServices(intent, 0);
            if (services != null && !services.isEmpty()) {
                mAccessibilityServices.add(packageName);
                Index.getInstance(mContext).updateFromClassNameResource(
                        AccessibilitySettings.class.getName(), false, true);
            }
        }

        if (mHasFeatureIme) {
            if (!mImeServices.contains(packageName)) {
                Intent intent = getIMEServiceIntent(packageName);
                List<?> services = mContext.getPackageManager().queryIntentServices(intent, 0);
                if (services != null && !services.isEmpty()) {
                    mImeServices.add(packageName);
                    Index.getInstance(mContext).updateFromClassNameResource(
                            InputMethodAndLanguageSettings.class.getName(), false, true);
                }
            }
        }
!!!869634.java!!!	handlePackageUnavailable(in packageName : String) : void
        final int accessibilityIndex = mAccessibilityServices.indexOf(packageName);
        if (accessibilityIndex >= 0) {
            mAccessibilityServices.remove(accessibilityIndex);
            Index.getInstance(mContext).updateFromClassNameResource(
                    AccessibilitySettings.class.getName(), true, true);
        }

        if (mHasFeatureIme) {
            final int imeIndex = mImeServices.indexOf(packageName);
            if (imeIndex >= 0) {
                mImeServices.remove(imeIndex);
                Index.getInstance(mContext).updateFromClassNameResource(
                        InputMethodAndLanguageSettings.class.getName(), true, true);
            }
        }
!!!869762.java!!!	onCreateLoader(in id : int, inout args : Bundle) : Loader<List<PrintServiceInfo>>
        return new PrintServicesLoader(
                (PrintManager) mContext.getSystemService(Context.PRINT_SERVICE), mContext,
                PrintManager.ALL_SERVICES);
!!!869890.java!!!	onLoadFinished(inout loader : Loader<List<PrintServiceInfo>>, inout services : List<PrintServiceInfo>) : void
        Index.getInstance(mContext).updateFromClassNameResource(
                PrintSettingsFragment.class.getName(), false, true);
!!!870018.java!!!	onLoaderReset(inout loader : Loader<List<PrintServiceInfo>>) : void
        // nothing to do

class SupportItemAdapter
!!!593666.java!!!	SupportItemAdapter(inout activity : Activity, inout savedInstanceState : Bundle, inout supportFeatureProvider : SupportFeatureProvider, inout itemClickListener : View.OnClickListener)
        mActivity = activity;
        mSupportFeatureProvider = supportFeatureProvider;
        mItemClickListener = itemClickListener;
        mEscalationClickListener = new EscalationClickListener();
        mSpinnerItemSelectListener = new SpinnerItemSelectListener();
        mSupportData = new ArrayList<>();
        // Optimistically assume we have Internet access. It will be updated later to correct value.
        mHasInternet = true;
        if (savedInstanceState != null) {
            mSelectedCountry = savedInstanceState.getString(STATE_SELECTED_COUNTRY);
        } else {
            mSelectedCountry = mSupportFeatureProvider.getCurrentCountryCodeIfHasConfig(PHONE);
        }
        mAccount = mSupportFeatureProvider.getSupportEligibleAccount(mActivity);
        refreshData();
!!!593794.java!!!	onCreateViewHolder(inout parent : ViewGroup, in viewType : int) : SupportItemAdapter::ViewHolder
        return new ViewHolder(LayoutInflater.from(parent.getContext()).inflate(
                viewType, parent, false));
!!!593922.java!!!	onBindViewHolder(inout holder : SupportItemAdapter::ViewHolder, in position : int) : void
        final SupportData data = mSupportData.get(position);
        switch (holder.getItemViewType()) {
            case TYPE_SIGN_IN_BUTTON:
                bindSignInPromoTile(holder, (EscalationData) data);
                break;
            case TYPE_ESCALATION_OPTIONS:
                bindEscalationOptions(holder, (EscalationData) data);
                break;
            case TYPE_ESCALATION_OPTIONS_OFFLINE:
                bindOfflineEscalationOptions(holder, (OfflineEscalationData) data);
                break;
            case TYPE_SUPPORT_TILE_SPACER:
                break;
            default:
                bindSupportTile(holder, data);
                break;
        }
!!!594050.java!!!	getItemViewType(in position : int) : int
        return mSupportData.get(position).type;
!!!594178.java!!!	getItemCount() : int
        return mSupportData.size();
!!!594306.java!!!	onItemClicked(in position : int) : void
        if (position >= 0 && position < mSupportData.size()) {
            final SupportData data = mSupportData.get(position);
            if (data.intent != null &&
                    mActivity.getPackageManager().resolveActivity(data.intent, 0) != null) {
                if (data.metricsEvent >= 0) {
                    MetricsLogger.action(mActivity, data.metricsEvent);
                }
                mActivity.startActivityForResult(data.intent, 0);
            }
        }
!!!594434.java!!!	setHasInternet(inout hasInternet : boolean) : void
        if (mHasInternet != hasInternet) {
            mHasInternet = hasInternet;
            refreshEscalationCards();
        }
!!!594562.java!!!	setAccount(inout account : Account) : void
        if (!Objects.equals(mAccount, account)) {
            mAccount = account;
            mSupportFeatureProvider.refreshOperationRules();
            refreshEscalationCards();
        }
!!!594690.java!!!	onSaveInstanceState(inout outState : Bundle) : void
        outState.putString(STATE_SELECTED_COUNTRY, mSelectedCountry);
!!!594818.java!!!	refreshData() : void
        mSupportData.clear();
        addEscalationCards();
        addMoreHelpItems();
        notifyDataSetChanged();
!!!594946.java!!!	addEscalationCards() : void
        if (mAccount == null) {
            addSignInPromo();
        } else if (mHasInternet) {
            addOnlineEscalationCards();
        } else {
            addOfflineEscalationCards();
        }
!!!595074.java!!!	refreshEscalationCards() : void
        if (getItemCount() > 0) {
            final int itemType = getItemViewType(0 /* position */);
            if (itemType == TYPE_SIGN_IN_BUTTON
                    || itemType == TYPE_ESCALATION_OPTIONS
                    || itemType == TYPE_ESCALATION_OPTIONS_OFFLINE) {
                mSupportData.remove(0 /* position */);
                addEscalationCards();
                notifyItemChanged(0 /* position */);
            }
        }
!!!595202.java!!!	addOnlineEscalationCards() : void
        final boolean hasPhoneOperation =
                mSupportFeatureProvider.isSupportTypeEnabled(mActivity, PHONE);
        final boolean hasChatOperation =
                mSupportFeatureProvider.isSupportTypeEnabled(mActivity, CHAT);
        final EscalationData.Builder builder = new EscalationData.Builder(mActivity);
        if (!hasPhoneOperation && !hasChatOperation) {
            // No support at all.
            builder.setTileTitle(R.string.support_escalation_title)
                    .setTileSummary(R.string.support_escalation_unavailable_summary);
        } else if (mSupportFeatureProvider.isAlwaysOperating(PHONE, null /* countryCode */)
                || mSupportFeatureProvider.isAlwaysOperating(CHAT, null /* countryCode */)) {
            // Support is available.
            builder.setTileTitle(R.string.support_escalation_24_7_title)
                    .setTileTitleDescription(R.string.support_escalation_24_7_content_description)
                    .setTileSummary(mActivity.getString(R.string.support_escalation_24_7_summary));
        } else if (mSupportFeatureProvider.isOperatingNow(PHONE)
                || mSupportFeatureProvider.isOperatingNow(CHAT)) {
            // Support is available now.
            builder.setTileTitle(R.string.support_escalation_title)
                    .setTileSummary(R.string.support_escalation_summary);
        } else {
            // Support is now temporarily unavailable.
            builder.setTileTitle(R.string.support_escalation_title)
                    .setTileSummary(
                            mSupportFeatureProvider.getOperationHours(mActivity, PHONE, null,
                                    true /* hasInternet */));
        }
        if (hasPhoneOperation) {
            builder.setText1(R.string.support_escalation_by_phone)
                    .setSummary1(mSupportFeatureProvider.getEstimatedWaitTime(mActivity, PHONE))
                    .setEnabled1(mSupportFeatureProvider.isOperatingNow(PHONE));
        }
        if (hasChatOperation) {
            builder.setText2(R.string.support_escalation_by_chat)
                    .setSummary2(mSupportFeatureProvider.getEstimatedWaitTime(mActivity, CHAT))
                    .setEnabled2(mSupportFeatureProvider.isOperatingNow(CHAT));
        }
        mSupportData.add(0 /* index */, builder.build());
!!!595330.java!!!	addOfflineEscalationCards() : void
        final CharSequence operatingHours;
        final boolean isPhoneSupportAlwaysOperating =
                mSupportFeatureProvider.isAlwaysOperating(PHONE, mSelectedCountry);
        if (isPhoneSupportAlwaysOperating) {
            operatingHours = mActivity.getString(R.string.support_escalation_24_7_summary);
        } else {
            operatingHours = mSupportFeatureProvider.getOperationHours(mActivity,
                    PHONE, mSelectedCountry, false /* hasInternet */);
        }
        mSupportData.add(0 /* index */, new OfflineEscalationData.Builder(mActivity)
                .setCountries(mSupportFeatureProvider.getPhoneSupportCountries())
                .setTollFreePhone(mSupportFeatureProvider.getSupportPhones(
                        mSelectedCountry, true /* isTollFree */))
                .setTolledPhone(mSupportFeatureProvider.getSupportPhones(
                        mSelectedCountry, false /* isTollFree */))
                .setTileTitle(isPhoneSupportAlwaysOperating
                        ? R.string.support_escalation_24_7_title
                        : R.string.support_escalation_title)
                .setTileTitleDescription(isPhoneSupportAlwaysOperating
                        ? R.string.support_escalation_24_7_content_description
                        : R.string.support_escalation_title)
                .setTileSummary(operatingHours)
                .build());
!!!595458.java!!!	addSignInPromo() : void
        mSupportData.add(0 /* index */, new EscalationData.Builder(mActivity, TYPE_SIGN_IN_BUTTON)
                .setText1(R.string.support_sign_in_button_text)
                .setText2(R.string.support_sign_in_required_help)
                .setTileTitle(R.string.support_sign_in_required_title)
                .setTileSummary(R.string.support_sign_in_required_summary)
                .build());
!!!595586.java!!!	addMoreHelpItems() : void
        mSupportData.add(new SupportData.Builder(mActivity, TYPE_SUPPORT_TILE_SPACER).build());
        PackageManager packageManager = mActivity.getPackageManager();
        Intent intent = mSupportFeatureProvider.getHelpIntent(mActivity);
        if (packageManager.resolveActivity(intent, 0) != null) {
            mSupportData.add(new SupportData.Builder(mActivity, TYPE_SUPPORT_TILE)
                    .setIcon(R.drawable.ic_help_24dp)
                    .setTileTitle(R.string.support_help_feedback_title)
                    .setIntent(intent)
                    .setMetricsEvent(MetricsProto.MetricsEvent.ACTION_SUPPORT_HELP_AND_FEEDBACK)
                    .build());
        }
        intent = mSupportFeatureProvider.getTipsAndTricksIntent(mActivity);
        if (packageManager.resolveActivity(intent, 0) != null) {
            mSupportData.add(new SupportData.Builder(mActivity, TYPE_SUPPORT_TILE)
                    .setIcon(R.drawable.ic_lightbulb_outline_24)
                    .setTileTitle(R.string.support_tips_and_tricks_title)
                    .setIntent(intent)
                    .setMetricsEvent(MetricsProto.MetricsEvent.ACTION_SUPPORT_TIPS_AND_TRICKS)
                    .build());
        }
!!!595714.java!!!	bindEscalationOptions(inout holder : SupportItemAdapter::ViewHolder, inout data : SupportItemAdapter::EscalationData) : void
        holder.tileTitleView.setText(data.tileTitle);
        holder.tileTitleView.setContentDescription(data.tileTitleDescription);
        holder.tileSummaryView.setText(data.tileSummary);
        if (data.text1 == 0) {
            holder.text1View.setVisibility(View.GONE);
        } else {
            holder.text1View.setText(data.text1);
            holder.text1View.setOnClickListener(mEscalationClickListener);
            holder.text1View.setEnabled(data.enabled1 && mHasInternet);
            holder.text1View.setVisibility(View.VISIBLE);
        }
        if (TextUtils.isEmpty(data.text2)) {
            holder.text2View.setVisibility(View.GONE);
        } else {
            holder.text2View.setText(data.text2);
            holder.text2View.setOnClickListener(mEscalationClickListener);
            holder.text2View.setEnabled(data.enabled2 && mHasInternet);
            holder.text2View.setVisibility(View.VISIBLE);
        }
        if (holder.summary1View != null) {
            holder.summary1View.setText(data.summary1);
            holder.summary1View.setVisibility(mHasInternet && !TextUtils.isEmpty(data.summary1)
                    ? View.VISIBLE : View.GONE);
        }
        if (holder.summary2View != null) {
            holder.summary2View.setText(data.summary2);
            holder.summary2View.setVisibility(mHasInternet && !TextUtils.isEmpty(data.summary2)
                    ? View.VISIBLE : View.GONE);
        }
!!!595842.java!!!	bindOfflineEscalationOptions(inout holder : SupportItemAdapter::ViewHolder, inout data : SupportItemAdapter::OfflineEscalationData) : void
        // Bind Title
        holder.tileTitleView.setText(data.tileTitle);
        holder.tileTitleView.setContentDescription(data.tileTitleDescription);
        holder.tileSummaryView.setText(data.tileSummary);
        // Bind spinner
        final Spinner spinner = (Spinner) holder.itemView.findViewById(R.id.spinner);
        final ArrayAdapter<String> adapter = new ArrayAdapter(
                mActivity, android.R.layout.simple_spinner_dropdown_item, data.countries);
        spinner.setAdapter(adapter);
        final List<String> countryCodes = mSupportFeatureProvider.getPhoneSupportCountryCodes();
        for (int i = 0; i < countryCodes.size(); i++) {
            if (TextUtils.equals(countryCodes.get(i), mSelectedCountry)) {
                spinner.setSelection(i);
                break;
            }
        }
        spinner.setOnItemSelectedListener(mSpinnerItemSelectListener);
        // Bind buttons
        if (data.tollFreePhone != null) {
            holder.text1View.setText(data.tollFreePhone.number);
            holder.text1View.setVisibility(View.VISIBLE);
            holder.text1View.setOnClickListener(mEscalationClickListener);
        } else {
            holder.text1View.setVisibility(View.GONE);
        }
        if (data.tolledPhone != null) {
            holder.text2View.setText(
                    mActivity.getString(R.string.support_international_phone_title));
            holder.text2View.setVisibility(View.VISIBLE);
            holder.text2View.setOnClickListener(mEscalationClickListener);
        } else {
            holder.text2View.setVisibility(View.GONE);
        }

        if (ActivityManager.isUserAMonkey()) {
            holder.text1View.setVisibility(View.GONE);
            holder.text2View.setVisibility(View.GONE);
            spinner.setVisibility(View.GONE);
            holder.itemView.findViewById(R.id.support_text).setVisibility(View.GONE);
        }
!!!595970.java!!!	bindSignInPromoTile(inout holder : SupportItemAdapter::ViewHolder, inout data : SupportItemAdapter::EscalationData) : void
        holder.tileTitleView.setText(data.tileTitle);
        holder.tileTitleView.setContentDescription(data.tileTitleDescription);
        holder.tileSummaryView.setText(data.tileSummary);
        holder.text1View.setText(data.text1);
        holder.text2View.setText(data.text2);
        holder.text1View.setOnClickListener(mEscalationClickListener);
        holder.text2View.setOnClickListener(mEscalationClickListener);
!!!596098.java!!!	bindSupportTile(inout holder : SupportItemAdapter::ViewHolder, inout data : SupportItemAdapter::SupportData) : void
        if (holder.iconView != null) {
            holder.iconView.setImageResource(data.icon);
        }
        if (holder.tileTitleView != null) {
            holder.tileTitleView.setText(data.tileTitle);
            holder.tileTitleView.setContentDescription(data.tileTitleDescription);
        }
        if (holder.tileSummaryView != null) {
            holder.tileSummaryView.setText(data.tileSummary);
        }
        holder.itemView.setOnClickListener(mItemClickListener);
!!!596226.java!!!	tryStartDisclaimerAndSupport(in type : int) : void
        if (mSupportFeatureProvider.shouldShowDisclaimerDialog(mActivity)) {
            DialogFragment fragment = SupportDisclaimerDialogFragment.newInstance(mAccount, type);
            fragment.show(mActivity.getFragmentManager(), SupportDisclaimerDialogFragment.TAG);
            return;
        }
        mSupportFeatureProvider.startSupport(mActivity, mAccount, type);

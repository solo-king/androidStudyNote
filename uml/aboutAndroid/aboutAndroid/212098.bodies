class VoiceInputListPreference
!!!922754.java!!!	VoiceInputListPreference(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        setDialogTitle(R.string.choose_voice_input_title);
!!!922882.java!!!	createListAdapter() : ListAdapter
        return new CustomAdapter(getContext(), getEntries());
!!!923010.java!!!	persistString(in value : String) : boolean
        for (int i = 0; i < mHelper.mAvailableInteractionInfos.size(); ++i) {
            VoiceInputHelper.InteractionInfo info = mHelper.mAvailableInteractionInfos.get(i);
            if (info.key.equals(value)) {
                Settings.Secure.putString(getContext().getContentResolver(),
                        Settings.Secure.VOICE_INTERACTION_SERVICE, value);
                Settings.Secure.putString(getContext().getContentResolver(),
                        Settings.Secure.VOICE_RECOGNITION_SERVICE,
                        new ComponentName(info.service.packageName,
                                info.serviceInfo.getRecognitionService())
                                .flattenToShortString());
                setSummary(getEntry());
                setSettingsComponent(info.settings);
                return true;
            }
        }

        for (int i = 0; i < mHelper.mAvailableRecognizerInfos.size(); ++i) {
            VoiceInputHelper.RecognizerInfo info = mHelper.mAvailableRecognizerInfos.get(i);
            if (info.key.equals(value)) {
                Settings.Secure.putString(getContext().getContentResolver(),
                        Settings.Secure.VOICE_INTERACTION_SERVICE, "");
                Settings.Secure.putString(getContext().getContentResolver(),
                        Settings.Secure.VOICE_RECOGNITION_SERVICE, value);
                setSummary(getEntry());
                setSettingsComponent(info.settings);
               return true;
            }
        }

        setSettingsComponent(null);
        return true;
!!!923138.java!!!	setPackageNames(inout packageNames : CharSequence, inout defaultPackageName : CharSequence) : void
        // Skip since all entries are created from |mHelper|.
!!!923266.java!!!	setAssistRestrict(inout assistRestrict : ComponentName) : void
        mAssistRestrict = assistRestrict;
!!!923394.java!!!	refreshVoiceInputs() : void
        mHelper = new VoiceInputHelper(getContext());
        mHelper.buildUi();

        final String assistKey =
                mAssistRestrict == null ? "" : mAssistRestrict.flattenToShortString();

        mAvailableIndexes.clear();
        List<CharSequence> entries = new ArrayList<>();
        List<CharSequence> values = new ArrayList<>();
        for (int i = 0; i < mHelper.mAvailableInteractionInfos.size(); ++i) {
            VoiceInputHelper.InteractionInfo info = mHelper.mAvailableInteractionInfos.get(i);
            entries.add(info.appLabel);
            values.add(info.key);

            if (info.key.contentEquals(assistKey)) {
                mAvailableIndexes.add(i);
            }
        }

        final boolean assitIsService = !mAvailableIndexes.isEmpty();
        final int serviceCount = entries.size();

        for (int i = 0; i < mHelper.mAvailableRecognizerInfos.size(); ++i) {
            VoiceInputHelper.RecognizerInfo info = mHelper.mAvailableRecognizerInfos.get(i);
            entries.add(info.label);
            values.add(info.key);
            if (!assitIsService) {
                mAvailableIndexes.add(serviceCount + i);
            }
        }
        setEntries(entries.toArray(new CharSequence[entries.size()]));
        setEntryValues(values.toArray(new CharSequence[values.size()]));

        if (mHelper.mCurrentVoiceInteraction != null) {
            setValue(mHelper.mCurrentVoiceInteraction.flattenToShortString());
        } else if (mHelper.mCurrentRecognizer != null) {
            setValue(mHelper.mCurrentRecognizer.flattenToShortString());
        } else {
            setValue(null);
        }
!!!923522.java!!!	getCurrentService() : ComponentName
        if (mHelper.mCurrentVoiceInteraction != null) {
            return mHelper.mCurrentVoiceInteraction;
        } else if (mHelper.mCurrentRecognizer != null) {
            return mHelper.mCurrentRecognizer;
        } else {
            return null;
        }

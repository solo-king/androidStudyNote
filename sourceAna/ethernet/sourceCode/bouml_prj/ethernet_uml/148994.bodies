class SSLCertificateSocketFactory
!!!280194.java!!!	SSLCertificateSocketFactory(in handshakeTimeoutMillis : int)
        this(handshakeTimeoutMillis, null, true);
!!!280322.java!!!	SSLCertificateSocketFactory(in handshakeTimeoutMillis : int, inout cache : SSLSessionCache, inout secure : boolean)
        mHandshakeTimeoutMillis = handshakeTimeoutMillis;
        mSessionCache = cache == null ? null : cache.mSessionCache;
        mSecure = secure;
!!!280450.java!!!	getDefault(in handshakeTimeoutMillis : int) : SocketFactory
        return new SSLCertificateSocketFactory(handshakeTimeoutMillis, null, true);
!!!280578.java!!!	getDefault(in handshakeTimeoutMillis : int, inout cache : SSLSessionCache) : SSLSocketFactory
        return new SSLCertificateSocketFactory(handshakeTimeoutMillis, cache, true);
!!!280706.java!!!	getInsecure(in handshakeTimeoutMillis : int, inout cache : SSLSessionCache) : SSLSocketFactory
        return new SSLCertificateSocketFactory(handshakeTimeoutMillis, cache, false);
!!!280834.java!!!	getHttpSocketFactory(in handshakeTimeoutMillis : int, inout cache : SSLSessionCache) : org.apache.http.conn.ssl.SSLSocketFactory
        return new org.apache.http.conn.ssl.SSLSocketFactory(
                new SSLCertificateSocketFactory(handshakeTimeoutMillis, cache, true));
!!!280962.java!!!	verifyHostname(inout socket : Socket, in hostname : String) : void
        if (!(socket instanceof SSLSocket)) {
            throw new IllegalArgumentException("Attempt to verify non-SSL socket");
        }

        if (!isSslCheckRelaxed()) {
            // The code at the start of OpenSSLSocketImpl.startHandshake()
            // ensures that the call is idempotent, so we can safely call it.
            SSLSocket ssl = (SSLSocket) socket;
            ssl.startHandshake();

            SSLSession session = ssl.getSession();
            if (session == null) {
                throw new SSLException("Cannot verify SSL socket without session");
            }
            if (!HttpsURLConnection.getDefaultHostnameVerifier().verify(hostname, session)) {
                throw new SSLPeerUnverifiedException("Cannot verify hostname: " + hostname);
            }
        }
!!!281090.java!!!	makeSocketFactory(inout keyManagers : KeyManager, inout trustManagers : TrustManager) : SSLSocketFactory
        try {
            OpenSSLContextImpl sslContext = new OpenSSLContextImpl();
            sslContext.engineInit(keyManagers, trustManagers, null);
            sslContext.engineGetClientSessionContext().setPersistentCache(mSessionCache);
            return sslContext.engineGetSocketFactory();
        } catch (KeyManagementException e) {
            Log.wtf(TAG, e);
            return (SSLSocketFactory) SSLSocketFactory.getDefault();  // Fallback
        }
!!!281218.java!!!	isSslCheckRelaxed() : boolean
        return "1".equals(SystemProperties.get("ro.debuggable")) &&
            "yes".equals(SystemProperties.get("socket.relaxsslcheck"));
!!!281346.java!!!	getDelegate() : SSLSocketFactory
        // Relax the SSL check if instructed (for this factory, or systemwide)
        if (!mSecure || isSslCheckRelaxed()) {
            if (mInsecureFactory == null) {
                if (mSecure) {
                    Log.w(TAG, "*** BYPASSING SSL SECURITY CHECKS (socket.relaxsslcheck=yes) ***");
                } else {
                    Log.w(TAG, "Bypassing SSL security checks at caller's request");
                }
                mInsecureFactory = makeSocketFactory(mKeyManagers, INSECURE_TRUST_MANAGER);
            }
            return mInsecureFactory;
        } else {
            if (mSecureFactory == null) {
                mSecureFactory = makeSocketFactory(mKeyManagers, mTrustManagers);
            }
            return mSecureFactory;
        }
!!!281474.java!!!	setTrustManagers(inout trustManager : TrustManager) : void
        mTrustManagers = trustManager;

        // Clear out all cached secure factories since configurations have changed.
        mSecureFactory = null;
        // Note - insecure factories only ever use the INSECURE_TRUST_MANAGER so they need not
        // be cleared out here.
!!!281602.java!!!	setNpnProtocols(inout npnProtocols : byte) : void
        this.mNpnProtocols = toLengthPrefixedList(npnProtocols);
!!!281730.java!!!	setAlpnProtocols(inout protocols : byte) : void
        this.mAlpnProtocols = toLengthPrefixedList(protocols);
!!!281858.java!!!	toLengthPrefixedList(inout items : byte) : byte
        if (items.length == 0) {
            throw new IllegalArgumentException("items.length == 0");
        }
        int totalLength = 0;
        for (byte[] s : items) {
            if (s.length == 0 || s.length > 255) {
                throw new IllegalArgumentException("s.length == 0 || s.length > 255: " + s.length);
            }
            totalLength += 1 + s.length;
        }
        byte[] result = new byte[totalLength];
        int pos = 0;
        for (byte[] s : items) {
            result[pos++] = (byte) s.length;
            for (byte b : s) {
                result[pos++] = b;
            }
        }
        return result;
!!!281986.java!!!	getNpnSelectedProtocol(inout socket : Socket) : byte
        return castToOpenSSLSocket(socket).getNpnSelectedProtocol();
!!!282114.java!!!	getAlpnSelectedProtocol(inout socket : Socket) : byte
        return castToOpenSSLSocket(socket).getAlpnSelectedProtocol();
!!!282242.java!!!	setKeyManagers(inout keyManagers : KeyManager) : void
        mKeyManagers = keyManagers;

        // Clear out any existing cached factories since configurations have changed.
        mSecureFactory = null;
        mInsecureFactory = null;
!!!282370.java!!!	setChannelIdPrivateKey(inout privateKey : PrivateKey) : void
        mChannelIdPrivateKey = privateKey;
!!!282498.java!!!	setUseSessionTickets(inout socket : Socket, inout useSessionTickets : boolean) : void
        castToOpenSSLSocket(socket).setUseSessionTickets(useSessionTickets);
!!!282626.java!!!	setHostname(inout socket : Socket, in hostName : String) : void
        castToOpenSSLSocket(socket).setHostname(hostName);
!!!282754.java!!!	setSoWriteTimeout(inout socket : Socket, in writeTimeoutMilliseconds : int) : void
        castToOpenSSLSocket(socket).setSoWriteTimeout(writeTimeoutMilliseconds);
!!!282882.java!!!	castToOpenSSLSocket(inout socket : Socket) : OpenSSLSocketImpl
        if (!(socket instanceof OpenSSLSocketImpl)) {
            throw new IllegalArgumentException("Socket not created by this factory: "
                    + socket);
        }

        return (OpenSSLSocketImpl) socket;
!!!283010.java!!!	createSocket(inout k : Socket, in host : String, in port : int, inout close : boolean) : Socket
        OpenSSLSocketImpl s = (OpenSSLSocketImpl) getDelegate().createSocket(k, host, port, close);
        s.setNpnProtocols(mNpnProtocols);
        s.setAlpnProtocols(mAlpnProtocols);
        s.setHandshakeTimeout(mHandshakeTimeoutMillis);
        s.setChannelIdPrivateKey(mChannelIdPrivateKey);
        if (mSecure) {
            verifyHostname(s, host);
        }
        return s;
!!!283138.java!!!	createSocket() : Socket
        OpenSSLSocketImpl s = (OpenSSLSocketImpl) getDelegate().createSocket();
        s.setNpnProtocols(mNpnProtocols);
        s.setAlpnProtocols(mAlpnProtocols);
        s.setHandshakeTimeout(mHandshakeTimeoutMillis);
        s.setChannelIdPrivateKey(mChannelIdPrivateKey);
        return s;
!!!283266.java!!!	createSocket(inout addr : InetAddress, in port : int, inout localAddr : InetAddress, in localPort : int) : Socket
        OpenSSLSocketImpl s = (OpenSSLSocketImpl) getDelegate().createSocket(
                addr, port, localAddr, localPort);
        s.setNpnProtocols(mNpnProtocols);
        s.setAlpnProtocols(mAlpnProtocols);
        s.setHandshakeTimeout(mHandshakeTimeoutMillis);
        s.setChannelIdPrivateKey(mChannelIdPrivateKey);
        return s;
!!!283394.java!!!	createSocket(inout addr : InetAddress, in port : int) : Socket
        OpenSSLSocketImpl s = (OpenSSLSocketImpl) getDelegate().createSocket(addr, port);
        s.setNpnProtocols(mNpnProtocols);
        s.setAlpnProtocols(mAlpnProtocols);
        s.setHandshakeTimeout(mHandshakeTimeoutMillis);
        s.setChannelIdPrivateKey(mChannelIdPrivateKey);
        return s;
!!!283522.java!!!	createSocket(in host : String, in port : int, inout localAddr : InetAddress, in localPort : int) : Socket
        OpenSSLSocketImpl s = (OpenSSLSocketImpl) getDelegate().createSocket(
                host, port, localAddr, localPort);
        s.setNpnProtocols(mNpnProtocols);
        s.setAlpnProtocols(mAlpnProtocols);
        s.setHandshakeTimeout(mHandshakeTimeoutMillis);
        s.setChannelIdPrivateKey(mChannelIdPrivateKey);
        if (mSecure) {
            verifyHostname(s, host);
        }
        return s;
!!!283650.java!!!	createSocket(in host : String, in port : int) : Socket
        OpenSSLSocketImpl s = (OpenSSLSocketImpl) getDelegate().createSocket(host, port);
        s.setNpnProtocols(mNpnProtocols);
        s.setAlpnProtocols(mAlpnProtocols);
        s.setHandshakeTimeout(mHandshakeTimeoutMillis);
        s.setChannelIdPrivateKey(mChannelIdPrivateKey);
        if (mSecure) {
            verifyHostname(s, host);
        }
        return s;
!!!283778.java!!!	getDefaultCipherSuites() : String
        return getDelegate().getSupportedCipherSuites();
!!!283906.java!!!	getSupportedCipherSuites() : String
        return getDelegate().getSupportedCipherSuites();

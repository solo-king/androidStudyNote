class Translator
!!!868098.java!!!	Translator(in applicationScale : float, in applicationInvertedScale : float)
            this.applicationScale = applicationScale;
            this.applicationInvertedScale = applicationInvertedScale;
!!!868226.java!!!	Translator()
            this(CompatibilityInfo.this.applicationScale,
                    CompatibilityInfo.this.applicationInvertedScale);
!!!868354.java!!!	translateRectInScreenToAppWinFrame(inout rect : Rect) : void
            rect.scale(applicationInvertedScale);
!!!868482.java!!!	translateRegionInWindowToScreen(inout transparentRegion : Region) : void
            transparentRegion.scale(applicationScale);
!!!868610.java!!!	translateCanvas(inout canvas : Canvas) : void
            if (applicationScale == 1.5f) {
                /*  When we scale for compatibility, we can put our stretched
                    bitmaps and ninepatches on exacty 1/2 pixel boundaries,
                    which can give us inconsistent drawing due to imperfect
                    float precision in the graphics engine's inverse matrix.
                 
                    As a work-around, we translate by a tiny amount to avoid
                    landing on exact pixel centers and boundaries, giving us
                    the slop we need to draw consistently.
                 
                    This constant is meant to resolve to 1/255 after it is
                    scaled by 1.5 (applicationScale). Note, this is just a guess
                    as to what is small enough not to create its own artifacts,
                    and big enough to avoid the precision problems. Feel free
                    to experiment with smaller values as you choose.
                 */
                final float tinyOffset = 2.0f / (3 * 255);
                canvas.translate(tinyOffset, tinyOffset);
            }
            canvas.scale(applicationScale, applicationScale);
!!!868738.java!!!	translateEventInScreenToAppWindow(inout event : MotionEvent) : void
            event.scale(applicationInvertedScale);
!!!868866.java!!!	translateWindowLayout(inout params : WindowManager.LayoutParams) : void
            params.scale(applicationScale);
!!!868994.java!!!	translateRectInAppWindowToScreen(inout rect : Rect) : void
            rect.scale(applicationScale);
!!!869122.java!!!	translateRectInScreenToAppWindow(inout rect : Rect) : void
            rect.scale(applicationInvertedScale);
!!!869250.java!!!	translatePointInScreenToAppWindow(inout point : PointF) : void
            final float scale = applicationInvertedScale;
            if (scale != 1.0f) {
                point.x *= scale;
                point.y *= scale;
            }
!!!869378.java!!!	translateLayoutParamsInAppWindowToScreen(inout params : LayoutParams) : void
            params.scale(applicationScale);
!!!869506.java!!!	getTranslatedContentInsets(inout contentInsets : Rect) : Rect
            if (mContentInsetsBuffer == null) mContentInsetsBuffer = new Rect();
            mContentInsetsBuffer.set(contentInsets);
            translateRectInAppWindowToScreen(mContentInsetsBuffer);
            return mContentInsetsBuffer;
!!!869634.java!!!	getTranslatedVisibleInsets(inout visibleInsets : Rect) : Rect
            if (mVisibleInsetsBuffer == null) mVisibleInsetsBuffer = new Rect();
            mVisibleInsetsBuffer.set(visibleInsets);
            translateRectInAppWindowToScreen(mVisibleInsetsBuffer);
            return mVisibleInsetsBuffer;
!!!869762.java!!!	getTranslatedTouchableArea(inout touchableArea : Region) : Region
            if (mTouchableAreaBuffer == null) mTouchableAreaBuffer = new Region();
            mTouchableAreaBuffer.set(touchableArea);
            mTouchableAreaBuffer.scale(applicationScale);
            return mTouchableAreaBuffer;

class LinkProperties
!!!202754.java!!!	LinkProperties()
        clear();
!!!202882.java!!!	LinkProperties(inout source : LinkProperties)
        if (source != null) {
            mIfaceName = source.getInterfaceName();
            for (LinkAddress l : source.getLinkAddresses()) mLinkAddresses.add(l);
            for (InetAddress i : source.getDnses()) mDnses.add(i);
            mDomains = source.getDomains();
            for (RouteInfo r : source.getRoutes()) mRoutes.add(r);
            mHttpProxy = (source.getHttpProxy() == null)  ?
                    null : new ProxyProperties(source.getHttpProxy());
            for (LinkProperties l: source.mStackedLinks.values()) {
                addStackedLink(l);
            }
            setMtu(source.getMtu());
        }
!!!203010.java!!!	setInterfaceName(in iface : String) : void
        mIfaceName = iface;
        ArrayList<RouteInfo> newRoutes = new ArrayList<RouteInfo>(mRoutes.size());
        for (RouteInfo route : mRoutes) {
            newRoutes.add(routeWithInterface(route));
        }
        mRoutes = newRoutes;
!!!203138.java!!!	getInterfaceName() : String
        return mIfaceName;
!!!203266.java!!!	getAllInterfaceNames() : Collection<String>
        Collection interfaceNames = new ArrayList<String>(mStackedLinks.size() + 1);
        if (mIfaceName != null) interfaceNames.add(new String(mIfaceName));
        for (LinkProperties stacked: mStackedLinks.values()) {
            interfaceNames.addAll(stacked.getAllInterfaceNames());
        }
        return interfaceNames;
!!!203394.java!!!	getAddresses() : Collection<InetAddress>
        Collection<InetAddress> addresses = new ArrayList<InetAddress>();
        for (LinkAddress linkAddress : mLinkAddresses) {
            addresses.add(linkAddress.getAddress());
        }
        return Collections.unmodifiableCollection(addresses);
!!!203522.java!!!	getAllAddresses() : Collection<InetAddress>
        Collection<InetAddress> addresses = new ArrayList<InetAddress>();
        for (LinkAddress linkAddress : mLinkAddresses) {
            addresses.add(linkAddress.getAddress());
        }
        for (LinkProperties stacked: mStackedLinks.values()) {
            addresses.addAll(stacked.getAllAddresses());
        }
        return addresses;
!!!203650.java!!!	addLinkAddress(inout address : LinkAddress) : boolean
        // TODO: when the LinkAddress has other attributes beyond the
        // address and the prefix length, update them here.
        if (address != null && !mLinkAddresses.contains(address)) {
            mLinkAddresses.add(address);
            return true;
        }
        return false;
!!!203778.java!!!	removeLinkAddress(inout toRemove : LinkAddress) : boolean
        return mLinkAddresses.remove(toRemove);
!!!203906.java!!!	getLinkAddresses() : LinkAddress
        return Collections.unmodifiableCollection(mLinkAddresses);
!!!204034.java!!!	getAllLinkAddresses() : LinkAddress
        Collection<LinkAddress> addresses = new ArrayList<LinkAddress>();
        addresses.addAll(mLinkAddresses);
        for (LinkProperties stacked: mStackedLinks.values()) {
            addresses.addAll(stacked.getAllLinkAddresses());
        }
        return addresses;
!!!204162.java!!!	setLinkAddresses(inout addresses : Collection<LinkAddress>) : void
        mLinkAddresses.clear();
        for (LinkAddress address: addresses) {
            addLinkAddress(address);
        }
!!!204290.java!!!	addDns(inout dns : InetAddress) : void
        if (dns != null) mDnses.add(dns);
!!!204418.java!!!	getDnses() : Collection<InetAddress>
        return Collections.unmodifiableCollection(mDnses);
!!!204546.java!!!	getDomains() : String
        return mDomains;
!!!204674.java!!!	setDomains(in domains : String) : void
        mDomains = domains;
!!!204802.java!!!	setMtu(in mtu : int) : void
        mMtu = mtu;
!!!204930.java!!!	getMtu() : int
        return mMtu;
!!!205058.java!!!	routeWithInterface(inout route : RouteInfo) : RouteInfo
        return new RouteInfo(
            route.getDestination(),
            route.getGateway(),
            mIfaceName);
!!!205186.java!!!	addRoute(inout route : RouteInfo) : void
        if (route != null) {
            String routeIface = route.getInterface();
            if (routeIface != null && !routeIface.equals(mIfaceName)) {
                throw new IllegalArgumentException(
                   "Route added with non-matching interface: " + routeIface +
                   " vs. " + mIfaceName);
            }
            mRoutes.add(routeWithInterface(route));
        }
!!!205314.java!!!	getRoutes() : RouteInfo
        return Collections.unmodifiableCollection(mRoutes);
!!!205442.java!!!	getAllRoutes() : RouteInfo
        Collection<RouteInfo> routes = new ArrayList();
        routes.addAll(mRoutes);
        for (LinkProperties stacked: mStackedLinks.values()) {
            routes.addAll(stacked.getAllRoutes());
        }
        return routes;
!!!205570.java!!!	setHttpProxy(inout proxy : ProxyProperties) : void
        mHttpProxy = proxy;
!!!205698.java!!!	getHttpProxy() : ProxyProperties
        return mHttpProxy;
!!!205826.java!!!	addStackedLink(inout link : LinkProperties) : boolean
        if (link != null && link.getInterfaceName() != null) {
            mStackedLinks.put(link.getInterfaceName(), link);
            return true;
        }
        return false;
!!!205954.java!!!	removeStackedLink(inout link : LinkProperties) : boolean
        if (link != null && link.getInterfaceName() != null) {
            LinkProperties removed = mStackedLinks.remove(link.getInterfaceName());
            return removed != null;
        }
        return false;
!!!206082.java!!!	getStackedLinks() : LinkProperties
        Collection<LinkProperties> stacked = new ArrayList<LinkProperties>();
        for (LinkProperties link : mStackedLinks.values()) {
          stacked.add(new LinkProperties(link));
        }
        return Collections.unmodifiableCollection(stacked);
!!!206210.java!!!	clear() : void
        mIfaceName = null;
        mLinkAddresses.clear();
        mDnses.clear();
        mDomains = null;
        mRoutes.clear();
        mHttpProxy = null;
        mStackedLinks.clear();
        mMtu = 0;
!!!206338.java!!!	describeContents() : int
        return 0;
!!!206466.java!!!	toString() : String
        String ifaceName = (mIfaceName == null ? "" : "InterfaceName: " + mIfaceName + " ");

        String linkAddresses = "LinkAddresses: [";
        for (LinkAddress addr : mLinkAddresses) linkAddresses += addr.toString() + ",";
        linkAddresses += "] ";

        String dns = "DnsAddresses: [";
        for (InetAddress addr : mDnses) dns += addr.getHostAddress() + ",";
        dns += "] ";

        String domainName = "Domains: " + mDomains;

        String mtu = "MTU: " + mMtu;

        String routes = " Routes: [";
        for (RouteInfo route : mRoutes) routes += route.toString() + ",";
        routes += "] ";
        String proxy = (mHttpProxy == null ? "" : "HttpProxy: " + mHttpProxy.toString() + " ");

        String stacked = "";
        if (mStackedLinks.values().size() > 0) {
            stacked += " Stacked: [";
            for (LinkProperties link: mStackedLinks.values()) {
                stacked += " [" + link.toString() + " ],";
            }
            stacked += "] ";
        }
        return "{" + ifaceName + linkAddresses + routes + dns + domainName + mtu
            + proxy + stacked + "}";
!!!206594.java!!!	hasIPv4Address() : boolean
        for (LinkAddress address : mLinkAddresses) {
          if (address.getAddress() instanceof Inet4Address) {
            return true;
          }
        }
        return false;
!!!206722.java!!!	hasIPv6Address() : boolean
        for (LinkAddress address : mLinkAddresses) {
          if (address.getAddress() instanceof Inet6Address) {
            return true;
          }
        }
        return false;
!!!206850.java!!!	isIdenticalInterfaceName(inout target : LinkProperties) : boolean
        return TextUtils.equals(getInterfaceName(), target.getInterfaceName());
!!!206978.java!!!	isIdenticalAddresses(inout target : LinkProperties) : boolean
        Collection<InetAddress> targetAddresses = target.getAddresses();
        Collection<InetAddress> sourceAddresses = getAddresses();
        return (sourceAddresses.size() == targetAddresses.size()) ?
                    sourceAddresses.containsAll(targetAddresses) : false;
!!!207106.java!!!	isIdenticalDnses(inout target : LinkProperties) : boolean
        Collection<InetAddress> targetDnses = target.getDnses();
        String targetDomains = target.getDomains();
        if (mDomains == null) {
            if (targetDomains != null) return false;
        } else {
            if (mDomains.equals(targetDomains) == false) return false;
        }
        return (mDnses.size() == targetDnses.size()) ?
                    mDnses.containsAll(targetDnses) : false;
!!!207234.java!!!	isIdenticalRoutes(inout target : LinkProperties) : boolean
        Collection<RouteInfo> targetRoutes = target.getRoutes();
        return (mRoutes.size() == targetRoutes.size()) ?
                    mRoutes.containsAll(targetRoutes) : false;
!!!207362.java!!!	isIdenticalHttpProxy(inout target : LinkProperties) : boolean
        return getHttpProxy() == null ? target.getHttpProxy() == null :
                    getHttpProxy().equals(target.getHttpProxy());
!!!207490.java!!!	isIdenticalStackedLinks(inout target : LinkProperties) : boolean
        if (!mStackedLinks.keySet().equals(target.mStackedLinks.keySet())) {
            return false;
        }
        for (LinkProperties stacked : mStackedLinks.values()) {
            // Hashtable values can never be null.
            String iface = stacked.getInterfaceName();
            if (!stacked.equals(target.mStackedLinks.get(iface))) {
                return false;
            }
        }
        return true;
!!!207618.java!!!	isIdenticalMtu(inout target : LinkProperties) : boolean
        return getMtu() == target.getMtu();
!!!207746.java!!!	equals(inout obj : Object) : boolean
        if (this == obj) return true;

        if (!(obj instanceof LinkProperties)) return false;

        LinkProperties target = (LinkProperties) obj;

        return isIdenticalInterfaceName(target) &&
                isIdenticalAddresses(target) &&
                isIdenticalDnses(target) &&
                isIdenticalRoutes(target) &&
                isIdenticalHttpProxy(target) &&
                isIdenticalStackedLinks(target) &&
                isIdenticalMtu(target);
!!!207874.java!!!	compareAddresses(inout target : LinkProperties) : LinkProperties::CompareResult
        /*
         * Duplicate the LinkAddresses into removed, we will be removing
         * address which are common between mLinkAddresses and target
         * leaving the addresses that are different. And address which
         * are in target but not in mLinkAddresses are placed in the
         * addedAddresses.
         */
        CompareResult<LinkAddress> result = new CompareResult<LinkAddress>();
        result.removed = new ArrayList<LinkAddress>(mLinkAddresses);
        result.added.clear();
        if (target != null) {
            for (LinkAddress newAddress : target.getLinkAddresses()) {
                if (! result.removed.remove(newAddress)) {
                    result.added.add(newAddress);
                }
            }
        }
        return result;
!!!208002.java!!!	compareDnses(inout target : LinkProperties) : LinkProperties::CompareResult
        /*
         * Duplicate the InetAddresses into removed, we will be removing
         * dns address which are common between mDnses and target
         * leaving the addresses that are different. And dns address which
         * are in target but not in mDnses are placed in the
         * addedAddresses.
         */
        CompareResult<InetAddress> result = new CompareResult<InetAddress>();

        result.removed = new ArrayList<InetAddress>(mDnses);
        result.added.clear();
        if (target != null) {
            for (InetAddress newAddress : target.getDnses()) {
                if (! result.removed.remove(newAddress)) {
                    result.added.add(newAddress);
                }
            }
        }
        return result;
!!!208130.java!!!	compareAllRoutes(inout target : LinkProperties) : LinkProperties::CompareResult
        /*
         * Duplicate the RouteInfos into removed, we will be removing
         * routes which are common between mRoutes and target
         * leaving the routes that are different. And route address which
         * are in target but not in mRoutes are placed in added.
         */
        CompareResult<RouteInfo> result = new CompareResult<RouteInfo>();

        result.removed = getAllRoutes();
        result.added.clear();
        if (target != null) {
            for (RouteInfo r : target.getAllRoutes()) {
                if (! result.removed.remove(r)) {
                    result.added.add(r);
                }
            }
        }
        return result;
!!!208258.java!!!	hashCode() : int
        return ((null == mIfaceName) ? 0 : mIfaceName.hashCode()
                + mLinkAddresses.size() * 31
                + mDnses.size() * 37
                + ((null == mDomains) ? 0 : mDomains.hashCode())
                + mRoutes.size() * 41
                + ((null == mHttpProxy) ? 0 : mHttpProxy.hashCode())
                + mStackedLinks.hashCode() * 47)
                + mMtu * 51;
!!!208386.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeString(getInterfaceName());
        dest.writeInt(mLinkAddresses.size());
        for(LinkAddress linkAddress : mLinkAddresses) {
            dest.writeParcelable(linkAddress, flags);
        }

        dest.writeInt(mDnses.size());
        for(InetAddress d : mDnses) {
            dest.writeByteArray(d.getAddress());
        }
        dest.writeString(mDomains);
        dest.writeInt(mMtu);
        dest.writeInt(mRoutes.size());
        for(RouteInfo route : mRoutes) {
            dest.writeParcelable(route, flags);
        }

        if (mHttpProxy != null) {
            dest.writeByte((byte)1);
            dest.writeParcelable(mHttpProxy, flags);
        } else {
            dest.writeByte((byte)0);
        }
        ArrayList<LinkProperties> stackedLinks = new ArrayList(mStackedLinks.values());
        dest.writeList(stackedLinks);

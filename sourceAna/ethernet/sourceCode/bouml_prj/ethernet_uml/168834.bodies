class Looper
!!!486530.java!!!	prepare() : void
        prepare(true);
!!!486658.java!!!	prepare(inout quitAllowed : boolean) : void
        if (sThreadLocal.get() != null) {
            throw new RuntimeException("Only one Looper may be created per thread");
        }
        sThreadLocal.set(new Looper(quitAllowed));
!!!486786.java!!!	prepareMainLooper() : void
        prepare(false);
        synchronized (Looper.class) {
            if (sMainLooper != null) {
                throw new IllegalStateException("The main Looper has already been prepared.");
            }
            sMainLooper = myLooper();
        }
!!!486914.java!!!	getMainLooper() : Looper
        synchronized (Looper.class) {
            return sMainLooper;
        }
!!!487042.java!!!	loop() : void
        final Looper me = myLooper();
        if (me == null) {
            throw new RuntimeException("No Looper; Looper.prepare() wasn't called on this thread.");
        }
        final MessageQueue queue = me.mQueue;

        // Make sure the identity of this thread is that of the local process,
        // and keep track of what that identity token actually is.
        Binder.clearCallingIdentity();
        final long ident = Binder.clearCallingIdentity();

        for (;;) {
            Message msg = queue.next(); // might block
            if (msg == null) {
                // No message indicates that the message queue is quitting.
                return;
            }

            // This must be in a local variable, in case a UI event sets the logger
            Printer logging = me.mLogging;
            if (logging != null) {
                logging.println(">>>>> Dispatching to " + msg.target + " " +
                        msg.callback + ": " + msg.what);
            }

            msg.target.dispatchMessage(msg);

            if (logging != null) {
                logging.println("<<<<< Finished to " + msg.target + " " + msg.callback);
            }

            // Make sure that during the course of dispatching the
            // identity of the thread wasn't corrupted.
            final long newIdent = Binder.clearCallingIdentity();
            if (ident != newIdent) {
                Log.wtf(TAG, "Thread identity changed from 0x"
                        + Long.toHexString(ident) + " to 0x"
                        + Long.toHexString(newIdent) + " while dispatching to "
                        + msg.target.getClass().getName() + " "
                        + msg.callback + " what=" + msg.what);
            }

            msg.recycle();
        }
!!!487170.java!!!	myLooper() : Looper
        return sThreadLocal.get();
!!!487298.java!!!	setMessageLogging(inout printer : Printer) : void
        mLogging = printer;
!!!487426.java!!!	myQueue() : MessageQueue
        return myLooper().mQueue;
!!!487554.java!!!	Looper(inout quitAllowed : boolean)
        mQueue = new MessageQueue(quitAllowed);
        mThread = Thread.currentThread();
!!!487682.java!!!	isCurrentThread() : boolean
        return Thread.currentThread() == mThread;
!!!487810.java!!!	quit() : void
        mQueue.quit(false);
!!!487938.java!!!	quitSafely() : void
        mQueue.quit(true);
!!!488066.java!!!	postSyncBarrier() : int
        return mQueue.enqueueSyncBarrier(SystemClock.uptimeMillis());
!!!488194.java!!!	removeSyncBarrier(in token : int) : void
        mQueue.removeSyncBarrier(token);
!!!488322.java!!!	getThread() : Thread
        return mThread;
!!!488450.java!!!	getQueue() : MessageQueue
        return mQueue;
!!!488578.java!!!	isIdling() : boolean
        return mQueue.isIdling();
!!!488706.java!!!	dump(inout pw : Printer, in prefix : String) : void
        pw.println(prefix + toString());
        mQueue.dump(pw, prefix + "  ");
!!!488834.java!!!	toString() : String
        return "Looper (" + mThread.getName() + ", tid " + mThread.getId()
                + ") {" + Integer.toHexString(System.identityHashCode(this)) + "}";

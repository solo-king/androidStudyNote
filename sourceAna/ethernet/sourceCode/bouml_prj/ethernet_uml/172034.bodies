class HistoryItem
!!!417410.java!!!	HistoryItem(in time : long, inout src : Parcel)
            this.time = time;
            readFromParcel(src);
!!!417538.java!!!	describeContents() : int
            return 0;
!!!417666.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
            dest.writeLong(time);
            int bat = (((int)cmd)&0xff)
                    | ((((int)batteryLevel)<<8)&0xff00)
                    | ((((int)batteryStatus)<<16)&0xf0000)
                    | ((((int)batteryHealth)<<20)&0xf00000)
                    | ((((int)batteryPlugType)<<24)&0xf000000);
            dest.writeInt(bat);
            bat = (((int)batteryTemperature)&0xffff)
                    | ((((int)batteryVoltage)<<16)&0xffff0000);
            dest.writeInt(bat);
            dest.writeInt(states);
!!!417794.java!!!	readFromParcel(inout src : Parcel) : void
            int bat = src.readInt();
            cmd = (byte)(bat&0xff);
            batteryLevel = (byte)((bat>>8)&0xff);
            batteryStatus = (byte)((bat>>16)&0xf);
            batteryHealth = (byte)((bat>>20)&0xf);
            batteryPlugType = (byte)((bat>>24)&0xf);
            bat = src.readInt();
            batteryTemperature = (char)(bat&0xffff);
            batteryVoltage = (char)((bat>>16)&0xffff);
            states = src.readInt();
!!!417922.java!!!	writeDelta(inout dest : Parcel, inout last : BatteryStats::HistoryItem) : void
            if (last == null || last.cmd != CMD_UPDATE) {
                dest.writeInt(DELTA_TIME_ABS);
                writeToParcel(dest, 0);
                return;
            }
            
            final long deltaTime = time - last.time;
            final int lastBatteryLevelInt = last.buildBatteryLevelInt();
            final int lastStateInt = last.buildStateInt();
            
            int deltaTimeToken;
            if (deltaTime < 0 || deltaTime > Integer.MAX_VALUE) {
                deltaTimeToken = DELTA_TIME_LONG;
            } else if (deltaTime >= DELTA_TIME_ABS) {
                deltaTimeToken = DELTA_TIME_INT;
            } else {
                deltaTimeToken = (int)deltaTime;
            }
            int firstToken = deltaTimeToken
                    | (cmd<<DELTA_CMD_SHIFT)
                    | (states&DELTA_STATE_MASK);
            final int batteryLevelInt = buildBatteryLevelInt();
            final boolean batteryLevelIntChanged = batteryLevelInt != lastBatteryLevelInt;
            if (batteryLevelIntChanged) {
                firstToken |= DELTA_BATTERY_LEVEL_FLAG;
            }
            final int stateInt = buildStateInt();
            final boolean stateIntChanged = stateInt != lastStateInt;
            if (stateIntChanged) {
                firstToken |= DELTA_STATE_FLAG;
            }
            dest.writeInt(firstToken);
            if (DEBUG) Slog.i(TAG, "WRITE DELTA: firstToken=0x" + Integer.toHexString(firstToken)
                    + " deltaTime=" + deltaTime);
            
            if (deltaTimeToken >= DELTA_TIME_INT) {
                if (deltaTimeToken == DELTA_TIME_INT) {
                    if (DEBUG) Slog.i(TAG, "WRITE DELTA: int deltaTime=" + (int)deltaTime);
                    dest.writeInt((int)deltaTime);
                } else {
                    if (DEBUG) Slog.i(TAG, "WRITE DELTA: long deltaTime=" + deltaTime);
                    dest.writeLong(deltaTime);
                }
            }
            if (batteryLevelIntChanged) {
                dest.writeInt(batteryLevelInt);
                if (DEBUG) Slog.i(TAG, "WRITE DELTA: batteryToken=0x"
                        + Integer.toHexString(batteryLevelInt)
                        + " batteryLevel=" + batteryLevel
                        + " batteryTemp=" + (int)batteryTemperature
                        + " batteryVolt=" + (int)batteryVoltage);
            }
            if (stateIntChanged) {
                dest.writeInt(stateInt);
                if (DEBUG) Slog.i(TAG, "WRITE DELTA: stateToken=0x"
                        + Integer.toHexString(stateInt)
                        + " batteryStatus=" + batteryStatus
                        + " batteryHealth=" + batteryHealth
                        + " batteryPlugType=" + batteryPlugType
                        + " states=0x" + Integer.toHexString(states));
            }
!!!418050.java!!!	buildBatteryLevelInt() : int
            return ((((int)batteryLevel)<<24)&0xff000000)
                    | ((((int)batteryTemperature)<<14)&0x00ffc000)
                    | (((int)batteryVoltage)&0x00003fff);
!!!418178.java!!!	buildStateInt() : int
            return ((((int)batteryStatus)<<28)&0xf0000000)
                    | ((((int)batteryHealth)<<24)&0x0f000000)
                    | ((((int)batteryPlugType)<<22)&0x00c00000)
                    | (states&(~DELTA_STATE_MASK));
!!!418306.java!!!	readDelta(inout src : Parcel) : void
            int firstToken = src.readInt();
            int deltaTimeToken = firstToken&DELTA_TIME_MASK;
            cmd = (byte)((firstToken>>DELTA_CMD_SHIFT)&DELTA_CMD_MASK);
            if (DEBUG) Slog.i(TAG, "READ DELTA: firstToken=0x" + Integer.toHexString(firstToken)
                    + " deltaTimeToken=" + deltaTimeToken);
            
            if (deltaTimeToken < DELTA_TIME_ABS) {
                time += deltaTimeToken;
            } else if (deltaTimeToken == DELTA_TIME_ABS) {
                time = src.readLong();
                readFromParcel(src);
                return;
            } else if (deltaTimeToken == DELTA_TIME_INT) {
                int delta = src.readInt();
                time += delta;
                if (DEBUG) Slog.i(TAG, "READ DELTA: time delta=" + delta + " new time=" + time);
            } else {
                long delta = src.readLong();
                if (DEBUG) Slog.i(TAG, "READ DELTA: time delta=" + delta + " new time=" + time);
                time += delta;
            }
            
            if ((firstToken&DELTA_BATTERY_LEVEL_FLAG) != 0) {
                int batteryLevelInt = src.readInt();
                batteryLevel = (byte)((batteryLevelInt>>24)&0xff);
                batteryTemperature = (char)((batteryLevelInt>>14)&0x3ff);
                batteryVoltage = (char)(batteryLevelInt&0x3fff);
                if (DEBUG) Slog.i(TAG, "READ DELTA: batteryToken=0x"
                        + Integer.toHexString(batteryLevelInt)
                        + " batteryLevel=" + batteryLevel
                        + " batteryTemp=" + (int)batteryTemperature
                        + " batteryVolt=" + (int)batteryVoltage);
            }
            
            if ((firstToken&DELTA_STATE_FLAG) != 0) {
                int stateInt = src.readInt();
                states = (firstToken&DELTA_STATE_MASK) | (stateInt&(~DELTA_STATE_MASK));
                batteryStatus = (byte)((stateInt>>28)&0xf);
                batteryHealth = (byte)((stateInt>>24)&0xf);
                batteryPlugType = (byte)((stateInt>>22)&0x3);
                if (DEBUG) Slog.i(TAG, "READ DELTA: stateToken=0x"
                        + Integer.toHexString(stateInt)
                        + " batteryStatus=" + batteryStatus
                        + " batteryHealth=" + batteryHealth
                        + " batteryPlugType=" + batteryPlugType
                        + " states=0x" + Integer.toHexString(states));
            } else {
                states = (firstToken&DELTA_STATE_MASK) | (states&(~DELTA_STATE_MASK));
            }
!!!418434.java!!!	clear() : void
            time = 0;
            cmd = CMD_NULL;
            batteryLevel = 0;
            batteryStatus = 0;
            batteryHealth = 0;
            batteryPlugType = 0;
            batteryTemperature = 0;
            batteryVoltage = 0;
            states = 0;
!!!418562.java!!!	setTo(inout o : BatteryStats::HistoryItem) : void
            time = o.time;
            cmd = o.cmd;
            batteryLevel = o.batteryLevel;
            batteryStatus = o.batteryStatus;
            batteryHealth = o.batteryHealth;
            batteryPlugType = o.batteryPlugType;
            batteryTemperature = o.batteryTemperature;
            batteryVoltage = o.batteryVoltage;
            states = o.states;
!!!418690.java!!!	setTo(in time : long, in cmd : byte, inout o : BatteryStats::HistoryItem) : void
            this.time = time;
            this.cmd = cmd;
            batteryLevel = o.batteryLevel;
            batteryStatus = o.batteryStatus;
            batteryHealth = o.batteryHealth;
            batteryPlugType = o.batteryPlugType;
            batteryTemperature = o.batteryTemperature;
            batteryVoltage = o.batteryVoltage;
            states = o.states;
!!!418818.java!!!	same(inout o : BatteryStats::HistoryItem) : boolean
            return batteryLevel == o.batteryLevel
                    && batteryStatus == o.batteryStatus
                    && batteryHealth == o.batteryHealth
                    && batteryPlugType == o.batteryPlugType
                    && batteryTemperature == o.batteryTemperature
                    && batteryVoltage == o.batteryVoltage
                    && states == o.states;

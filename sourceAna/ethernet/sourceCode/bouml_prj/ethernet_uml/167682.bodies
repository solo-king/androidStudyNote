class Message
!!!493058.java!!!	obtain() : Message
        synchronized (sPoolSync) {
            if (sPool != null) {
                Message m = sPool;
                sPool = m.next;
                m.next = null;
                sPoolSize--;
                return m;
            }
        }
        return new Message();
!!!493186.java!!!	obtain(inout orig : Message) : Message
        Message m = obtain();
        m.what = orig.what;
        m.arg1 = orig.arg1;
        m.arg2 = orig.arg2;
        m.obj = orig.obj;
        m.replyTo = orig.replyTo;
        if (orig.data != null) {
            m.data = new Bundle(orig.data);
        }
        m.target = orig.target;
        m.callback = orig.callback;

        return m;
!!!493314.java!!!	obtain(inout h : Handler) : Message
        Message m = obtain();
        m.target = h;

        return m;
!!!493442.java!!!	obtain(inout h : Handler, inout callback : Runnable) : Message
        Message m = obtain();
        m.target = h;
        m.callback = callback;

        return m;
!!!493570.java!!!	obtain(inout h : Handler, in what : int) : Message
        Message m = obtain();
        m.target = h;
        m.what = what;

        return m;
!!!493698.java!!!	obtain(inout h : Handler, in what : int, inout obj : Object) : Message
        Message m = obtain();
        m.target = h;
        m.what = what;
        m.obj = obj;

        return m;
!!!493826.java!!!	obtain(inout h : Handler, in what : int, in arg1 : int, in arg2 : int) : Message
        Message m = obtain();
        m.target = h;
        m.what = what;
        m.arg1 = arg1;
        m.arg2 = arg2;

        return m;
!!!493954.java!!!	obtain(inout h : Handler, in what : int, in arg1 : int, in arg2 : int, inout obj : Object) : Message
        Message m = obtain();
        m.target = h;
        m.what = what;
        m.arg1 = arg1;
        m.arg2 = arg2;
        m.obj = obj;

        return m;
!!!494082.java!!!	recycle() : void
        clearForRecycle();

        synchronized (sPoolSync) {
            if (sPoolSize < MAX_POOL_SIZE) {
                next = sPool;
                sPool = this;
                sPoolSize++;
            }
        }
!!!494210.java!!!	copyFrom(inout o : Message) : void
        this.flags = o.flags & ~FLAGS_TO_CLEAR_ON_COPY_FROM;
        this.what = o.what;
        this.arg1 = o.arg1;
        this.arg2 = o.arg2;
        this.obj = o.obj;
        this.replyTo = o.replyTo;

        if (o.data != null) {
            this.data = (Bundle) o.data.clone();
        } else {
            this.data = null;
        }
!!!494338.java!!!	getWhen() : long
        return when;
!!!494466.java!!!	setTarget(inout target : Handler) : void
        this.target = target;
!!!494594.java!!!	getTarget() : Handler
        return target;
!!!494722.java!!!	getCallback() : Runnable
        return callback;
!!!494850.java!!!	getData() : Bundle
        if (data == null) {
            data = new Bundle();
        }
        
        return data;
!!!494978.java!!!	peekData() : Bundle
        return data;
!!!495106.java!!!	setData(inout data : Bundle) : void
        this.data = data;
!!!495234.java!!!	sendToTarget() : void
        target.sendMessage(this);
!!!495362.java!!!	isAsynchronous() : boolean
        return (flags & FLAG_ASYNCHRONOUS) != 0;
!!!495490.java!!!	setAsynchronous(inout async : boolean) : void
        if (async) {
            flags |= FLAG_ASYNCHRONOUS;
        } else {
            flags &= ~FLAG_ASYNCHRONOUS;
        }
!!!495618.java!!!	clearForRecycle() : void
        flags = 0;
        what = 0;
        arg1 = 0;
        arg2 = 0;
        obj = null;
        replyTo = null;
        when = 0;
        target = null;
        callback = null;
        data = null;
!!!495746.java!!!	isInUse() : boolean
        return ((flags & FLAG_IN_USE) == FLAG_IN_USE);
!!!495874.java!!!	markInUse() : void
        flags |= FLAG_IN_USE;
!!!496130.java!!!	toString() : String
        return toString(SystemClock.uptimeMillis());
!!!496258.java!!!	toString(in now : long) : String
        StringBuilder b = new StringBuilder();
        b.append("{ when=");
        TimeUtils.formatDuration(when - now, b);

        if (target != null) {
            if (callback != null) {
                b.append(" callback=");
                b.append(callback.getClass().getName());
            } else {
                b.append(" what=");
                b.append(what);
            }

            if (arg1 != 0) {
                b.append(" arg1=");
                b.append(arg1);
            }

            if (arg2 != 0) {
                b.append(" arg2=");
                b.append(arg2);
            }

            if (obj != null) {
                b.append(" obj=");
                b.append(obj);
            }

            b.append(" target=");
            b.append(target.getClass().getName());
        } else {
            b.append(" barrier=");
            b.append(arg1);
        }

        b.append(" }");
        return b.toString();
!!!496386.java!!!	describeContents() : int
        return 0;
!!!496514.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        if (callback != null) {
            throw new RuntimeException(
                "Can't marshal callbacks across processes.");
        }
        dest.writeInt(what);
        dest.writeInt(arg1);
        dest.writeInt(arg2);
        if (obj != null) {
            try {
                Parcelable p = (Parcelable)obj;
                dest.writeInt(1);
                dest.writeParcelable(p, flags);
            } catch (ClassCastException e) {
                throw new RuntimeException(
                    "Can't marshal non-Parcelable objects across processes.");
            }
        } else {
            dest.writeInt(0);
        }
        dest.writeLong(when);
        dest.writeBundle(data);
        Messenger.writeMessengerOrNullToParcel(replyTo, dest);
!!!496642.java!!!	readFromParcel(inout source : Parcel) : void
        what = source.readInt();
        arg1 = source.readInt();
        arg2 = source.readInt();
        if (source.readInt() != 0) {
            obj = source.readParcelable(getClass().getClassLoader());
        }
        when = source.readLong();
        data = source.readBundle();
        replyTo = Messenger.readMessengerOrNullFromParcel(source);

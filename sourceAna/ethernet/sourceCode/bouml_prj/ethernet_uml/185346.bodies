class Builder
!!!564354.java!!!	Builder()
                mMask = 0;
!!!564482.java!!!	Builder(inout base : StrictMode::VmPolicy)
                mMask = base.mask;
                mClassInstanceLimitNeedCow = true;
                mClassInstanceLimit = base.classInstanceLimit;
!!!564610.java!!!	setClassInstanceLimit(inout klass : Class, in instanceLimit : int) : StrictMode::VmPolicy::Builder
                if (klass == null) {
                    throw new NullPointerException("klass == null");
                }
                if (mClassInstanceLimitNeedCow) {
                    if (mClassInstanceLimit.containsKey(klass) &&
                        mClassInstanceLimit.get(klass) == instanceLimit) {
                        // no-op; don't break COW
                        return this;
                    }
                    mClassInstanceLimitNeedCow = false;
                    mClassInstanceLimit = (HashMap<Class, Integer>) mClassInstanceLimit.clone();
                } else if (mClassInstanceLimit == null) {
                    mClassInstanceLimit = new HashMap<Class, Integer>();
                }
                mMask |= DETECT_VM_INSTANCE_LEAKS;
                mClassInstanceLimit.put(klass, instanceLimit);
                return this;
!!!564738.java!!!	detectActivityLeaks() : StrictMode::VmPolicy::Builder
                return enable(DETECT_VM_ACTIVITY_LEAKS);
!!!564866.java!!!	detectAll() : StrictMode::VmPolicy::Builder
                return enable(DETECT_VM_ACTIVITY_LEAKS | DETECT_VM_CURSOR_LEAKS
                        | DETECT_VM_CLOSABLE_LEAKS | DETECT_VM_REGISTRATION_LEAKS
                        | DETECT_VM_FILE_URI_EXPOSURE);
!!!564994.java!!!	detectLeakedSqlLiteObjects() : StrictMode::VmPolicy::Builder
                return enable(DETECT_VM_CURSOR_LEAKS);
!!!565122.java!!!	detectLeakedClosableObjects() : StrictMode::VmPolicy::Builder
                return enable(DETECT_VM_CLOSABLE_LEAKS);
!!!565250.java!!!	detectLeakedRegistrationObjects() : StrictMode::VmPolicy::Builder
                return enable(DETECT_VM_REGISTRATION_LEAKS);
!!!565378.java!!!	detectFileUriExposure() : StrictMode::VmPolicy::Builder
                return enable(DETECT_VM_FILE_URI_EXPOSURE);
!!!565506.java!!!	penaltyDeath() : StrictMode::VmPolicy::Builder
                return enable(PENALTY_DEATH);
!!!565634.java!!!	penaltyLog() : StrictMode::VmPolicy::Builder
                return enable(PENALTY_LOG);
!!!565762.java!!!	penaltyDropBox() : StrictMode::VmPolicy::Builder
                return enable(PENALTY_DROPBOX);
!!!565890.java!!!	enable(in bit : int) : StrictMode::VmPolicy::Builder
                mMask |= bit;
                return this;
!!!566018.java!!!	build() : StrictMode::VmPolicy
                // If there are detection bits set but no violation bits
                // set, enable simple logging.
                if (mMask != 0 &&
                    (mMask & (PENALTY_DEATH | PENALTY_LOG |
                              PENALTY_DROPBOX | PENALTY_DIALOG)) == 0) {
                    penaltyLog();
                }
                return new VmPolicy(mMask,
                        mClassInstanceLimit != null ? mClassInstanceLimit : EMPTY_CLASS_LIMIT_MAP);

class Handler
!!!392962.java!!!	dispatchMessage(inout msg : Message) : void
        if (msg.callback != null) {
            handleCallback(msg);
        } else {
            if (mCallback != null) {
                if (mCallback.handleMessage(msg)) {
                    return;
                }
            }
            handleMessage(msg);
        }
!!!393090.java!!!	Handler()
        this(null, false);
!!!393218.java!!!	Handler(inout callback : Handler::Callback)
        this(callback, false);
!!!393346.java!!!	Handler(inout looper : Looper)
        this(looper, null, false);
!!!393474.java!!!	Handler(inout looper : Looper, inout callback : Handler::Callback)
        this(looper, callback, false);
!!!393602.java!!!	Handler(inout async : boolean)
        this(null, async);
!!!393730.java!!!	Handler(inout callback : Handler::Callback, inout async : boolean)
        if (FIND_POTENTIAL_LEAKS) {
            final Class<? extends Handler> klass = getClass();
            if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &&
                    (klass.getModifiers() & Modifier.STATIC) == 0) {
                Log.w(TAG, "The following Handler class should be static or leaks might occur: " +
                    klass.getCanonicalName());
            }
        }

        mLooper = Looper.myLooper();
        if (mLooper == null) {
            throw new RuntimeException(
                "Can't create handler inside thread that has not called Looper.prepare()");
        }
        mQueue = mLooper.mQueue;
        mCallback = callback;
        mAsynchronous = async;
!!!393858.java!!!	Handler(inout looper : Looper, inout callback : Handler::Callback, inout async : boolean)
        mLooper = looper;
        mQueue = looper.mQueue;
        mCallback = callback;
        mAsynchronous = async;
!!!393986.java!!!	getMessageName(inout message : Message) : String
        if (message.callback != null) {
            return message.callback.getClass().getName();
        }
        return "0x" + Integer.toHexString(message.what);
!!!394114.java!!!	obtainMessage() : Message
        return Message.obtain(this);
!!!394242.java!!!	obtainMessage(in what : int) : Message
        return Message.obtain(this, what);
!!!394370.java!!!	obtainMessage(in what : int, inout obj : Object) : Message
        return Message.obtain(this, what, obj);
!!!394498.java!!!	obtainMessage(in what : int, in arg1 : int, in arg2 : int) : Message
        return Message.obtain(this, what, arg1, arg2);
!!!394626.java!!!	obtainMessage(in what : int, in arg1 : int, in arg2 : int, inout obj : Object) : Message
        return Message.obtain(this, what, arg1, arg2, obj);
!!!394754.java!!!	post(inout r : Runnable) : boolean
       return  sendMessageDelayed(getPostMessage(r), 0);
!!!394882.java!!!	postAtTime(inout r : Runnable, in uptimeMillis : long) : boolean
        return sendMessageAtTime(getPostMessage(r), uptimeMillis);
!!!395010.java!!!	postAtTime(inout r : Runnable, inout token : Object, in uptimeMillis : long) : boolean
        return sendMessageAtTime(getPostMessage(r, token), uptimeMillis);
!!!395138.java!!!	postDelayed(inout r : Runnable, in delayMillis : long) : boolean
        return sendMessageDelayed(getPostMessage(r), delayMillis);
!!!395266.java!!!	postAtFrontOfQueue(inout r : Runnable) : boolean
        return sendMessageAtFrontOfQueue(getPostMessage(r));
!!!395394.java!!!	runWithScissors(in r : Runnable, in timeout : long) : boolean
        if (r == null) {
            throw new IllegalArgumentException("runnable must not be null");
        }
        if (timeout < 0) {
            throw new IllegalArgumentException("timeout must be non-negative");
        }

        if (Looper.myLooper() == mLooper) {
            r.run();
            return true;
        }

        BlockingRunnable br = new BlockingRunnable(r);
        return br.postAndWait(this, timeout);
!!!395522.java!!!	removeCallbacks(inout r : Runnable) : void
        mQueue.removeMessages(this, r, null);
!!!395650.java!!!	removeCallbacks(inout r : Runnable, inout token : Object) : void
        mQueue.removeMessages(this, r, token);
!!!395778.java!!!	sendMessage(inout msg : Message) : boolean
        return sendMessageDelayed(msg, 0);
!!!395906.java!!!	sendEmptyMessage(in what : int) : boolean
        return sendEmptyMessageDelayed(what, 0);
!!!396034.java!!!	sendEmptyMessageDelayed(in what : int, in delayMillis : long) : boolean
        Message msg = Message.obtain();
        msg.what = what;
        return sendMessageDelayed(msg, delayMillis);
!!!396162.java!!!	sendEmptyMessageAtTime(in what : int, in uptimeMillis : long) : boolean
        Message msg = Message.obtain();
        msg.what = what;
        return sendMessageAtTime(msg, uptimeMillis);
!!!396290.java!!!	sendMessageDelayed(inout msg : Message, in delayMillis : long) : boolean
        if (delayMillis < 0) {
            delayMillis = 0;
        }
        return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);
!!!396418.java!!!	sendMessageAtTime(inout msg : Message, in uptimeMillis : long) : boolean
        MessageQueue queue = mQueue;
        if (queue == null) {
            RuntimeException e = new RuntimeException(
                    this + " sendMessageAtTime() called with no mQueue");
            Log.w("Looper", e.getMessage(), e);
            return false;
        }
        return enqueueMessage(queue, msg, uptimeMillis);
!!!396546.java!!!	sendMessageAtFrontOfQueue(inout msg : Message) : boolean
        MessageQueue queue = mQueue;
        if (queue == null) {
            RuntimeException e = new RuntimeException(
                this + " sendMessageAtTime() called with no mQueue");
            Log.w("Looper", e.getMessage(), e);
            return false;
        }
        return enqueueMessage(queue, msg, 0);
!!!396674.java!!!	enqueueMessage(inout queue : MessageQueue, inout msg : Message, in uptimeMillis : long) : boolean
        msg.target = this;
        if (mAsynchronous) {
            msg.setAsynchronous(true);
        }
        return queue.enqueueMessage(msg, uptimeMillis);
!!!396802.java!!!	removeMessages(in what : int) : void
        mQueue.removeMessages(this, what, null);
!!!396930.java!!!	removeMessages(in what : int, inout object : Object) : void
        mQueue.removeMessages(this, what, object);
!!!397058.java!!!	removeCallbacksAndMessages(inout token : Object) : void
        mQueue.removeCallbacksAndMessages(this, token);
!!!397186.java!!!	hasMessages(in what : int) : boolean
        return mQueue.hasMessages(this, what, null);
!!!397314.java!!!	hasMessages(in what : int, inout object : Object) : boolean
        return mQueue.hasMessages(this, what, object);
!!!397442.java!!!	hasCallbacks(inout r : Runnable) : boolean
        return mQueue.hasMessages(this, r, null);
!!!397570.java!!!	getLooper() : Looper
        return mLooper;
!!!397698.java!!!	dump(inout pw : Printer, in prefix : String) : void
        pw.println(prefix + this + " @ " + SystemClock.uptimeMillis());
        if (mLooper == null) {
            pw.println(prefix + "looper uninitialized");
        } else {
            mLooper.dump(pw, prefix + "  ");
        }
!!!397826.java!!!	toString() : String
        return "Handler (" + getClass().getName() + ") {"
        + Integer.toHexString(System.identityHashCode(this))
        + "}";
!!!397954.java!!!	getIMessenger() : IMessenger
        synchronized (mQueue) {
            if (mMessenger != null) {
                return mMessenger;
            }
            mMessenger = new MessengerImpl();
            return mMessenger;
        }
!!!398210.java!!!	getPostMessage(inout r : Runnable) : Message
        Message m = Message.obtain();
        m.callback = r;
        return m;
!!!398338.java!!!	getPostMessage(inout r : Runnable, inout token : Object) : Message
        Message m = Message.obtain();
        m.obj = token;
        m.callback = r;
        return m;
!!!398466.java!!!	handleCallback(inout message : Message) : void
        message.callback.run();

class AsyncTask
!!!399618.java!!!	init() : void
        sHandler.getLooper();
!!!399746.java!!!	setDefaultExecutor(inout exec : Executor) : void
        sDefaultExecutor = exec;
!!!399874.java!!!	AsyncTask()
        mWorker = new WorkerRunnable<Params, Result>() {
            public Result call() throws Exception {
                mTaskInvoked.set(true);

                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);
                //noinspection unchecked
                return postResult(doInBackground(mParams));
            }
        };

        mFuture = new FutureTask<Result>(mWorker) {
            @Override
            protected void done() {
                try {
                    postResultIfNotInvoked(get());
                } catch (InterruptedException e) {
                    android.util.Log.w(LOG_TAG, e);
                } catch (ExecutionException e) {
                    throw new RuntimeException("An error occured while executing doInBackground()",
                            e.getCause());
                } catch (CancellationException e) {
                    postResultIfNotInvoked(null);
                }
            }
        };
!!!400002.java!!!	postResultIfNotInvoked(inout result : Result) : void
        final boolean wasTaskInvoked = mTaskInvoked.get();
        if (!wasTaskInvoked) {
            postResult(result);
        }
!!!400130.java!!!	postResult(inout result : Result) : Result
        @SuppressWarnings("unchecked")
        Message message = sHandler.obtainMessage(MESSAGE_POST_RESULT,
                new AsyncTaskResult<Result>(this, result));
        message.sendToTarget();
        return result;
!!!400258.java!!!	getStatus() : AsyncTask::Status
        return mStatus;
!!!400898.java!!!	onCancelled(inout result : Result) : void
        onCancelled();
!!!401154.java!!!	isCancelled() : boolean
        return mCancelled.get();
!!!401282.java!!!	cancel(inout mayInterruptIfRunning : boolean) : boolean
        mCancelled.set(true);
        return mFuture.cancel(mayInterruptIfRunning);
!!!401410.java!!!	get() : Result
        return mFuture.get();
!!!401538.java!!!	get(in timeout : long, inout unit : TimeUnit) : Result
        return mFuture.get(timeout, unit);
!!!401666.java!!!	execute(inout  : Params...params) : AsyncTask
        return executeOnExecutor(sDefaultExecutor, params);
!!!401794.java!!!	executeOnExecutor(inout exec : Executor, inout  : Params...params) : AsyncTask
        if (mStatus != Status.PENDING) {
            switch (mStatus) {
                case RUNNING:
                    throw new IllegalStateException("Cannot execute task:"
                            + " the task is already running.");
                case FINISHED:
                    throw new IllegalStateException("Cannot execute task:"
                            + " the task has already been executed "
                            + "(a task can be executed only once)");
            }
        }

        mStatus = Status.RUNNING;

        onPreExecute();

        mWorker.mParams = params;
        exec.execute(mFuture);

        return this;
!!!401922.java!!!	execute(inout runnable : Runnable) : void
        sDefaultExecutor.execute(runnable);
!!!402050.java!!!	publishProgress(inout  : Progress...values) : void
        if (!isCancelled()) {
            sHandler.obtainMessage(MESSAGE_POST_PROGRESS,
                    new AsyncTaskResult<Progress>(this, values)).sendToTarget();
        }
!!!402178.java!!!	finish(inout result : Result) : void
        if (isCancelled()) {
            onCancelled(result);
        } else {
            onPostExecute(result);
        }
        mStatus = Status.FINISHED;

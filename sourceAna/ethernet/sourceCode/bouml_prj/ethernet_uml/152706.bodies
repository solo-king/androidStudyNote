class ArpPeer
!!!324994.java!!!	ArpPeer(in interfaceName : String, inout myAddr : InetAddress, in mac : String, inout peer : InetAddress)
        mInterfaceName = interfaceName;
        mMyAddr = myAddr;

        if (mac != null) {
            for (int i = 0; i < MAC_ADDR_LENGTH; i++) {
                mMyMac[i] = (byte) Integer.parseInt(mac.substring(
                            i*3, (i*3) + 2), 16);
            }
        }

        if (myAddr instanceof Inet6Address || peer instanceof Inet6Address) {
            throw new IllegalArgumentException("IPv6 unsupported");
        }

        mPeer = peer;
        L2_BROADCAST = new byte[MAC_ADDR_LENGTH];
        Arrays.fill(L2_BROADCAST, (byte) 0xFF);

        mSocket = new RawSocket(mInterfaceName, RawSocket.ETH_P_ARP);
!!!325122.java!!!	doArp(in timeoutMillis : int) : byte
        ByteBuffer buf = ByteBuffer.allocate(MAX_LENGTH);
        byte[] desiredIp = mPeer.getAddress();
        long timeout = SystemClock.elapsedRealtime() + timeoutMillis;

        // construct ARP request packet, using a ByteBuffer as a
        // convenient container
        buf.clear();
        buf.order(ByteOrder.BIG_ENDIAN);

        buf.putShort((short) ETHERNET_TYPE); // Ethernet type, 16 bits
        buf.putShort(RawSocket.ETH_P_IP); // Protocol type IP, 16 bits
        buf.put((byte)MAC_ADDR_LENGTH);  // MAC address length, 6 bytes
        buf.put((byte)IPV4_LENGTH);  // IPv4 protocol size
        buf.putShort((short) 1); // ARP opcode 1: 'request'
        buf.put(mMyMac);        // six bytes: sender MAC
        buf.put(mMyAddr.getAddress());  // four bytes: sender IP address
        buf.put(new byte[MAC_ADDR_LENGTH]); // target MAC address: unknown
        buf.put(desiredIp); // target IP address, 4 bytes
        buf.flip();
        mSocket.write(L2_BROADCAST, buf.array(), 0, buf.limit());

        byte[] recvBuf = new byte[MAX_LENGTH];

        while (SystemClock.elapsedRealtime() < timeout) {
            long duration = (long) timeout - SystemClock.elapsedRealtime();
            int readLen = mSocket.read(recvBuf, 0, recvBuf.length, -1,
                (int) duration);

            // Verify packet details. see RFC 826
            if ((readLen >= ARP_LENGTH) // trailing bytes at times
                && (recvBuf[0] == 0) && (recvBuf[1] == ETHERNET_TYPE) // type Ethernet
                && (recvBuf[2] == 8) && (recvBuf[3] == 0) // protocol IP
                && (recvBuf[4] == MAC_ADDR_LENGTH) // mac length
                && (recvBuf[5] == IPV4_LENGTH) // IPv4 protocol size
                && (recvBuf[6] == 0) && (recvBuf[7] == 2) // ARP reply
                // verify desired IP address
                && (recvBuf[14] == desiredIp[0]) && (recvBuf[15] == desiredIp[1])
                && (recvBuf[16] == desiredIp[2]) && (recvBuf[17] == desiredIp[3]))
            {
                // looks good.  copy out the MAC
                byte[] result = new byte[MAC_ADDR_LENGTH];
                System.arraycopy(recvBuf, 8, result, 0, MAC_ADDR_LENGTH);
                return result;
            }
        }

        return null;
!!!325250.java!!!	doArp(in myMacAddress : String, inout linkProperties : LinkProperties, in timeoutMillis : int, in numArpPings : int, in minArpResponses : int) : boolean
        String interfaceName = linkProperties.getInterfaceName();
        InetAddress inetAddress = null;
        InetAddress gateway = null;
        boolean success;

        for (LinkAddress la : linkProperties.getLinkAddresses()) {
            inetAddress = la.getAddress();
            break;
        }

        for (RouteInfo route : linkProperties.getRoutes()) {
            gateway = route.getGateway();
            break;
        }

        try {
            ArpPeer peer = new ArpPeer(interfaceName, inetAddress, myMacAddress, gateway);
            int responses = 0;
            for (int i=0; i < numArpPings; i++) {
                if(peer.doArp(timeoutMillis) != null) responses++;
            }
            if (DBG) Log.d(TAG, "ARP test result: " + responses + "/" + numArpPings);
            success = (responses >= minArpResponses);
            peer.close();
        } catch (SocketException se) {
            //Consider an Arp socket creation issue as a successful Arp
            //test to avoid any wifi connectivity issues
            Log.e(TAG, "ARP test initiation failure: " + se);
            success = true;
        }
        return success;
!!!325378.java!!!	close() : void
        try {
            mSocket.close();
        } catch (IOException ex) {
        }

class Parser
!!!893442.java!!!	Parser(in parseState : int, inout block : XmlBlock)
            mParseState = parseState;
            mBlock = block;
            block.mOpenCount++;
!!!893570.java!!!	setFeature(in name : String, inout state : boolean) : void
            if (FEATURE_PROCESS_NAMESPACES.equals(name) && state) {
                return;
            }
            if (FEATURE_REPORT_NAMESPACE_ATTRIBUTES.equals(name) && state) {
                return;
            }
            throw new XmlPullParserException("Unsupported feature: " + name);
!!!893698.java!!!	getFeature(in name : String) : boolean
            if (FEATURE_PROCESS_NAMESPACES.equals(name)) {
                return true;
            }
            if (FEATURE_REPORT_NAMESPACE_ATTRIBUTES.equals(name)) {
                return true;
            }
            return false;
!!!893826.java!!!	setProperty(in name : String, inout value : Object) : void
            throw new XmlPullParserException("setProperty() not supported");
!!!893954.java!!!	getProperty(in name : String) : Object
            return null;
!!!894082.java!!!	setInput(inout in : Reader) : void
            throw new XmlPullParserException("setInput() not supported");
!!!894210.java!!!	setInput(inout inputStream : InputStream, in inputEncoding : String) : void
            throw new XmlPullParserException("setInput() not supported");
!!!894338.java!!!	defineEntityReplacementText(in entityName : String, in replacementText : String) : void
            throw new XmlPullParserException("defineEntityReplacementText() not supported");
!!!894466.java!!!	getNamespacePrefix(in pos : int) : String
            throw new XmlPullParserException("getNamespacePrefix() not supported");
!!!894594.java!!!	getInputEncoding() : String
            return null;
!!!894722.java!!!	getNamespace(in prefix : String) : String
            throw new RuntimeException("getNamespace() not supported");
!!!894850.java!!!	getNamespaceCount(in depth : int) : int
            throw new XmlPullParserException("getNamespaceCount() not supported");
!!!894978.java!!!	getPositionDescription() : String
            return "Binary XML file line #" + getLineNumber();
!!!895106.java!!!	getNamespaceUri(in pos : int) : String
            throw new XmlPullParserException("getNamespaceUri() not supported");
!!!895234.java!!!	getColumnNumber() : int
            return -1;
!!!895362.java!!!	getDepth() : int
            return mDepth;
!!!895490.java!!!	getText() : String
            int id = nativeGetText(mParseState);
            return id >= 0 ? mStrings.get(id).toString() : null;
!!!895618.java!!!	getLineNumber() : int
            return nativeGetLineNumber(mParseState);
!!!895746.java!!!	getEventType() : int
            return mEventType;
!!!895874.java!!!	isWhitespace() : boolean
            // whitespace was stripped by aapt.
            return false;
!!!896002.java!!!	getPrefix() : String
            throw new RuntimeException("getPrefix not supported");
!!!896130.java!!!	getTextCharacters(inout holderForStartAndLength : int) : char
            String txt = getText();
            char[] chars = null;
            if (txt != null) {
                holderForStartAndLength[0] = 0;
                holderForStartAndLength[1] = txt.length();
                chars = new char[txt.length()];
                txt.getChars(0, txt.length(), chars, 0);
            }
            return chars;
!!!896258.java!!!	getNamespace() : String
            int id = nativeGetNamespace(mParseState);
            return id >= 0 ? mStrings.get(id).toString() : "";
!!!896386.java!!!	getName() : String
            int id = nativeGetName(mParseState);
            return id >= 0 ? mStrings.get(id).toString() : null;
!!!896514.java!!!	getAttributeNamespace(in index : int) : String
            int id = nativeGetAttributeNamespace(mParseState, index);
            if (DEBUG) System.out.println("getAttributeNamespace of " + index + " = " + id);
            if (id >= 0) return mStrings.get(id).toString();
            else if (id == -1) return "";
            throw new IndexOutOfBoundsException(String.valueOf(index));
!!!896642.java!!!	getAttributeName(in index : int) : String
            int id = nativeGetAttributeName(mParseState, index);
            if (DEBUG) System.out.println("getAttributeName of " + index + " = " + id);
            if (id >= 0) return mStrings.get(id).toString();
            throw new IndexOutOfBoundsException(String.valueOf(index));
!!!896770.java!!!	getAttributePrefix(in index : int) : String
            throw new RuntimeException("getAttributePrefix not supported");
!!!896898.java!!!	isEmptyElementTag() : boolean
            // XXX Need to detect this.
            return false;
!!!897026.java!!!	getAttributeCount() : int
            return mEventType == START_TAG ? nativeGetAttributeCount(mParseState) : -1;
!!!897154.java!!!	getAttributeValue(in index : int) : String
            int id = nativeGetAttributeStringValue(mParseState, index);
            if (DEBUG) System.out.println("getAttributeValue of " + index + " = " + id);
            if (id >= 0) return mStrings.get(id).toString();

            // May be some other type...  check and try to convert if so.
            int t = nativeGetAttributeDataType(mParseState, index);
            if (t == TypedValue.TYPE_NULL) {
                throw new IndexOutOfBoundsException(String.valueOf(index));
            }

            int v = nativeGetAttributeData(mParseState, index);
            return TypedValue.coerceToString(t, v);
!!!897282.java!!!	getAttributeType(in index : int) : String
            return "CDATA";
!!!897410.java!!!	isAttributeDefault(in index : int) : boolean
            return false;
!!!897538.java!!!	nextToken() : int
            return next();
!!!897666.java!!!	getAttributeValue(in namespace : String, in name : String) : String
            int idx = nativeGetAttributeIndex(mParseState, namespace, name);
            if (idx >= 0) {
                if (DEBUG) System.out.println("getAttributeName of "
                        + namespace + ":" + name + " index = " + idx);
                if (DEBUG) System.out.println(
                        "Namespace=" + getAttributeNamespace(idx)
                        + "Name=" + getAttributeName(idx)
                        + ", Value=" + getAttributeValue(idx));
                return getAttributeValue(idx);
            }
            return null;
!!!897794.java!!!	next() : int
            if (!mStarted) {
                mStarted = true;
                return START_DOCUMENT;
            }
            if (mParseState == 0) {
                return END_DOCUMENT;
            }
            int ev = nativeNext(mParseState);
            if (mDecNextDepth) {
                mDepth--;
                mDecNextDepth = false;
            }
            switch (ev) {
            case START_TAG:
                mDepth++;
                break;
            case END_TAG:
                mDecNextDepth = true;
                break;
            }
            mEventType = ev;
            if (ev == END_DOCUMENT) {
                // Automatically close the parse when we reach the end of
                // a document, since the standard XmlPullParser interface
                // doesn't have such an API so most clients will leave us
                // dangling.
                close();
            }
            return ev;
!!!897922.java!!!	require(in type : int, in namespace : String, in name : String) : void
            if (type != getEventType()
                || (namespace != null && !namespace.equals( getNamespace () ) )
                || (name != null && !name.equals( getName() ) ) )
                throw new XmlPullParserException( "expected "+ TYPES[ type ]+getPositionDescription());
!!!898050.java!!!	nextText() : String
            if(getEventType() != START_TAG) {
               throw new XmlPullParserException(
                 getPositionDescription()
                 + ": parser must be on START_TAG to read next text", this, null);
            }
            int eventType = next();
            if(eventType == TEXT) {
               String result = getText();
               eventType = next();
               if(eventType != END_TAG) {
                 throw new XmlPullParserException(
                    getPositionDescription()
                    + ": event TEXT it must be immediately followed by END_TAG", this, null);
                }
                return result;
            } else if(eventType == END_TAG) {
               return "";
            } else {
               throw new XmlPullParserException(
                 getPositionDescription()
                 + ": parser must be on START_TAG or TEXT to read text", this, null);
            }
!!!898178.java!!!	nextTag() : int
            int eventType = next();
            if(eventType == TEXT && isWhitespace()) {   // skip whitespace
               eventType = next();
            }
            if (eventType != START_TAG && eventType != END_TAG) {
               throw new XmlPullParserException(
                   getPositionDescription() 
                   + ": expected start or end tag", this, null);
            }
            return eventType;
!!!898306.java!!!	getAttributeNameResource(in index : int) : int
            return nativeGetAttributeResource(mParseState, index);
!!!898434.java!!!	getAttributeListValue(in namespace : String, in attribute : String, inout options : String, in defaultValue : int) : int
            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
            if (idx >= 0) {
                return getAttributeListValue(idx, options, defaultValue);
            }
            return defaultValue;
!!!898562.java!!!	getAttributeBooleanValue(in namespace : String, in attribute : String, inout defaultValue : boolean) : boolean
            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
            if (idx >= 0) {
                return getAttributeBooleanValue(idx, defaultValue);
            }
            return defaultValue;
!!!898690.java!!!	getAttributeResourceValue(in namespace : String, in attribute : String, in defaultValue : int) : int
            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
            if (idx >= 0) {
                return getAttributeResourceValue(idx, defaultValue);
            }
            return defaultValue;
!!!898818.java!!!	getAttributeIntValue(in namespace : String, in attribute : String, in defaultValue : int) : int
            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
            if (idx >= 0) {
                return getAttributeIntValue(idx, defaultValue);
            }
            return defaultValue;
!!!898946.java!!!	getAttributeUnsignedIntValue(in namespace : String, in attribute : String, in defaultValue : int) : int
            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
            if (idx >= 0) {
                return getAttributeUnsignedIntValue(idx, defaultValue);
            }
            return defaultValue;
!!!899074.java!!!	getAttributeFloatValue(in namespace : String, in attribute : String, in defaultValue : float) : float
            int idx = nativeGetAttributeIndex(mParseState, namespace, attribute);
            if (idx >= 0) {
                return getAttributeFloatValue(idx, defaultValue);
            }
            return defaultValue;
!!!899202.java!!!	getAttributeListValue(in idx : int, inout options : String, in defaultValue : int) : int
            int t = nativeGetAttributeDataType(mParseState, idx);
            int v = nativeGetAttributeData(mParseState, idx);
            if (t == TypedValue.TYPE_STRING) {
                return XmlUtils.convertValueToList(
                    mStrings.get(v), options, defaultValue);
            }
            return v;
!!!899330.java!!!	getAttributeBooleanValue(in idx : int, inout defaultValue : boolean) : boolean
            int t = nativeGetAttributeDataType(mParseState, idx);
            // Note: don't attempt to convert any other types, because
            // we want to count on appt doing the conversion for us.
            if (t >= TypedValue.TYPE_FIRST_INT &&
                t <= TypedValue.TYPE_LAST_INT) {
                return nativeGetAttributeData(mParseState, idx) != 0;
            }
            return defaultValue;
!!!899458.java!!!	getAttributeResourceValue(in idx : int, in defaultValue : int) : int
            int t = nativeGetAttributeDataType(mParseState, idx);
            // Note: don't attempt to convert any other types, because
            // we want to count on appt doing the conversion for us.
            if (t == TypedValue.TYPE_REFERENCE) {
                return nativeGetAttributeData(mParseState, idx);
            }
            return defaultValue;
!!!899586.java!!!	getAttributeIntValue(in idx : int, in defaultValue : int) : int
            int t = nativeGetAttributeDataType(mParseState, idx);
            // Note: don't attempt to convert any other types, because
            // we want to count on appt doing the conversion for us.
            if (t >= TypedValue.TYPE_FIRST_INT &&
                t <= TypedValue.TYPE_LAST_INT) {
                return nativeGetAttributeData(mParseState, idx);
            }
            return defaultValue;
!!!899714.java!!!	getAttributeUnsignedIntValue(in idx : int, in defaultValue : int) : int
            int t = nativeGetAttributeDataType(mParseState, idx);
            // Note: don't attempt to convert any other types, because
            // we want to count on appt doing the conversion for us.
            if (t >= TypedValue.TYPE_FIRST_INT &&
                t <= TypedValue.TYPE_LAST_INT) {
                return nativeGetAttributeData(mParseState, idx);
            }
            return defaultValue;
!!!899842.java!!!	getAttributeFloatValue(in idx : int, in defaultValue : float) : float
            int t = nativeGetAttributeDataType(mParseState, idx);
            // Note: don't attempt to convert any other types, because
            // we want to count on appt doing the conversion for us.
            if (t == TypedValue.TYPE_FLOAT) {
                return Float.intBitsToFloat(
                    nativeGetAttributeData(mParseState, idx));
            }
            throw new RuntimeException("not a float!");
!!!899970.java!!!	getIdAttribute() : String
            int id = nativeGetIdAttribute(mParseState);
            return id >= 0 ? mStrings.get(id).toString() : null;
!!!900098.java!!!	getClassAttribute() : String
            int id = nativeGetClassAttribute(mParseState);
            return id >= 0 ? mStrings.get(id).toString() : null;
!!!900226.java!!!	getIdAttributeResourceValue(in defaultValue : int) : int
            //todo: create and use native method
            return getAttributeResourceValue(null, "id", defaultValue);
!!!900354.java!!!	getStyleAttribute() : int
            return nativeGetStyleAttribute(mParseState);
!!!900482.java!!!	close() : void
            synchronized (mBlock) {
                if (mParseState != 0) {
                    nativeDestroyParseState(mParseState);
                    mParseState = 0;
                    mBlock.decOpenCountLocked();
                }
            }
!!!900610.java!!!	finalize() : void
            close();
!!!900738.java!!!	getPooledString(in id : int) : CharSequence
            return mStrings.get(id);

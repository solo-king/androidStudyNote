class EthernetConfigDialog
!!!128002.java!!!	EthernetConfigDialog(inout context : Context, inout ethManager : EthernetManager)
        super(context);
        mEthManager = ethManager;
        mEthLayer = new EthernetLayer(this, ethManager);
        mContext = context;
        buildDialogContent(context);
        setOnShowListener(this);
        setOnDismissListener(this);
		enableAfterConfig();
!!!128130.java!!!	onShow(inout dialog : DialogInterface) : void
        if (localLOGV) Slog.d(TAG, "onShow");
        mEthLayer.resume();
        // soft keyboard pops up on the disabled EditText. Hide it.
        InputMethodManager imm = (InputMethodManager)mContext.getSystemService(
                Context.INPUT_METHOD_SERVICE);
        imm.hideSoftInputFromWindow(getCurrentFocus().getWindowToken(),
                InputMethodManager.HIDE_IMPLICIT_ONLY);
!!!128258.java!!!	onDismiss(inout dialog : DialogInterface) : void
        if (localLOGV) Slog.d(TAG, "onDismiss");
        mEthLayer.pause();
!!!128386.java!!!	getAddress(in addr : int) : String
        return NetworkUtils.intToInetAddress(addr).getHostAddress();
!!!128514.java!!!	buildDialogContent(inout context : Context) : int
        this.setTitle(R.string.eth_config_title);
        this.setView(mView = getLayoutInflater().inflate(R.layout.eth_configure, null));
        mDevs = (TextView) mView.findViewById(R.id.eth_dev_list_text);
        mDevList = (Spinner) mView.findViewById(R.id.eth_dev_spinner);
        mConTypeDhcp = (RadioButton) mView.findViewById(R.id.dhcp_radio);
        mConTypeManual = (RadioButton) mView.findViewById(R.id.manual_radio);
        /*add by chenqigan*/
        wan_mode_radio = (RadioButton)mView.findViewById(R.id.wan_mode_radio);
        lan_mode_radio = (RadioButton)mView.findViewById(R.id.lan_mode_radio);

        mIpaddr = (EditText)mView.findViewById(R.id.ipaddr_edit);
        mMask = (EditText)mView.findViewById(R.id.netmask_edit);
        mDns = (EditText)mView.findViewById(R.id.eth_dns_edit);
        mGw = (EditText)mView.findViewById(R.id.eth_gw_edit);

        mConTypeDhcp.setChecked(true);

        /*add by chenqigan  默认显示wan*/
        wan_mode_radio.setChecked(true);

        mConTypeManual.setChecked(false);
        mIpaddr.setEnabled(false);
        mMask.setEnabled(false);
        mDns.setEnabled(false);
        mGw.setEnabled(false);
        mConTypeManual.setOnClickListener(new RadioButton.OnClickListener() {
            public void onClick(View v) {
                mIpaddr.setEnabled(true);
                mDns.setEnabled(true);
                mGw.setEnabled(true);
                mMask.setEnabled(true);
            }
        });

        mConTypeDhcp.setOnClickListener(new RadioButton.OnClickListener() {
            public void onClick(View v) {
                mIpaddr.setEnabled(false);
                mDns.setEnabled(false);
                mGw.setEnabled(false);
                mMask.setEnabled(false);
            }
        });


        lan_mode_radio.setOnClickListener(new RadioButton.OnClickListener() {
            public void onClick(View v) {
                mIpaddr.setEnabled(false);
                mDns.setEnabled(false);
                mGw.setEnabled(false);
                mMask.setEnabled(false);
            }
        });


        this.setInverseBackgroundForced(true);
        this.setButton(BUTTON_POSITIVE, context.getText(R.string.menu_save), this);
        this.setButton(BUTTON_NEGATIVE, context.getText(R.string.menu_cancel), this);
        String[] Devs = mEthManager.getDeviceNameList();
        updateDevNameList(Devs);
        if (Devs != null) {
            if (mEthManager.isEthConfigured()) {
                String propties = Utils.getEtherProperties(mContext);
                Slog.d(TAG, "Properties: " + propties);

                mEthInfo = mEthManager.getSavedEthConfig();
                for (int i = 0 ; i < Devs.length; i++) {
                    if (Devs[i].equals(mEthInfo.getIfName())) {
                        mDevList.setSelection(i);
                        break;
                    }
                }
/*
                if (mEthInfo.getConnectMode().equals(EthernetDevInfo.ETH_CONN_MODE_DHCP)) 
                {
                    DhcpInfo dhcpInfo = mEthManager.getDhcpInfo();
                    Slog.d(TAG, "ip  : " + getAddress(dhcpInfo.ipAddress));
                    Slog.d(TAG, "gw  : " + getAddress(dhcpInfo.gateway));
                    Slog.d(TAG, "mask: " + getAddress(dhcpInfo.netmask));
                    Slog.d(TAG, "dns1:" + getAddress(dhcpInfo.dns1));
                    Slog.d(TAG, "dns2:" + getAddress(dhcpInfo.dns2));
                }
*/
                mIpaddr.setText(mEthInfo.getIpAddress());
                mGw.setText(mEthInfo.getRouteAddr());
                mDns.setText(mEthInfo.getDnsAddr());
                mMask.setText(mEthInfo.getNetMask());
                if (mEthInfo.getConnectMode().equals(EthernetDevInfo.ETH_CONN_MODE_DHCP)) {
                    mIpaddr.setEnabled(false);
                    mDns.setEnabled(false);
                    mGw.setEnabled(false);
                    mMask.setEnabled(false);
                } else {
                    mConTypeDhcp.setChecked(false);
                    mConTypeManual.setChecked(true);
                    mIpaddr.setEnabled(true);
                    mDns.setEnabled(true);
                    mGw.setEnabled(true);
                    mMask.setEnabled(true);
                }
                /*设置lan/wan radio显示*/
                Slog.d(TAG, "mEthManager.getmEthDevMode = "+mEthManager.getmEthDevMode());
                if(mEthManager.getmEthDevMode().equals(EthernetDevInfo.ETH_DEV_MODE_LAN)){
                    lan_mode_radio.setChecked(true);
                    wan_mode_radio.setChecked(false);
                    /*设置ip等信息不可设置*/
                    mIpaddr.setEnabled(false);
                    mDns.setEnabled(false);
                    mGw.setEnabled(false);
                    mMask.setEnabled(false);
                }else{
                    lan_mode_radio.setChecked(false);
                    wan_mode_radio.setChecked(true);
                    /*ip信息可设置*/
                    mIpaddr.setEnabled(true);
                    mDns.setEnabled(true);
                    mGw.setEnabled(true);
                    mMask.setEnabled(true);
                }

            }
        }
        return 0;
!!!128642.java!!!	handle_saveconf() : void

        Slog.d(TAG, "handle_saveconf:lan_mode_radio.isChecked() = "+lan_mode_radio.isChecked()
        +" wan_mode_radio.isChecked() = "+wan_mode_radio.isChecked());
        if(lan_mode_radio.isChecked()){
            /*获取当前网卡模式*/
            String devMode = mEthManager.getmEthDevMode();
            Slog.d(TAG, "handle_saveconf:devMode = "+devMode);
            if(devMode.equals(EthernetDevInfo.ETH_DEV_MODE_WAN)){   //如果之前模式为wan，进行切换
                int ethStatus = mEthManager.getEthState();
                Slog.d(TAG, "handle_saveconf:ethStatus = "+ethStatus);
                if(ethStatus == EthernetManager.ETH_STATE_ENABLED){
                    /*如果网卡状态为开启，那么以wan模式关闭触发系统网卡切换操作*/
                    mEthManager.setEthEnabled(false);
                    /*设置为lan模式*/
                    mEthManager.persistEthDevMode(EthernetDevInfo.ETH_DEV_MODE_LAN);
                    mEthManager.setEthEnabled(true);
                    //mEthManager.ctrlLanFunc(true);
                }else{
                    mEthManager.persistEthDevMode(EthernetDevInfo.ETH_DEV_MODE_LAN);
                    mEthManager.setEthEnabled(false);
                    //mEthManager.ctrlLanFunc(false);
                }
            }else {//上次模式为lan
                Slog.d(TAG, "handle_saveconf：已经为lan模式,只根据开关状态进行开启或关闭操作");
                int ethStatus = mEthManager.getEthState();
                Slog.d(TAG, "handle_saveconf:ethStatus = "+ethStatus);
                if(ethStatus == EthernetManager.ETH_STATE_ENABLED){
                    mEthManager.setEthEnabled(true);
                    //mEthManager.ctrlLanFunc(true);
                }else{
                    mEthManager.setEthEnabled(false);
                    //mEthManager.ctrlLanFunc(false);
                }
            }
        }else{
            /*设置为wan模式*/
            mEthManager.persistEthDevMode(EthernetDevInfo.ETH_DEV_MODE_WAN);
            String selected = null;
            if (mDevList.getSelectedItem() != null)
                selected = mDevList.getSelectedItem().toString();
            if (selected == null || selected.isEmpty())
                return;
            EthernetDevInfo info = new EthernetDevInfo();
            info.setIfName(selected);
            if (localLOGV)
                Slog.v(TAG, "Config device for " + selected);
            if (mConTypeDhcp.isChecked()) {
                Slog.i(TAG,"mode dhcp");
                info.setConnectMode(EthernetDevInfo.ETH_CONN_MODE_DHCP);
                info.setIpAddress(null);
                info.setRouteAddr(null);
                info.setDnsAddr(null);
                info.setNetMask(null);
            } else {
                Slog.i(TAG,"mode manual");
                if (isIpAddress(mIpaddr.getText().toString())
                        && isIpAddress(mGw.getText().toString())
                        && isIpAddress(mDns.getText().toString())
                        && isIpAddress(mMask.getText().toString())) {
                    info.setConnectMode(EthernetDevInfo.ETH_CONN_MODE_MANUAL);
                    info.setIpAddress(mIpaddr.getText().toString());
                    info.setRouteAddr(mGw.getText().toString());
                    info.setDnsAddr(mDns.getText().toString());
                    info.setNetMask(mMask.getText().toString());
                } else {
                    Toast.makeText(mContext, R.string.eth_settings_error, Toast.LENGTH_LONG).show();
                    return;
                }
            }
            mEthManager.updateEthDevInfo(info);
            Slog.i(TAG,"+++++++++mEnablePending is " + mEnablePending);
            if (mEnablePending) {
                Slog.i(TAG,"+++++++++mEthManager.getEthState() is " + mEthManager.getEthState());
                if(mEthManager.getEthState()==mEthManager.ETH_STATE_ENABLED){
                    mEthManager.setEthEnabled(true);
                }
                mEnablePending = false;
            }
        }
!!!128770.java!!!	isIpAddress(in value : String) : boolean
        int start = 0;
        int end = value.indexOf('.');
        int numBlocks = 0;

        while (start < value.length()) {
            if (end == -1) {
                end = value.length();
            }

            try {
                int block = Integer.parseInt(value.substring(start, end));
                if ((block > 255) || (block < 0)) {
                        return false;
                }
            } catch (NumberFormatException e) {
                    return false;
            }

            numBlocks++;

            start = end + 1;
            end = value.indexOf('.', start);
        }
        return numBlocks == 4;
!!!128898.java!!!	onClick(inout dialog : DialogInterface, in which : int) : void
        switch (which) {
            case BUTTON_POSITIVE:
                handle_saveconf();
                break;
            case BUTTON_NEGATIVE:
                //Don't need to do anything
                break;
            default:
        }
!!!129026.java!!!	updateDevNameList(inout DevList : String) : void
        if (DevList == null) {
            DevList = new String[] {};
        }
        ArrayAdapter<CharSequence> adapter = new ArrayAdapter<CharSequence>(
                getContext(), android.R.layout.simple_spinner_item, DevList);
        adapter.setDropDownViewResource(
                android.R.layout.simple_spinner_dropdown_item);
        mDevList.setAdapter(adapter);
!!!129154.java!!!	enableAfterConfig() : void
        mEnablePending = true;

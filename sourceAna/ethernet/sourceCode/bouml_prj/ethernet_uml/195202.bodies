class BroadcastReceiver
!!!636418.java!!!	goAsync() : BroadcastReceiver::PendingResult
        PendingResult res = mPendingResult;
        mPendingResult = null;
        return res;
!!!636546.java!!!	peekService(inout myContext : Context, inout service : Intent) : IBinder
        IActivityManager am = ActivityManagerNative.getDefault();
        IBinder binder = null;
        try {
            service.prepareToLeaveProcess();
            binder = am.peekService(service, service.resolveTypeIfNeeded(
                    myContext.getContentResolver()));
        } catch (RemoteException e) {
        }
        return binder;
!!!636674.java!!!	setResultCode(in code : int) : void
        checkSynchronousHint();
        mPendingResult.mResultCode = code;
!!!636802.java!!!	getResultCode() : int
        return mPendingResult != null ? mPendingResult.mResultCode : 0;
!!!636930.java!!!	setResultData(in data : String) : void
        checkSynchronousHint();
        mPendingResult.mResultData = data;
!!!637058.java!!!	getResultData() : String
        return mPendingResult != null ? mPendingResult.mResultData : null;
!!!637186.java!!!	setResultExtras(inout extras : Bundle) : void
        checkSynchronousHint();
        mPendingResult.mResultExtras = extras;
!!!637314.java!!!	getResultExtras(inout makeMap : boolean) : Bundle
        if (mPendingResult == null) {
            return null;
        }
        Bundle e = mPendingResult.mResultExtras;
        if (!makeMap) return e;
        if (e == null) mPendingResult.mResultExtras = e = new Bundle();
        return e;
!!!637442.java!!!	setResult(in code : int, in data : String, inout extras : Bundle) : void
        checkSynchronousHint();
        mPendingResult.mResultCode = code;
        mPendingResult.mResultData = data;
        mPendingResult.mResultExtras = extras;
!!!637570.java!!!	getAbortBroadcast() : boolean
        return mPendingResult != null ? mPendingResult.mAbortBroadcast : false;
!!!637698.java!!!	abortBroadcast() : void
        checkSynchronousHint();
        mPendingResult.mAbortBroadcast = true;
!!!637826.java!!!	clearAbortBroadcast() : void
        if (mPendingResult != null) {
            mPendingResult.mAbortBroadcast = false;
        }
!!!637954.java!!!	isOrderedBroadcast() : boolean
        return mPendingResult != null ? mPendingResult.mOrderedHint : false;
!!!638082.java!!!	isInitialStickyBroadcast() : boolean
        return mPendingResult != null ? mPendingResult.mInitialStickyHint : false;
!!!638210.java!!!	setOrderedHint(inout isOrdered : boolean) : void
        // Accidentally left in the SDK.
!!!638338.java!!!	setPendingResult(inout result : BroadcastReceiver::PendingResult) : void
        mPendingResult = result;
!!!638466.java!!!	getPendingResult() : BroadcastReceiver::PendingResult
        return mPendingResult;
!!!638594.java!!!	getSendingUserId() : int
        return mPendingResult.mSendingUser;
!!!638722.java!!!	setDebugUnregister(inout debug : boolean) : void
        mDebugUnregister = debug;
!!!638850.java!!!	getDebugUnregister() : boolean
        return mDebugUnregister;
!!!638978.java!!!	checkSynchronousHint() : void
        if (mPendingResult == null) {
            throw new IllegalStateException("Call while result is not pending");
        }
        
        // Note that we don't assert when receiving the initial sticky value,
        // since that may have come from an ordered broadcast.  We'll catch
        // them later when the real broadcast happens again.
        if (mPendingResult.mOrderedHint || mPendingResult.mInitialStickyHint) {
            return;
        }
        RuntimeException e = new RuntimeException(
                "BroadcastReceiver trying to return result during a non-ordered broadcast");
        e.fillInStackTrace();
        Log.e("BroadcastReceiver", e.getMessage(), e);

class NetworkTemplate
!!!263426.java!!!	forceAllNetworkTypes() : void
        sForceAllNetworkTypes = true;
!!!263554.java!!!	buildTemplateMobileAll(in subscriberId : String) : NetworkTemplate
        return new NetworkTemplate(MATCH_MOBILE_ALL, subscriberId, null);
!!!263682.java!!!	buildTemplateMobile3gLower(in subscriberId : String) : NetworkTemplate
        return new NetworkTemplate(MATCH_MOBILE_3G_LOWER, subscriberId, null);
!!!263810.java!!!	buildTemplateMobile4g(in subscriberId : String) : NetworkTemplate
        return new NetworkTemplate(MATCH_MOBILE_4G, subscriberId, null);
!!!263938.java!!!	buildTemplateMobileWildcard() : NetworkTemplate
        return new NetworkTemplate(MATCH_MOBILE_WILDCARD, null, null);
!!!264066.java!!!	buildTemplateWifiWildcard() : NetworkTemplate
        return new NetworkTemplate(MATCH_WIFI_WILDCARD, null, null);
!!!264194.java!!!	buildTemplateWifi() : NetworkTemplate
        return buildTemplateWifiWildcard();
!!!264322.java!!!	buildTemplateWifi(in networkId : String) : NetworkTemplate
        return new NetworkTemplate(MATCH_WIFI, null, networkId);
!!!264450.java!!!	buildTemplateEthernet() : NetworkTemplate
        return new NetworkTemplate(MATCH_ETHERNET, null, null);
!!!264578.java!!!	NetworkTemplate(in matchRule : int, in subscriberId : String, in networkId : String)
        mMatchRule = matchRule;
        mSubscriberId = subscriberId;
        mNetworkId = networkId;
!!!264706.java!!!	NetworkTemplate(inout in : Parcel)
        mMatchRule = in.readInt();
        mSubscriberId = in.readString();
        mNetworkId = in.readString();
!!!264834.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeInt(mMatchRule);
        dest.writeString(mSubscriberId);
        dest.writeString(mNetworkId);
!!!264962.java!!!	describeContents() : int
        return 0;
!!!265090.java!!!	toString() : String
        final StringBuilder builder = new StringBuilder("NetworkTemplate: ");
        builder.append("matchRule=").append(getMatchRuleName(mMatchRule));
        if (mSubscriberId != null) {
            builder.append(", subscriberId=").append(scrubSubscriberId(mSubscriberId));
        }
        if (mNetworkId != null) {
            builder.append(", networkId=").append(mNetworkId);
        }
        return builder.toString();
!!!265218.java!!!	hashCode() : int
        return Objects.hashCode(mMatchRule, mSubscriberId, mNetworkId);
!!!265346.java!!!	equals(inout obj : Object) : boolean
        if (obj instanceof NetworkTemplate) {
            final NetworkTemplate other = (NetworkTemplate) obj;
            return mMatchRule == other.mMatchRule
                    && Objects.equal(mSubscriberId, other.mSubscriberId)
                    && Objects.equal(mNetworkId, other.mNetworkId);
        }
        return false;
!!!265474.java!!!	getMatchRule() : int
        return mMatchRule;
!!!265602.java!!!	getSubscriberId() : String
        return mSubscriberId;
!!!265730.java!!!	getNetworkId() : String
        return mNetworkId;
!!!265858.java!!!	matches(inout ident : NetworkIdentity) : boolean
        switch (mMatchRule) {
            case MATCH_MOBILE_ALL:
                return matchesMobile(ident);
            case MATCH_MOBILE_3G_LOWER:
                return matchesMobile3gLower(ident);
            case MATCH_MOBILE_4G:
                return matchesMobile4g(ident);
            case MATCH_WIFI:
                return matchesWifi(ident);
            case MATCH_ETHERNET:
                return matchesEthernet(ident);
            case MATCH_MOBILE_WILDCARD:
                return matchesMobileWildcard(ident);
            case MATCH_WIFI_WILDCARD:
                return matchesWifiWildcard(ident);
            default:
                throw new IllegalArgumentException("unknown network template");
        }
!!!265986.java!!!	matchesMobile(inout ident : NetworkIdentity) : boolean
        if (ident.mType == TYPE_WIMAX) {
            // TODO: consider matching against WiMAX subscriber identity
            return true;
        } else {
            return ((sForceAllNetworkTypes || contains(DATA_USAGE_NETWORK_TYPES, ident.mType))
                    && Objects.equal(mSubscriberId, ident.mSubscriberId));
        }
!!!266114.java!!!	matchesMobile3gLower(inout ident : NetworkIdentity) : boolean
        ensureSubtypeAvailable();
        if (ident.mType == TYPE_WIMAX) {
            return false;
        } else if (matchesMobile(ident)) {
            switch (getNetworkClass(ident.mSubType)) {
                case NETWORK_CLASS_UNKNOWN:
                case NETWORK_CLASS_2_G:
                case NETWORK_CLASS_3_G:
                    return true;
            }
        }
        return false;
!!!266242.java!!!	matchesMobile4g(inout ident : NetworkIdentity) : boolean
        ensureSubtypeAvailable();
        if (ident.mType == TYPE_WIMAX) {
            // TODO: consider matching against WiMAX subscriber identity
            return true;
        } else if (matchesMobile(ident)) {
            switch (getNetworkClass(ident.mSubType)) {
                case NETWORK_CLASS_4_G:
                    return true;
            }
        }
        return false;
!!!266370.java!!!	matchesWifi(inout ident : NetworkIdentity) : boolean
        switch (ident.mType) {
            case TYPE_WIFI:
                return Objects.equal(
                        removeDoubleQuotes(mNetworkId), removeDoubleQuotes(ident.mNetworkId));
            default:
                return false;
        }
!!!266498.java!!!	matchesEthernet(inout ident : NetworkIdentity) : boolean
        if (ident.mType == TYPE_ETHERNET) {
            return true;
        }
        return false;
!!!266626.java!!!	matchesMobileWildcard(inout ident : NetworkIdentity) : boolean
        if (ident.mType == TYPE_WIMAX) {
            return true;
        } else {
            return sForceAllNetworkTypes || contains(DATA_USAGE_NETWORK_TYPES, ident.mType);
        }
!!!266754.java!!!	matchesWifiWildcard(inout ident : NetworkIdentity) : boolean
        switch (ident.mType) {
            case TYPE_WIFI:
            case TYPE_WIFI_P2P:
                return true;
            default:
                return false;
        }
!!!266882.java!!!	getMatchRuleName(in matchRule : int) : String
        switch (matchRule) {
            case MATCH_MOBILE_3G_LOWER:
                return "MOBILE_3G_LOWER";
            case MATCH_MOBILE_4G:
                return "MOBILE_4G";
            case MATCH_MOBILE_ALL:
                return "MOBILE_ALL";
            case MATCH_WIFI:
                return "WIFI";
            case MATCH_ETHERNET:
                return "ETHERNET";
            case MATCH_MOBILE_WILDCARD:
                return "MOBILE_WILDCARD";
            case MATCH_WIFI_WILDCARD:
                return "WIFI_WILDCARD";
            default:
                return "UNKNOWN";
        }
!!!267010.java!!!	ensureSubtypeAvailable() : void
        if (COMBINE_SUBTYPE_ENABLED) {
            throw new IllegalArgumentException(
                    "Unable to enforce 3G_LOWER template on combined data.");
        }

class AssetManager
!!!853634.java!!!	AssetManager()
        synchronized (this) {
            if (DEBUG_REFS) {
                mNumRefs = 0;
                incRefsLocked(this.hashCode());
            }
            init();
            if (localLOGV) Log.v(TAG, "New asset manager: " + this);
            ensureSystemAssets();
        }
!!!853762.java!!!	ensureSystemAssets() : void
        synchronized (sSync) {
            if (sSystem == null) {
                AssetManager system = new AssetManager(true);
                system.makeStringBlocks(false);
                sSystem = system;
            }
        }
!!!853890.java!!!	AssetManager(inout isSystem : boolean)
        if (DEBUG_REFS) {
            synchronized (this) {
                mNumRefs = 0;
                incRefsLocked(this.hashCode());
            }
        }
        init();
        if (localLOGV) Log.v(TAG, "New asset manager: " + this);
!!!854018.java!!!	getSystem() : AssetManager
        ensureSystemAssets();
        return sSystem;
!!!854146.java!!!	close() : void
        synchronized(this) {
            //System.out.println("Release: num=" + mNumRefs
            //                   + ", released=" + mReleased);
            if (mOpen) {
                mOpen = false;
                decRefsLocked(this.hashCode());
            }
        }
!!!854274.java!!!	getResourceText(in ident : int) : CharSequence
        synchronized (this) {
            TypedValue tmpValue = mValue;
            int block = loadResourceValue(ident, (short) 0, tmpValue, true);
            if (block >= 0) {
                if (tmpValue.type == TypedValue.TYPE_STRING) {
                    return mStringBlocks[block].get(tmpValue.data);
                }
                return tmpValue.coerceToString();
            }
        }
        return null;
!!!854402.java!!!	getResourceBagText(in ident : int, in bagEntryId : int) : CharSequence
        synchronized (this) {
            TypedValue tmpValue = mValue;
            int block = loadResourceBagValue(ident, bagEntryId, tmpValue, true);
            if (block >= 0) {
                if (tmpValue.type == TypedValue.TYPE_STRING) {
                    return mStringBlocks[block].get(tmpValue.data);
                }
                return tmpValue.coerceToString();
            }
        }
        return null;
!!!854530.java!!!	getResourceStringArray(in id : int) : String
        String[] retArray = getArrayStringResource(id);
        return retArray;
!!!854658.java!!!	getResourceValue(in ident : int, in density : int, inout outValue : TypedValue, inout resolveRefs : boolean) : boolean
        int block = loadResourceValue(ident, (short) density, outValue, resolveRefs);
        if (block >= 0) {
            if (outValue.type != TypedValue.TYPE_STRING) {
                return true;
            }
            outValue.string = mStringBlocks[block].get(outValue.data);
            return true;
        }
        return false;
!!!854786.java!!!	getResourceTextArray(in id : int) : CharSequence
        int[] rawInfoArray = getArrayStringInfo(id);
        int rawInfoArrayLen = rawInfoArray.length;
        final int infoArrayLen = rawInfoArrayLen / 2;
        int block;
        int index;
        CharSequence[] retArray = new CharSequence[infoArrayLen];
        for (int i = 0, j = 0; i < rawInfoArrayLen; i = i + 2, j++) {
            block = rawInfoArray[i];
            index = rawInfoArray[i + 1];
            retArray[j] = index >= 0 ? mStringBlocks[block].get(index) : null;
        }
        return retArray;
!!!854914.java!!!	getThemeValue(in theme : int, in ident : int, inout outValue : TypedValue, inout resolveRefs : boolean) : boolean
        int block = loadThemeAttributeValue(theme, ident, outValue, resolveRefs);
        if (block >= 0) {
            if (outValue.type != TypedValue.TYPE_STRING) {
                return true;
            }
            StringBlock[] blocks = mStringBlocks;
            if (blocks == null) {
                ensureStringBlocks();
                blocks = mStringBlocks;
            }
            outValue.string = blocks[block].get(outValue.data);
            return true;
        }
        return false;
!!!855042.java!!!	ensureStringBlocks() : void
        if (mStringBlocks == null) {
            synchronized (this) {
                if (mStringBlocks == null) {
                    makeStringBlocks(true);
                }
            }
        }
!!!855170.java!!!	makeStringBlocks(inout copyFromSystem : boolean) : void
        final int sysNum = copyFromSystem ? sSystem.mStringBlocks.length : 0;
        final int num = getStringBlockCount();
        mStringBlocks = new StringBlock[num];
        if (localLOGV) Log.v(TAG, "Making string blocks for " + this
                + ": " + num);
        for (int i=0; i<num; i++) {
            if (i < sysNum) {
                mStringBlocks[i] = sSystem.mStringBlocks[i];
            } else {
                mStringBlocks[i] = new StringBlock(getNativeStringBlock(i), true);
            }
        }
!!!855298.java!!!	getPooledString(in block : int, in id : int) : CharSequence
        //System.out.println("Get pooled: block=" + block
        //                   + ", id=#" + Integer.toHexString(id)
        //                   + ", blocks=" + mStringBlocks);
        return mStringBlocks[block-1].get(id);
!!!855426.java!!!	open(in fileName : String) : InputStream
        return open(fileName, ACCESS_STREAMING);
!!!855554.java!!!	open(in fileName : String, in accessMode : int) : InputStream
        synchronized (this) {
            if (!mOpen) {
                throw new RuntimeException("Assetmanager has been closed");
            }
            int asset = openAsset(fileName, accessMode);
            if (asset != 0) {
                AssetInputStream res = new AssetInputStream(asset);
                incRefsLocked(res.hashCode());
                return res;
            }
        }
        throw new FileNotFoundException("Asset file: " + fileName);
!!!855682.java!!!	openFd(in fileName : String) : AssetFileDescriptor
        synchronized (this) {
            if (!mOpen) {
                throw new RuntimeException("Assetmanager has been closed");
            }
            ParcelFileDescriptor pfd = openAssetFd(fileName, mOffsets);
            if (pfd != null) {
                return new AssetFileDescriptor(pfd, mOffsets[0], mOffsets[1]);
            }
        }
        throw new FileNotFoundException("Asset file: " + fileName);
!!!855938.java!!!	openNonAsset(in fileName : String) : InputStream
        return openNonAsset(0, fileName, ACCESS_STREAMING);
!!!856066.java!!!	openNonAsset(in fileName : String, in accessMode : int) : InputStream
        return openNonAsset(0, fileName, accessMode);
!!!856194.java!!!	openNonAsset(in cookie : int, in fileName : String) : InputStream
        return openNonAsset(cookie, fileName, ACCESS_STREAMING);
!!!856322.java!!!	openNonAsset(in cookie : int, in fileName : String, in accessMode : int) : InputStream
        synchronized (this) {
            if (!mOpen) {
                throw new RuntimeException("Assetmanager has been closed");
            }
            int asset = openNonAssetNative(cookie, fileName, accessMode);
            if (asset != 0) {
                AssetInputStream res = new AssetInputStream(asset);
                incRefsLocked(res.hashCode());
                return res;
            }
        }
        throw new FileNotFoundException("Asset absolute file: " + fileName);
!!!856450.java!!!	openNonAssetFd(in fileName : String) : AssetFileDescriptor
        return openNonAssetFd(0, fileName);
!!!856578.java!!!	openNonAssetFd(in cookie : int, in fileName : String) : AssetFileDescriptor
        synchronized (this) {
            if (!mOpen) {
                throw new RuntimeException("Assetmanager has been closed");
            }
            ParcelFileDescriptor pfd = openNonAssetFdNative(cookie,
                    fileName, mOffsets);
            if (pfd != null) {
                return new AssetFileDescriptor(pfd, mOffsets[0], mOffsets[1]);
            }
        }
        throw new FileNotFoundException("Asset absolute file: " + fileName);
!!!856706.java!!!	openXmlResourceParser(in fileName : String) : XmlResourceParser
        return openXmlResourceParser(0, fileName);
!!!856834.java!!!	openXmlResourceParser(in cookie : int, in fileName : String) : XmlResourceParser
        XmlBlock block = openXmlBlockAsset(cookie, fileName);
        XmlResourceParser rp = block.newParser();
        block.close();
        return rp;
!!!856962.java!!!	openXmlBlockAsset(in fileName : String) : XmlBlock
        return openXmlBlockAsset(0, fileName);
!!!857090.java!!!	openXmlBlockAsset(in cookie : int, in fileName : String) : XmlBlock
        synchronized (this) {
            if (!mOpen) {
                throw new RuntimeException("Assetmanager has been closed");
            }
            int xmlBlock = openXmlAssetNative(cookie, fileName);
            if (xmlBlock != 0) {
                XmlBlock res = new XmlBlock(this, xmlBlock);
                incRefsLocked(res.hashCode());
                return res;
            }
        }
        throw new FileNotFoundException("Asset XML file: " + fileName);
!!!857218.java!!!	xmlBlockGone(in id : int) : void
        synchronized (this) {
            decRefsLocked(id);
        }
!!!857346.java!!!	createTheme() : int
        synchronized (this) {
            if (!mOpen) {
                throw new RuntimeException("Assetmanager has been closed");
            }
            int res = newTheme();
            incRefsLocked(res);
            return res;
        }
!!!857474.java!!!	releaseTheme(in theme : int) : void
        synchronized (this) {
            deleteTheme(theme);
            decRefsLocked(theme);
        }
!!!857602.java!!!	finalize() : void
        try {
            if (DEBUG_REFS && mNumRefs != 0) {
                Log.w(TAG, "AssetManager " + this
                        + " finalized with non-zero refs: " + mNumRefs);
                if (mRefStacks != null) {
                    for (RuntimeException e : mRefStacks.values()) {
                        Log.w(TAG, "Reference from here", e);
                    }
                }
            }
            destroy();
        } finally {
            super.finalize();
        }
!!!859266.java!!!	addAssetPath(in path : String) : int
        int res = addAssetPathNative(path);
        return res;
!!!859522.java!!!	addAssetPaths(inout paths : String) : int
        if (paths == null) {
            return null;
        }

        int[] cookies = new int[paths.length];
        for (int i = 0; i < paths.length; i++) {
            cookies[i] = addAssetPath(paths[i]);
        }

        return cookies;
!!!865154.java!!!	incRefsLocked(in id : int) : void
        if (DEBUG_REFS) {
            if (mRefStacks == null) {
                mRefStacks = new HashMap<Integer, RuntimeException>();
                RuntimeException ex = new RuntimeException();
                ex.fillInStackTrace();
                mRefStacks.put(this.hashCode(), ex);
            }
        }
        mNumRefs++;
!!!865282.java!!!	decRefsLocked(in id : int) : void
        if (DEBUG_REFS && mRefStacks != null) {
            mRefStacks.remove(id);
        }
        mNumRefs--;
        //System.out.println("Dec streams: mNumRefs=" + mNumRefs
        //                   + " mReleased=" + mReleased);
        if (mNumRefs == 0) {
            destroy();
        }

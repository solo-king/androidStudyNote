class MobileDataStateReceiver
!!!230274.java!!!	onReceive(inout context : Context, inout intent : Intent) : void
            int defaultDataSub = MSimTelephonyManager.getDefault().getDefaultDataSubscription();

            if (intent.getAction().equals(TelephonyIntents.
                    ACTION_DATA_CONNECTION_CONNECTED_TO_PROVISIONING_APN)) {
                String apnName = intent.getStringExtra(PhoneConstants.DATA_APN_KEY);
                String apnType = intent.getStringExtra(PhoneConstants.DATA_APN_TYPE_KEY);
                if (!TextUtils.equals(mApnType, apnType)) {
                    return;
                }
                if (DBG) {
                    log("Broadcast received: " + intent.getAction() + " apnType=" + apnType
                            + " apnName=" + apnName);
                }

                // Make us in the connecting state until we make a new TYPE_MOBILE_PROVISIONING
                mMobileDataState[defaultDataSub] = PhoneConstants.DataState.CONNECTING;
                updateLinkProperitesAndCapatilities(intent);
                mNetworkInfo[defaultDataSub].setIsConnectedToProvisioningNetwork(true);

                // Change state to SUSPENDED so setDetailedState
                // sends EVENT_STATE_CHANGED to connectivityService
                setDetailedState(DetailedState.SUSPENDED, "", apnName, 0);
            } else if (intent.getAction().equals(TelephonyIntents.
                    ACTION_ANY_DATA_CONNECTION_STATE_CHANGED)) {
                String apnType = intent.getStringExtra(PhoneConstants.DATA_APN_TYPE_KEY);
                final int subscription = intent.getIntExtra(MSimConstants.SUBSCRIPTION_KEY,
                        MSimConstants.DEFAULT_SUBSCRIPTION);
                String reason = intent.getStringExtra(PhoneConstants.STATE_CHANGE_REASON_KEY);
                String apnName = intent.getStringExtra(PhoneConstants.DATA_APN_KEY);
                if (VDBG) {
                    log(String.format("Broadcast received: ACTION_ANY_DATA_CONNECTION_STATE_CHANGED"
                        + "mApnType=%s %s received apnType=%s", mApnType,
                        TextUtils.equals(apnType, mApnType) ? "==" : "!=", apnType));
                }
                if (!TextUtils.equals(apnType, mApnType)) {
                    return;
                }
                // Assume this isn't a provisioning network.
                mNetworkInfo[MSimTelephonyManager.getDefault()
                    .getDefaultDataSubscription()].setIsConnectedToProvisioningNetwork(false);
                if (DBG) {
                    log("Broadcast received: " + intent.getAction() + " apnType=" + apnType);
                }

                if (MSimTelephonyManager.getDefault().isMultiSimEnabled()) {
                    int dds = 0;
                    getPhoneService(false);

                   /*
                    * If the phone process has crashed in the past, we'll get a
                    * RemoteException and need to re-reference the service.
                    */
                    for (int retry = 0; retry < 2; retry++) {
                        if (mMSimPhoneService == null) {
                            loge("Ignoring get dds request because "
                                    + "MSim Phone Service is not available");
                            break;
                        }

                        try {
                            dds = mMSimPhoneService.getPreferredDataSubscription();
                        } catch (RemoteException e) {
                            if (retry == 0) getPhoneService(true);
                        }
                    }
                    if (VDBG) {
                        log(String.format(
                                "ACTION_ANY_DATA_CONNECTION_STATE_CHANGED"
                                + ", subscription=%s, dds=%s, reason=%s", subscription
                                , dds, reason));
                    }

                }

                int oldSubtype = mNetworkInfo[subscription].getSubtype();
                int newSubType = MSimTelephonyManager.getDefault().getNetworkType(subscription);
                String subTypeName = TelephonyManager.getDefault().getNetworkTypeName();
                mNetworkInfo[subscription].setSubtype(newSubType, subTypeName);
                if (newSubType != oldSubtype && mNetworkInfo[subscription].isConnected()) {
                    Message msg = mTarget.obtainMessage(EVENT_NETWORK_SUBTYPE_CHANGED,
                            oldSubtype, subscription,
                            mNetworkInfo[subscription]);
                    msg.sendToTarget();
                }

                PhoneConstants.DataState state = Enum.valueOf(PhoneConstants.DataState.class,
                        intent.getStringExtra(PhoneConstants.STATE_KEY));

                mNetworkInfo[subscription].setRoaming(intent.getBooleanExtra(
                        PhoneConstants.DATA_NETWORK_ROAMING_KEY, false));
                if (VDBG) {
                    log(mApnType + " setting isAvailable to " +
                            intent.getBooleanExtra(PhoneConstants.NETWORK_UNAVAILABLE_KEY,false));
                }
                mNetworkInfo[subscription].setIsAvailable(!intent.getBooleanExtra(
                        PhoneConstants.NETWORK_UNAVAILABLE_KEY, false));

                if (VDBG) {
                    log("Received state=" + state + ", old=" + mMobileDataState[subscription] +
                        ", reason=" + (reason == null ? "(unspecified)" : reason));
                }
                if (mMobileDataState[subscription] != state) {
                    mMobileDataState[subscription] = state;
                    switch (state) {
                        case DISCONNECTED:
                            if(isTeardownRequested()) {
                                setTeardownRequested(false);
                            }

                            setDetailedState(DetailedState.DISCONNECTED, reason, apnName,
                                    subscription);
                            // can't do this here - ConnectivityService needs it to clear stuff
                            // it's ok though - just leave it to be refreshed next time
                            // we connect.
                            //if (DBG) log("clearing mInterfaceName for "+ mApnType +
                            //        " as it DISCONNECTED");
                            //mInterfaceName = null;
                            break;
                        case CONNECTING:
                            setDetailedState(DetailedState.CONNECTING, reason, apnName,
                                    subscription);
                            break;
                        case SUSPENDED:
                            setDetailedState(DetailedState.SUSPENDED, reason, apnName,
                                    subscription);
                            break;
                        case CONNECTED:
                            mSubscription = subscription;
                            updateLinkProperitesAndCapatilities(intent);
                            setDetailedState(DetailedState.CONNECTED, reason, apnName,
                                    subscription);
                            break;
                    }

                    if (VDBG) {
                        Slog.d(TAG, "TelephonyMgr.DataConnectionStateChanged");
                        if (mNetworkInfo[subscription] != null) {
                            Slog.d(TAG, "NetworkInfo["+subscription+"] = "
                                    + mNetworkInfo[subscription].toString());
                            Slog.d(TAG, "subType = "
                                    + String.valueOf(mNetworkInfo[subscription].getSubtype()));
                            Slog.d(TAG, "subType = "
                                    + mNetworkInfo[subscription].getSubtypeName());
                        }
                        if (mLinkProperties[subscription] != null) {
                            Slog.d(TAG, "LinkProperties = "
                                    + mLinkProperties[subscription].toString());
                        } else {
                            Slog.d(TAG, "LinkProperties = " );
                        }

                        if (mLinkCapabilities[subscription] != null) {
                            Slog.d(TAG, "LinkCapabilities = "
                                    + mLinkCapabilities[subscription].toString());
                        } else {
                            Slog.d(TAG, "LinkCapabilities = " );
                        }
                    }


                    /* lets not sample traffic data across state changes */
                    mSamplingDataTracker[subscription].resetSamplingData();
                } else {
                    // There was no state change. Check if LinkProperties has been updated.
                    if (TextUtils.equals(reason, PhoneConstants.REASON_LINK_PROPERTIES_CHANGED)) {
                        mLinkProperties[subscription] = intent.getParcelableExtra(
                                PhoneConstants.DATA_LINK_PROPERTIES_KEY);
                        if (mLinkProperties[subscription] == null) {
                            loge("No link property in LINK_PROPERTIES change event.");
                            mLinkProperties[subscription] = new LinkProperties();
                        }
                        // Just update reason field in this NetworkInfo
                        mNetworkInfo[subscription]
                            .setDetailedState(mNetworkInfo[subscription].getDetailedState(), reason,
                                                      mNetworkInfo[subscription].getExtraInfo());
                        Message msg = mTarget.obtainMessage(EVENT_CONFIGURATION_CHANGED,
                                                            0, subscription,
                                                            mNetworkInfo[subscription]);
                        msg.sendToTarget();
                    }
                }
            } else if (intent.getAction().
                    equals(TelephonyIntents.ACTION_DATA_CONNECTION_FAILED)) {
                String apnType = intent.getStringExtra(PhoneConstants.DATA_APN_TYPE_KEY);
                final int subscription = intent.getIntExtra(MSimConstants.SUBSCRIPTION_KEY,
                        MSimConstants.DEFAULT_SUBSCRIPTION);

                if (!TextUtils.equals(apnType, mApnType)) {
                    if (DBG) {
                        log(String.format(
                                "Broadcast received: ACTION_ANY_DATA_CONNECTION_FAILED ignore, " +
                                "mApnType=%s != received apnType=%s", mApnType, apnType));
                    }
                    return;
                }
                // Assume this isn't a provisioning network.
                mNetworkInfo[subscription].setIsConnectedToProvisioningNetwork(false);
                String reason = intent.getStringExtra(PhoneConstants.FAILURE_REASON_KEY);
                String apnName = intent.getStringExtra(PhoneConstants.DATA_APN_KEY);
                if (DBG) {
                    log("Broadcast received: " + intent.getAction() +
                                " reason=" + reason == null ? "null" : reason);
                }
                setDetailedState(DetailedState.FAILED, reason, apnName, subscription);
            } else {
                if (DBG) log("Broadcast received: ignore " + intent.getAction());
            }
